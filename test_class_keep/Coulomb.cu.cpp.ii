# 1 "./test_class_keep/Coulomb.cudafe1.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "./test_class_keep/Coulomb.cudafe1.cpp"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic push
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic ignored "-Wunused-function"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic pop
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
# 1 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
# 56 "/usr/local/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 59 "/usr/local/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic ignored "-Wunused-function"
# 61 "/usr/local/cuda/include/device_types.h"
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3

# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3
typedef long ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3
typedef unsigned long size_t;
# 1 "/usr/local/cuda/include/crt/host_runtime.h" 1 3
# 69 "/usr/local/cuda/include/crt/host_runtime.h" 3
# 1 "/usr/local/cuda/include/builtin_types.h" 1 3
# 56 "/usr/local/cuda/include/builtin_types.h" 3
# 1 "/usr/local/cuda/include/device_types.h" 1 3
# 53 "/usr/local/cuda/include/device_types.h" 3
# 1 "/usr/local/cuda/include/host_defines.h" 1 3
# 54 "/usr/local/cuda/include/device_types.h" 2 3







enum cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda/include/builtin_types.h" 2 3


# 1 "/usr/local/cuda/include/driver_types.h" 1 3
# 156 "/usr/local/cuda/include/driver_types.h" 3
enum cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 191 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorLaunchFailure = 4,
# 200 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorPriorLaunchFailure = 5,
# 210 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorLaunchTimeout = 6,
# 219 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 234 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 315 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorAddressOfConstant = 22,
# 324 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorTextureFetchFailed = 23,
# 333 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorTextureNotBound = 24,
# 342 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 391 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 426 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 488 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 514 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 639 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorSyncDepthExceeded = 68,
# 651 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 671 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 688 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorMisalignedAddress = 74,
# 699 "/usr/local/cuda/include/driver_types.h" 3
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorNvlinkUncorrectable = 80,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1044 "/usr/local/cuda/include/driver_types.h" 3
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6
};




enum cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4
};




enum cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91
};





enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3
};



struct cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
    int hostNativeAtomicSupported;
    int singleToDoublePrecisionPerfRatio;
    int pageableMemoryAccess;
    int concurrentManagedAccess;
};
# 1455 "/usr/local/cuda/include/driver_types.h" 3
typedef struct cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef struct cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1477 "/usr/local/cuda/include/driver_types.h" 3
typedef enum cudaError cudaError_t;




typedef struct CUstream_st *cudaStream_t;




typedef struct CUevent_st *cudaEvent_t;




typedef struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef struct CUuuid_st cudaUUID_t;




typedef enum cudaOutputMode cudaOutputMode_t;
# 60 "/usr/local/cuda/include/builtin_types.h" 2 3


# 1 "/usr/local/cuda/include/surface_types.h" 1 3
# 84 "/usr/local/cuda/include/surface_types.h" 3
enum cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef unsigned long long cudaSurfaceObject_t;
# 63 "/usr/local/cuda/include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/include/texture_types.h" 1 3
# 84 "/usr/local/cuda/include/texture_types.h" 3
enum cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    float borderColor[4];



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef unsigned long long cudaTextureObject_t;
# 64 "/usr/local/cuda/include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/include/vector_types.h" 1 3
# 61 "/usr/local/cuda/include/vector_types.h" 3
# 1 "/usr/local/cuda/include/builtin_types.h" 1 3
# 64 "/usr/local/cuda/include/builtin_types.h" 3
# 1 "/usr/local/cuda/include/vector_types.h" 1 3
# 64 "/usr/local/cuda/include/builtin_types.h" 2 3
# 62 "/usr/local/cuda/include/vector_types.h" 2 3
# 98 "/usr/local/cuda/include/vector_types.h" 3
struct char1
{
    signed char x;
};

struct uchar1
{
    unsigned char x;
};


struct __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct char3
{
    signed char x, y, z;
};

struct uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct short1
{
    short x;
};

struct ushort1
{
    unsigned short x;
};

struct __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct short3
{
    short x, y, z;
};

struct ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct int1
{
    int x;
};

struct uint1
{
    unsigned int x;
};

struct __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct int3
{
    int x, y, z;
};

struct uint3
{
    unsigned int x, y, z;
};

struct __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct long1
{
    long int x;
};

struct ulong1
{
    unsigned long x;
};






struct __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct long3
{
    long int x, y, z;
};

struct ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct float1
{
    float x;
};
# 274 "/usr/local/cuda/include/vector_types.h" 3
struct __attribute__((aligned(8))) float2 { float x; float y; };




struct float3
{
    float x, y, z;
};

struct __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct longlong1
{
    long long int x;
};

struct ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct longlong3
{
    long long int x, y, z;
};

struct ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct double1
{
    double x;
};

struct __attribute__((aligned(16))) double2
{
    double x, y;
};

struct double3
{
    double x, y, z;
};

struct __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 362 "/usr/local/cuda/include/vector_types.h" 3
typedef struct char1 char1;
typedef struct uchar1 uchar1;
typedef struct char2 char2;
typedef struct uchar2 uchar2;
typedef struct char3 char3;
typedef struct uchar3 uchar3;
typedef struct char4 char4;
typedef struct uchar4 uchar4;
typedef struct short1 short1;
typedef struct ushort1 ushort1;
typedef struct short2 short2;
typedef struct ushort2 ushort2;
typedef struct short3 short3;
typedef struct ushort3 ushort3;
typedef struct short4 short4;
typedef struct ushort4 ushort4;
typedef struct int1 int1;
typedef struct uint1 uint1;
typedef struct int2 int2;
typedef struct uint2 uint2;
typedef struct int3 int3;
typedef struct uint3 uint3;
typedef struct int4 int4;
typedef struct uint4 uint4;
typedef struct long1 long1;
typedef struct ulong1 ulong1;
typedef struct long2 long2;
typedef struct ulong2 ulong2;
typedef struct long3 long3;
typedef struct ulong3 ulong3;
typedef struct long4 long4;
typedef struct ulong4 ulong4;
typedef struct float1 float1;
typedef struct float2 float2;
typedef struct float3 float3;
typedef struct float4 float4;
typedef struct longlong1 longlong1;
typedef struct ulonglong1 ulonglong1;
typedef struct longlong2 longlong2;
typedef struct ulonglong2 ulonglong2;
typedef struct longlong3 longlong3;
typedef struct ulonglong3 ulonglong3;
typedef struct longlong4 longlong4;
typedef struct ulonglong4 ulonglong4;
typedef struct double1 double1;
typedef struct double2 double2;
typedef struct double3 double3;
typedef struct double4 double4;







struct dim3
{
    unsigned int x, y, z;

    dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef struct dim3 dim3;
# 64 "/usr/local/cuda/include/builtin_types.h" 2 3
# 70 "/usr/local/cuda/include/crt/host_runtime.h" 2 3
# 1 "/usr/local/cuda/include/crt/storage_class.h" 1 3
# 71 "/usr/local/cuda/include/crt/host_runtime.h" 2 3
# 218 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 2 3
# 156 "/usr/local/cuda/include/driver_types.h"
# 751 "/usr/local/cuda/include/driver_types.h"
# 762 "/usr/local/cuda/include/driver_types.h"
# 774 "/usr/local/cuda/include/driver_types.h"

# 774 "/usr/local/cuda/include/driver_types.h"
typedef struct cudaArray *cudaArray_t;
# 779 "/usr/local/cuda/include/driver_types.h"
typedef const cudaArray *cudaArray_const_t;
# 781 "/usr/local/cuda/include/driver_types.h"
struct cudaArray;
# 786 "/usr/local/cuda/include/driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t;
# 791 "/usr/local/cuda/include/driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t;
# 793 "/usr/local/cuda/include/driver_types.h"
struct cudaMipmappedArray;
# 798 "/usr/local/cuda/include/driver_types.h"
# 807 "/usr/local/cuda/include/driver_types.h"
# 821 "/usr/local/cuda/include/driver_types.h"
# 834 "/usr/local/cuda/include/driver_types.h"
# 846 "/usr/local/cuda/include/driver_types.h"
# 856 "/usr/local/cuda/include/driver_types.h"
# 873 "/usr/local/cuda/include/driver_types.h"
# 891 "/usr/local/cuda/include/driver_types.h"
struct cudaGraphicsResource;
# 896 "/usr/local/cuda/include/driver_types.h"
# 908 "/usr/local/cuda/include/driver_types.h"
# 918 "/usr/local/cuda/include/driver_types.h"
# 931 "/usr/local/cuda/include/driver_types.h"
# 942 "/usr/local/cuda/include/driver_types.h"
# 984 "/usr/local/cuda/include/driver_types.h"
# 1012 "/usr/local/cuda/include/driver_types.h"
# 1027 "/usr/local/cuda/include/driver_types.h"
# 1067 "/usr/local/cuda/include/driver_types.h"
# 1123 "/usr/local/cuda/include/driver_types.h"
# 1135 "/usr/local/cuda/include/driver_types.h"
# 1145 "/usr/local/cuda/include/driver_types.h"
# 1156 "/usr/local/cuda/include/driver_types.h"
# 1168 "/usr/local/cuda/include/driver_types.h"
# 1181 "/usr/local/cuda/include/driver_types.h"
# 1192 "/usr/local/cuda/include/driver_types.h"
# 1201 "/usr/local/cuda/include/driver_types.h"
# 1299 "/usr/local/cuda/include/driver_types.h"
# 1307 "/usr/local/cuda/include/driver_types.h"
# 1458 "/usr/local/cuda/include/driver_types.h"
# 1466 "/usr/local/cuda/include/driver_types.h"
# 1477 "/usr/local/cuda/include/driver_types.h"
# 1482 "/usr/local/cuda/include/driver_types.h"
# 1487 "/usr/local/cuda/include/driver_types.h"
# 1492 "/usr/local/cuda/include/driver_types.h"
# 1497 "/usr/local/cuda/include/driver_types.h"
# 1502 "/usr/local/cuda/include/driver_types.h"
# 84 "/usr/local/cuda/include/surface_types.h"
# 94 "/usr/local/cuda/include/surface_types.h"
# 103 "/usr/local/cuda/include/surface_types.h"
# 114 "/usr/local/cuda/include/surface_types.h"
# 84 "/usr/local/cuda/include/texture_types.h"
# 95 "/usr/local/cuda/include/texture_types.h"
# 104 "/usr/local/cuda/include/texture_types.h"
# 113 "/usr/local/cuda/include/texture_types.h"
# 161 "/usr/local/cuda/include/texture_types.h"
# 212 "/usr/local/cuda/include/texture_types.h"
# 98 "/usr/local/cuda/include/vector_types.h"
# 103 "/usr/local/cuda/include/vector_types.h"
# 109 "/usr/local/cuda/include/vector_types.h"
# 114 "/usr/local/cuda/include/vector_types.h"
# 119 "/usr/local/cuda/include/vector_types.h"
# 124 "/usr/local/cuda/include/vector_types.h"
# 129 "/usr/local/cuda/include/vector_types.h"
# 134 "/usr/local/cuda/include/vector_types.h"
# 139 "/usr/local/cuda/include/vector_types.h"
# 144 "/usr/local/cuda/include/vector_types.h"
# 149 "/usr/local/cuda/include/vector_types.h"
# 154 "/usr/local/cuda/include/vector_types.h"
# 159 "/usr/local/cuda/include/vector_types.h"
# 164 "/usr/local/cuda/include/vector_types.h"
# 169 "/usr/local/cuda/include/vector_types.h"
# 170 "/usr/local/cuda/include/vector_types.h"
# 172 "/usr/local/cuda/include/vector_types.h"
# 177 "/usr/local/cuda/include/vector_types.h"
# 182 "/usr/local/cuda/include/vector_types.h"
# 183 "/usr/local/cuda/include/vector_types.h"
# 185 "/usr/local/cuda/include/vector_types.h"
# 190 "/usr/local/cuda/include/vector_types.h"
# 195 "/usr/local/cuda/include/vector_types.h"
# 200 "/usr/local/cuda/include/vector_types.h"
# 205 "/usr/local/cuda/include/vector_types.h"
# 210 "/usr/local/cuda/include/vector_types.h"
# 220 "/usr/local/cuda/include/vector_types.h"
# 225 "/usr/local/cuda/include/vector_types.h"
# 232 "/usr/local/cuda/include/vector_types.h"
# 237 "/usr/local/cuda/include/vector_types.h"
# 242 "/usr/local/cuda/include/vector_types.h"
# 247 "/usr/local/cuda/include/vector_types.h"
# 252 "/usr/local/cuda/include/vector_types.h"
# 274 "/usr/local/cuda/include/vector_types.h"
# 279 "/usr/local/cuda/include/vector_types.h"
# 284 "/usr/local/cuda/include/vector_types.h"
# 289 "/usr/local/cuda/include/vector_types.h"
# 294 "/usr/local/cuda/include/vector_types.h"
# 299 "/usr/local/cuda/include/vector_types.h"
# 304 "/usr/local/cuda/include/vector_types.h"
# 309 "/usr/local/cuda/include/vector_types.h"
# 314 "/usr/local/cuda/include/vector_types.h"
# 319 "/usr/local/cuda/include/vector_types.h"
# 324 "/usr/local/cuda/include/vector_types.h"
# 329 "/usr/local/cuda/include/vector_types.h"
# 334 "/usr/local/cuda/include/vector_types.h"
# 339 "/usr/local/cuda/include/vector_types.h"
# 344 "/usr/local/cuda/include/vector_types.h"
# 362 "/usr/local/cuda/include/vector_types.h"
# 363 "/usr/local/cuda/include/vector_types.h"
# 364 "/usr/local/cuda/include/vector_types.h"
# 365 "/usr/local/cuda/include/vector_types.h"
# 366 "/usr/local/cuda/include/vector_types.h"
# 367 "/usr/local/cuda/include/vector_types.h"
# 368 "/usr/local/cuda/include/vector_types.h"
# 369 "/usr/local/cuda/include/vector_types.h"
# 370 "/usr/local/cuda/include/vector_types.h"
# 371 "/usr/local/cuda/include/vector_types.h"
# 372 "/usr/local/cuda/include/vector_types.h"
# 373 "/usr/local/cuda/include/vector_types.h"
# 374 "/usr/local/cuda/include/vector_types.h"
# 375 "/usr/local/cuda/include/vector_types.h"
# 376 "/usr/local/cuda/include/vector_types.h"
# 377 "/usr/local/cuda/include/vector_types.h"
# 378 "/usr/local/cuda/include/vector_types.h"
# 379 "/usr/local/cuda/include/vector_types.h"
# 380 "/usr/local/cuda/include/vector_types.h"
# 381 "/usr/local/cuda/include/vector_types.h"
# 382 "/usr/local/cuda/include/vector_types.h"
# 383 "/usr/local/cuda/include/vector_types.h"
# 384 "/usr/local/cuda/include/vector_types.h"
# 385 "/usr/local/cuda/include/vector_types.h"
# 386 "/usr/local/cuda/include/vector_types.h"
# 387 "/usr/local/cuda/include/vector_types.h"
# 388 "/usr/local/cuda/include/vector_types.h"
# 389 "/usr/local/cuda/include/vector_types.h"
# 390 "/usr/local/cuda/include/vector_types.h"
# 391 "/usr/local/cuda/include/vector_types.h"
# 392 "/usr/local/cuda/include/vector_types.h"
# 393 "/usr/local/cuda/include/vector_types.h"
# 394 "/usr/local/cuda/include/vector_types.h"
# 395 "/usr/local/cuda/include/vector_types.h"
# 396 "/usr/local/cuda/include/vector_types.h"
# 397 "/usr/local/cuda/include/vector_types.h"
# 398 "/usr/local/cuda/include/vector_types.h"
# 399 "/usr/local/cuda/include/vector_types.h"
# 400 "/usr/local/cuda/include/vector_types.h"
# 401 "/usr/local/cuda/include/vector_types.h"
# 402 "/usr/local/cuda/include/vector_types.h"
# 403 "/usr/local/cuda/include/vector_types.h"
# 404 "/usr/local/cuda/include/vector_types.h"
# 405 "/usr/local/cuda/include/vector_types.h"
# 406 "/usr/local/cuda/include/vector_types.h"
# 407 "/usr/local/cuda/include/vector_types.h"
# 408 "/usr/local/cuda/include/vector_types.h"
# 409 "/usr/local/cuda/include/vector_types.h"
# 417 "/usr/local/cuda/include/vector_types.h"
# 427 "/usr/local/cuda/include/vector_types.h"
# 70 "/usr/local/cuda/include/library_types.h"
typedef
# 54 "/usr/local/cuda/include/library_types.h"
enum cudaDataType_t {
# 56 "/usr/local/cuda/include/library_types.h"
CUDA_R_16F = 2,
# 57 "/usr/local/cuda/include/library_types.h"
CUDA_C_16F = 6,
# 58 "/usr/local/cuda/include/library_types.h"
CUDA_R_32F = 0,
# 59 "/usr/local/cuda/include/library_types.h"
CUDA_C_32F = 4,
# 60 "/usr/local/cuda/include/library_types.h"
CUDA_R_64F = 1,
# 61 "/usr/local/cuda/include/library_types.h"
CUDA_C_64F = 5,
# 62 "/usr/local/cuda/include/library_types.h"
CUDA_R_8I = 3,
# 63 "/usr/local/cuda/include/library_types.h"
CUDA_C_8I = 7,
# 64 "/usr/local/cuda/include/library_types.h"
CUDA_R_8U,
# 65 "/usr/local/cuda/include/library_types.h"
CUDA_C_8U,
# 66 "/usr/local/cuda/include/library_types.h"
CUDA_R_32I,
# 67 "/usr/local/cuda/include/library_types.h"
CUDA_C_32I,
# 68 "/usr/local/cuda/include/library_types.h"
CUDA_R_32U,
# 69 "/usr/local/cuda/include/library_types.h"
CUDA_C_32U
# 70 "/usr/local/cuda/include/library_types.h"
} cudaDataType;
# 78 "/usr/local/cuda/include/library_types.h"
typedef
# 73 "/usr/local/cuda/include/library_types.h"
enum libraryPropertyType_t {
# 75 "/usr/local/cuda/include/library_types.h"
MAJOR_VERSION,
# 76 "/usr/local/cuda/include/library_types.h"
MINOR_VERSION,
# 77 "/usr/local/cuda/include/library_types.h"
PATCH_LEVEL
# 78 "/usr/local/cuda/include/library_types.h"
} libraryPropertyType;
# 104 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern "C" {
# 106 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device);
# 107 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit);
# 108 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig);
# 109 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig);
# 110 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize();
# 111 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaGetLastError();
# 112 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaPeekAtLastError();
# 113 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error);
# 114 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error);
# 115 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count);
# 116 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device);
# 117 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags);
# 118 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 119 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags);
# 120 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags);
# 121 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags);
# 122 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
# 123 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
# 124 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event);
# 125 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func);
# 126 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr);
# 127 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size);
# 128 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream);
# 129 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream);
# 130 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream);
# 131 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream);
# 132 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream);
# 133 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream);
# 134 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream);
# 135 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream);
# 136 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
# 137 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
# 138 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream);
# 139 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream);
# 140 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion);
# 161 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size);
# 189 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize);
# 190 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream);
# 191 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream);
# 209 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream);
# 210 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream);
# 213 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize);
# 214 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags);
# 216 "/usr/local/cuda/include/cuda_device_runtime_api.h"
}
# 218 "/usr/local/cuda/include/cuda_device_runtime_api.h"
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size);
# 219 "/usr/local/cuda/include/cuda_device_runtime_api.h"
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry);
# 220 "/usr/local/cuda/include/cuda_device_runtime_api.h"
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize);
# 221 "/usr/local/cuda/include/cuda_device_runtime_api.h"
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags);
# 219 "/usr/local/cuda/include/cuda_runtime_api.h"
extern "C" {
# 252 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset();
# 269 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize();
# 344 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value);
# 373 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit);
# 404 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig);
# 439 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority);
# 481 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig);
# 510 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig);
# 552 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config);
# 575 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId);
# 602 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device);
# 644 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event);
# 679 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle);
# 717 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr);
# 767 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags);
# 797 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr);
# 837 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExit();
# 861 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSynchronize();
# 908 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value);
# 939 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit);
# 974 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig);
# 1020 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig);
# 1074 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError();
# 1115 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError();
# 1130 "/usr/local/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error);
# 1145 "/usr/local/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error);
# 1175 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count);
# 1421 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device);
# 1593 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device);
# 1628 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);
# 1647 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop);
# 1681 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device);
# 1698 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device);
# 1727 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len);
# 1789 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags);
# 1830 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags);
# 1867 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream);
# 1896 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags);
# 1939 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority);
# 1963 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority);
# 1984 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags);
# 2005 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 2037 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags);
# 2051 "/usr/local/cuda/include/cuda_runtime_api.h"
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData);
# 2108 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags);
# 2128 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2149 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2220 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4);
# 2256 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event);
# 2290 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags);
# 2321 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2353 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event);
# 2385 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2410 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2451 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end);
# 2510 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream);
# 2560 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig);
# 2614 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config);
# 2648 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func);
# 2671 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDoubleForDevice(double * d);
# 2694 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDoubleForHost(double * d);
# 2750 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize);
# 2794 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags);
# 2845 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2874 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetupArgument(const void * arg, size_t size, size_t offset);
# 2912 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunch(const void * func);
# 3030 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1);
# 3056 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size);
# 3085 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size);
# 3124 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height);
# 3166 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0);
# 3193 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr);
# 3213 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr);
# 3235 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array);
# 3257 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3316 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags);
# 3393 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags);
# 3412 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr);
# 3454 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags);
# 3473 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost);
# 3508 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent);
# 3643 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0);
# 3764 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0);
# 3790 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level);
# 3890 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p);
# 3918 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p);
# 4029 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0);
# 4052 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0);
# 4071 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total);
# 4092 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array);
# 4130 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind);
# 4162 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count);
# 4200 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind);
# 4237 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind);
# 4275 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4320 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind);
# 4366 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind);
# 4412 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind);
# 4455 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4493 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4531 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4582 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4614 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4660 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4705 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4765 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4820 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4874 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4920 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4966 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4992 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count);
# 5022 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height);
# 5065 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent);
# 5097 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0);
# 5134 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 5184 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0);
# 5207 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol);
# 5229 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol);
# 5296 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);
# 5382 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device);
# 5438 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count);
# 5474 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count);
# 5627 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr);
# 5665 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice);
# 5704 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags);
# 5723 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5783 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5815 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags);
# 5851 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0);
# 5883 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0);
# 5912 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource);
# 5946 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel);
# 5971 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource);
# 6011 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array);
# 6046 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f);
# 6093 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U);
# 6144 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch);
# 6172 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc);
# 6200 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc);
# 6221 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUnbindTexture(const textureReference * texref);
# 6246 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref);
# 6271 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol);
# 6311 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc);
# 6330 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol);
# 6556 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc);
# 6571 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 6587 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject);
# 6603 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject);
# 6620 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject);
# 6659 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc);
# 6674 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 6689 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject);
# 6716 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion);
# 6733 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion);
# 6738 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId);
# 6964 "/usr/local/cuda/include/cuda_runtime_api.h"
}
# 107 "/usr/local/cuda/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc()
# 108 "/usr/local/cuda/include/channel_descriptor.h"
{
# 109 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
# 110 "/usr/local/cuda/include/channel_descriptor.h"
}
# 112 "/usr/local/cuda/include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf()
# 113 "/usr/local/cuda/include/channel_descriptor.h"
{
# 114 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 116 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 117 "/usr/local/cuda/include/channel_descriptor.h"
}
# 119 "/usr/local/cuda/include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1()
# 120 "/usr/local/cuda/include/channel_descriptor.h"
{
# 121 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 123 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 124 "/usr/local/cuda/include/channel_descriptor.h"
}
# 126 "/usr/local/cuda/include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2()
# 127 "/usr/local/cuda/include/channel_descriptor.h"
{
# 128 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 130 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 131 "/usr/local/cuda/include/channel_descriptor.h"
}
# 133 "/usr/local/cuda/include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4()
# 134 "/usr/local/cuda/include/channel_descriptor.h"
{
# 135 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 137 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 138 "/usr/local/cuda/include/channel_descriptor.h"
}
# 140 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> ()
# 141 "/usr/local/cuda/include/channel_descriptor.h"
{
# 142 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(char)) * 8);
# 147 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 149 "/usr/local/cuda/include/channel_descriptor.h"
}
# 151 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> ()
# 152 "/usr/local/cuda/include/channel_descriptor.h"
{
# 153 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 155 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 156 "/usr/local/cuda/include/channel_descriptor.h"
}
# 158 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> ()
# 159 "/usr/local/cuda/include/channel_descriptor.h"
{
# 160 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 162 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 163 "/usr/local/cuda/include/channel_descriptor.h"
}
# 165 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> ()
# 166 "/usr/local/cuda/include/channel_descriptor.h"
{
# 167 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 169 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 170 "/usr/local/cuda/include/channel_descriptor.h"
}
# 172 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> ()
# 173 "/usr/local/cuda/include/channel_descriptor.h"
{
# 174 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 176 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 177 "/usr/local/cuda/include/channel_descriptor.h"
}
# 179 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> ()
# 180 "/usr/local/cuda/include/channel_descriptor.h"
{
# 181 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 183 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 184 "/usr/local/cuda/include/channel_descriptor.h"
}
# 186 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> ()
# 187 "/usr/local/cuda/include/channel_descriptor.h"
{
# 188 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 190 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 191 "/usr/local/cuda/include/channel_descriptor.h"
}
# 193 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> ()
# 194 "/usr/local/cuda/include/channel_descriptor.h"
{
# 195 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 197 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 198 "/usr/local/cuda/include/channel_descriptor.h"
}
# 200 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> ()
# 201 "/usr/local/cuda/include/channel_descriptor.h"
{
# 202 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 204 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 205 "/usr/local/cuda/include/channel_descriptor.h"
}
# 207 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> ()
# 208 "/usr/local/cuda/include/channel_descriptor.h"
{
# 209 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 211 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 212 "/usr/local/cuda/include/channel_descriptor.h"
}
# 214 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> ()
# 215 "/usr/local/cuda/include/channel_descriptor.h"
{
# 216 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 218 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 219 "/usr/local/cuda/include/channel_descriptor.h"
}
# 221 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> ()
# 222 "/usr/local/cuda/include/channel_descriptor.h"
{
# 223 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 225 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 226 "/usr/local/cuda/include/channel_descriptor.h"
}
# 228 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> ()
# 229 "/usr/local/cuda/include/channel_descriptor.h"
{
# 230 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 232 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 233 "/usr/local/cuda/include/channel_descriptor.h"
}
# 235 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> ()
# 236 "/usr/local/cuda/include/channel_descriptor.h"
{
# 237 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 239 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 240 "/usr/local/cuda/include/channel_descriptor.h"
}
# 242 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> ()
# 243 "/usr/local/cuda/include/channel_descriptor.h"
{
# 244 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 246 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 247 "/usr/local/cuda/include/channel_descriptor.h"
}
# 249 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> ()
# 250 "/usr/local/cuda/include/channel_descriptor.h"
{
# 251 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 253 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 254 "/usr/local/cuda/include/channel_descriptor.h"
}
# 256 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> ()
# 257 "/usr/local/cuda/include/channel_descriptor.h"
{
# 258 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 260 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 261 "/usr/local/cuda/include/channel_descriptor.h"
}
# 263 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> ()
# 264 "/usr/local/cuda/include/channel_descriptor.h"
{
# 265 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 267 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 268 "/usr/local/cuda/include/channel_descriptor.h"
}
# 270 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> ()
# 271 "/usr/local/cuda/include/channel_descriptor.h"
{
# 272 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 274 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 275 "/usr/local/cuda/include/channel_descriptor.h"
}
# 277 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> ()
# 278 "/usr/local/cuda/include/channel_descriptor.h"
{
# 279 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 281 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 282 "/usr/local/cuda/include/channel_descriptor.h"
}
# 284 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> ()
# 285 "/usr/local/cuda/include/channel_descriptor.h"
{
# 286 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 288 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 289 "/usr/local/cuda/include/channel_descriptor.h"
}
# 291 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> ()
# 292 "/usr/local/cuda/include/channel_descriptor.h"
{
# 293 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 295 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 296 "/usr/local/cuda/include/channel_descriptor.h"
}
# 298 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> ()
# 299 "/usr/local/cuda/include/channel_descriptor.h"
{
# 300 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 302 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 303 "/usr/local/cuda/include/channel_descriptor.h"
}
# 305 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> ()
# 306 "/usr/local/cuda/include/channel_descriptor.h"
{
# 307 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 309 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 310 "/usr/local/cuda/include/channel_descriptor.h"
}
# 312 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> ()
# 313 "/usr/local/cuda/include/channel_descriptor.h"
{
# 314 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 316 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 317 "/usr/local/cuda/include/channel_descriptor.h"
}
# 379 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> ()
# 380 "/usr/local/cuda/include/channel_descriptor.h"
{
# 381 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 383 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 384 "/usr/local/cuda/include/channel_descriptor.h"
}
# 386 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> ()
# 387 "/usr/local/cuda/include/channel_descriptor.h"
{
# 388 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 390 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 391 "/usr/local/cuda/include/channel_descriptor.h"
}
# 393 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> ()
# 394 "/usr/local/cuda/include/channel_descriptor.h"
{
# 395 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 397 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 398 "/usr/local/cuda/include/channel_descriptor.h"
}
# 400 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> ()
# 401 "/usr/local/cuda/include/channel_descriptor.h"
{
# 402 "/usr/local/cuda/include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 404 "/usr/local/cuda/include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 405 "/usr/local/cuda/include/channel_descriptor.h"
}
# 79 "/usr/local/cuda/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
# 80 "/usr/local/cuda/include/driver_functions.h"
{
# 81 "/usr/local/cuda/include/driver_functions.h"
cudaPitchedPtr s;
# 83 "/usr/local/cuda/include/driver_functions.h"
(s.ptr) = d;
# 84 "/usr/local/cuda/include/driver_functions.h"
(s.pitch) = p;
# 85 "/usr/local/cuda/include/driver_functions.h"
(s.xsize) = xsz;
# 86 "/usr/local/cuda/include/driver_functions.h"
(s.ysize) = ysz;
# 88 "/usr/local/cuda/include/driver_functions.h"
return s;
# 89 "/usr/local/cuda/include/driver_functions.h"
}
# 106 "/usr/local/cuda/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z)
# 107 "/usr/local/cuda/include/driver_functions.h"
{
# 108 "/usr/local/cuda/include/driver_functions.h"
cudaPos p;
# 110 "/usr/local/cuda/include/driver_functions.h"
(p.x) = x;
# 111 "/usr/local/cuda/include/driver_functions.h"
(p.y) = y;
# 112 "/usr/local/cuda/include/driver_functions.h"
(p.z) = z;
# 114 "/usr/local/cuda/include/driver_functions.h"
return p;
# 115 "/usr/local/cuda/include/driver_functions.h"
}
# 132 "/usr/local/cuda/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
# 133 "/usr/local/cuda/include/driver_functions.h"
{
# 134 "/usr/local/cuda/include/driver_functions.h"
cudaExtent e;
# 136 "/usr/local/cuda/include/driver_functions.h"
(e.width) = w;
# 137 "/usr/local/cuda/include/driver_functions.h"
(e.height) = h;
# 138 "/usr/local/cuda/include/driver_functions.h"
(e.depth) = d;
# 140 "/usr/local/cuda/include/driver_functions.h"
return e;
# 141 "/usr/local/cuda/include/driver_functions.h"
}
# 75 "/usr/local/cuda/include/vector_functions.hpp"
static inline char1 make_char1(signed char x)
# 76 "/usr/local/cuda/include/vector_functions.hpp"
{
# 77 "/usr/local/cuda/include/vector_functions.hpp"
char1 t; (t.x) = x; return t;
# 78 "/usr/local/cuda/include/vector_functions.hpp"
}
# 80 "/usr/local/cuda/include/vector_functions.hpp"
static inline uchar1 make_uchar1(unsigned char x)
# 81 "/usr/local/cuda/include/vector_functions.hpp"
{
# 82 "/usr/local/cuda/include/vector_functions.hpp"
uchar1 t; (t.x) = x; return t;
# 83 "/usr/local/cuda/include/vector_functions.hpp"
}
# 85 "/usr/local/cuda/include/vector_functions.hpp"
static inline char2 make_char2(signed char x, signed char y)
# 86 "/usr/local/cuda/include/vector_functions.hpp"
{
# 87 "/usr/local/cuda/include/vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t;
# 88 "/usr/local/cuda/include/vector_functions.hpp"
}
# 90 "/usr/local/cuda/include/vector_functions.hpp"
static inline uchar2 make_uchar2(unsigned char x, unsigned char y)
# 91 "/usr/local/cuda/include/vector_functions.hpp"
{
# 92 "/usr/local/cuda/include/vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t;
# 93 "/usr/local/cuda/include/vector_functions.hpp"
}
# 95 "/usr/local/cuda/include/vector_functions.hpp"
static inline char3 make_char3(signed char x, signed char y, signed char z)
# 96 "/usr/local/cuda/include/vector_functions.hpp"
{
# 97 "/usr/local/cuda/include/vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 98 "/usr/local/cuda/include/vector_functions.hpp"
}
# 100 "/usr/local/cuda/include/vector_functions.hpp"
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
# 101 "/usr/local/cuda/include/vector_functions.hpp"
{
# 102 "/usr/local/cuda/include/vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 103 "/usr/local/cuda/include/vector_functions.hpp"
}
# 105 "/usr/local/cuda/include/vector_functions.hpp"
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w)
# 106 "/usr/local/cuda/include/vector_functions.hpp"
{
# 107 "/usr/local/cuda/include/vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 108 "/usr/local/cuda/include/vector_functions.hpp"
}
# 110 "/usr/local/cuda/include/vector_functions.hpp"
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
# 111 "/usr/local/cuda/include/vector_functions.hpp"
{
# 112 "/usr/local/cuda/include/vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 113 "/usr/local/cuda/include/vector_functions.hpp"
}
# 115 "/usr/local/cuda/include/vector_functions.hpp"
static inline short1 make_short1(short x)
# 116 "/usr/local/cuda/include/vector_functions.hpp"
{
# 117 "/usr/local/cuda/include/vector_functions.hpp"
short1 t; (t.x) = x; return t;
# 118 "/usr/local/cuda/include/vector_functions.hpp"
}
# 120 "/usr/local/cuda/include/vector_functions.hpp"
static inline ushort1 make_ushort1(unsigned short x)
# 121 "/usr/local/cuda/include/vector_functions.hpp"
{
# 122 "/usr/local/cuda/include/vector_functions.hpp"
ushort1 t; (t.x) = x; return t;
# 123 "/usr/local/cuda/include/vector_functions.hpp"
}
# 125 "/usr/local/cuda/include/vector_functions.hpp"
static inline short2 make_short2(short x, short y)
# 126 "/usr/local/cuda/include/vector_functions.hpp"
{
# 127 "/usr/local/cuda/include/vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t;
# 128 "/usr/local/cuda/include/vector_functions.hpp"
}
# 130 "/usr/local/cuda/include/vector_functions.hpp"
static inline ushort2 make_ushort2(unsigned short x, unsigned short y)
# 131 "/usr/local/cuda/include/vector_functions.hpp"
{
# 132 "/usr/local/cuda/include/vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t;
# 133 "/usr/local/cuda/include/vector_functions.hpp"
}
# 135 "/usr/local/cuda/include/vector_functions.hpp"
static inline short3 make_short3(short x, short y, short z)
# 136 "/usr/local/cuda/include/vector_functions.hpp"
{
# 137 "/usr/local/cuda/include/vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 138 "/usr/local/cuda/include/vector_functions.hpp"
}
# 140 "/usr/local/cuda/include/vector_functions.hpp"
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
# 141 "/usr/local/cuda/include/vector_functions.hpp"
{
# 142 "/usr/local/cuda/include/vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 143 "/usr/local/cuda/include/vector_functions.hpp"
}
# 145 "/usr/local/cuda/include/vector_functions.hpp"
static inline short4 make_short4(short x, short y, short z, short w)
# 146 "/usr/local/cuda/include/vector_functions.hpp"
{
# 147 "/usr/local/cuda/include/vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 148 "/usr/local/cuda/include/vector_functions.hpp"
}
# 150 "/usr/local/cuda/include/vector_functions.hpp"
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
# 151 "/usr/local/cuda/include/vector_functions.hpp"
{
# 152 "/usr/local/cuda/include/vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 153 "/usr/local/cuda/include/vector_functions.hpp"
}
# 155 "/usr/local/cuda/include/vector_functions.hpp"
static inline int1 make_int1(int x)
# 156 "/usr/local/cuda/include/vector_functions.hpp"
{
# 157 "/usr/local/cuda/include/vector_functions.hpp"
int1 t; (t.x) = x; return t;
# 158 "/usr/local/cuda/include/vector_functions.hpp"
}
# 160 "/usr/local/cuda/include/vector_functions.hpp"
static inline uint1 make_uint1(unsigned x)
# 161 "/usr/local/cuda/include/vector_functions.hpp"
{
# 162 "/usr/local/cuda/include/vector_functions.hpp"
uint1 t; (t.x) = x; return t;
# 163 "/usr/local/cuda/include/vector_functions.hpp"
}
# 165 "/usr/local/cuda/include/vector_functions.hpp"
static inline int2 make_int2(int x, int y)
# 166 "/usr/local/cuda/include/vector_functions.hpp"
{
# 167 "/usr/local/cuda/include/vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t;
# 168 "/usr/local/cuda/include/vector_functions.hpp"
}
# 170 "/usr/local/cuda/include/vector_functions.hpp"
static inline uint2 make_uint2(unsigned x, unsigned y)
# 171 "/usr/local/cuda/include/vector_functions.hpp"
{
# 172 "/usr/local/cuda/include/vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t;
# 173 "/usr/local/cuda/include/vector_functions.hpp"
}
# 175 "/usr/local/cuda/include/vector_functions.hpp"
static inline int3 make_int3(int x, int y, int z)
# 176 "/usr/local/cuda/include/vector_functions.hpp"
{
# 177 "/usr/local/cuda/include/vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 178 "/usr/local/cuda/include/vector_functions.hpp"
}
# 180 "/usr/local/cuda/include/vector_functions.hpp"
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z)
# 181 "/usr/local/cuda/include/vector_functions.hpp"
{
# 182 "/usr/local/cuda/include/vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 183 "/usr/local/cuda/include/vector_functions.hpp"
}
# 185 "/usr/local/cuda/include/vector_functions.hpp"
static inline int4 make_int4(int x, int y, int z, int w)
# 186 "/usr/local/cuda/include/vector_functions.hpp"
{
# 187 "/usr/local/cuda/include/vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 188 "/usr/local/cuda/include/vector_functions.hpp"
}
# 190 "/usr/local/cuda/include/vector_functions.hpp"
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w)
# 191 "/usr/local/cuda/include/vector_functions.hpp"
{
# 192 "/usr/local/cuda/include/vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 193 "/usr/local/cuda/include/vector_functions.hpp"
}
# 195 "/usr/local/cuda/include/vector_functions.hpp"
static inline long1 make_long1(long x)
# 196 "/usr/local/cuda/include/vector_functions.hpp"
{
# 197 "/usr/local/cuda/include/vector_functions.hpp"
long1 t; (t.x) = x; return t;
# 198 "/usr/local/cuda/include/vector_functions.hpp"
}
# 200 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulong1 make_ulong1(unsigned long x)
# 201 "/usr/local/cuda/include/vector_functions.hpp"
{
# 202 "/usr/local/cuda/include/vector_functions.hpp"
ulong1 t; (t.x) = x; return t;
# 203 "/usr/local/cuda/include/vector_functions.hpp"
}
# 205 "/usr/local/cuda/include/vector_functions.hpp"
static inline long2 make_long2(long x, long y)
# 206 "/usr/local/cuda/include/vector_functions.hpp"
{
# 207 "/usr/local/cuda/include/vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t;
# 208 "/usr/local/cuda/include/vector_functions.hpp"
}
# 210 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulong2 make_ulong2(unsigned long x, unsigned long y)
# 211 "/usr/local/cuda/include/vector_functions.hpp"
{
# 212 "/usr/local/cuda/include/vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t;
# 213 "/usr/local/cuda/include/vector_functions.hpp"
}
# 215 "/usr/local/cuda/include/vector_functions.hpp"
static inline long3 make_long3(long x, long y, long z)
# 216 "/usr/local/cuda/include/vector_functions.hpp"
{
# 217 "/usr/local/cuda/include/vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 218 "/usr/local/cuda/include/vector_functions.hpp"
}
# 220 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z)
# 221 "/usr/local/cuda/include/vector_functions.hpp"
{
# 222 "/usr/local/cuda/include/vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 223 "/usr/local/cuda/include/vector_functions.hpp"
}
# 225 "/usr/local/cuda/include/vector_functions.hpp"
static inline long4 make_long4(long x, long y, long z, long w)
# 226 "/usr/local/cuda/include/vector_functions.hpp"
{
# 227 "/usr/local/cuda/include/vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 228 "/usr/local/cuda/include/vector_functions.hpp"
}
# 230 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w)
# 231 "/usr/local/cuda/include/vector_functions.hpp"
{
# 232 "/usr/local/cuda/include/vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 233 "/usr/local/cuda/include/vector_functions.hpp"
}
# 235 "/usr/local/cuda/include/vector_functions.hpp"
static inline float1 make_float1(float x)
# 236 "/usr/local/cuda/include/vector_functions.hpp"
{
# 237 "/usr/local/cuda/include/vector_functions.hpp"
float1 t; (t.x) = x; return t;
# 238 "/usr/local/cuda/include/vector_functions.hpp"
}
# 240 "/usr/local/cuda/include/vector_functions.hpp"
static inline float2 make_float2(float x, float y)
# 241 "/usr/local/cuda/include/vector_functions.hpp"
{
# 242 "/usr/local/cuda/include/vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t;
# 243 "/usr/local/cuda/include/vector_functions.hpp"
}
# 245 "/usr/local/cuda/include/vector_functions.hpp"
static inline float3 make_float3(float x, float y, float z)
# 246 "/usr/local/cuda/include/vector_functions.hpp"
{
# 247 "/usr/local/cuda/include/vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 248 "/usr/local/cuda/include/vector_functions.hpp"
}
# 250 "/usr/local/cuda/include/vector_functions.hpp"
static inline float4 make_float4(float x, float y, float z, float w)
# 251 "/usr/local/cuda/include/vector_functions.hpp"
{
# 252 "/usr/local/cuda/include/vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 253 "/usr/local/cuda/include/vector_functions.hpp"
}
# 255 "/usr/local/cuda/include/vector_functions.hpp"
static inline longlong1 make_longlong1(long long x)
# 256 "/usr/local/cuda/include/vector_functions.hpp"
{
# 257 "/usr/local/cuda/include/vector_functions.hpp"
longlong1 t; (t.x) = x; return t;
# 258 "/usr/local/cuda/include/vector_functions.hpp"
}
# 260 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulonglong1 make_ulonglong1(unsigned long long x)
# 261 "/usr/local/cuda/include/vector_functions.hpp"
{
# 262 "/usr/local/cuda/include/vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t;
# 263 "/usr/local/cuda/include/vector_functions.hpp"
}
# 265 "/usr/local/cuda/include/vector_functions.hpp"
static inline longlong2 make_longlong2(long long x, long long y)
# 266 "/usr/local/cuda/include/vector_functions.hpp"
{
# 267 "/usr/local/cuda/include/vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t;
# 268 "/usr/local/cuda/include/vector_functions.hpp"
}
# 270 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y)
# 271 "/usr/local/cuda/include/vector_functions.hpp"
{
# 272 "/usr/local/cuda/include/vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t;
# 273 "/usr/local/cuda/include/vector_functions.hpp"
}
# 275 "/usr/local/cuda/include/vector_functions.hpp"
static inline longlong3 make_longlong3(long long x, long long y, long long z)
# 276 "/usr/local/cuda/include/vector_functions.hpp"
{
# 277 "/usr/local/cuda/include/vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 278 "/usr/local/cuda/include/vector_functions.hpp"
}
# 280 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z)
# 281 "/usr/local/cuda/include/vector_functions.hpp"
{
# 282 "/usr/local/cuda/include/vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 283 "/usr/local/cuda/include/vector_functions.hpp"
}
# 285 "/usr/local/cuda/include/vector_functions.hpp"
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w)
# 286 "/usr/local/cuda/include/vector_functions.hpp"
{
# 287 "/usr/local/cuda/include/vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 288 "/usr/local/cuda/include/vector_functions.hpp"
}
# 290 "/usr/local/cuda/include/vector_functions.hpp"
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w)
# 291 "/usr/local/cuda/include/vector_functions.hpp"
{
# 292 "/usr/local/cuda/include/vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 293 "/usr/local/cuda/include/vector_functions.hpp"
}
# 295 "/usr/local/cuda/include/vector_functions.hpp"
static inline double1 make_double1(double x)
# 296 "/usr/local/cuda/include/vector_functions.hpp"
{
# 297 "/usr/local/cuda/include/vector_functions.hpp"
double1 t; (t.x) = x; return t;
# 298 "/usr/local/cuda/include/vector_functions.hpp"
}
# 300 "/usr/local/cuda/include/vector_functions.hpp"
static inline double2 make_double2(double x, double y)
# 301 "/usr/local/cuda/include/vector_functions.hpp"
{
# 302 "/usr/local/cuda/include/vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t;
# 303 "/usr/local/cuda/include/vector_functions.hpp"
}
# 305 "/usr/local/cuda/include/vector_functions.hpp"
static inline double3 make_double3(double x, double y, double z)
# 306 "/usr/local/cuda/include/vector_functions.hpp"
{
# 307 "/usr/local/cuda/include/vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 308 "/usr/local/cuda/include/vector_functions.hpp"
}
# 310 "/usr/local/cuda/include/vector_functions.hpp"
static inline double4 make_double4(double x, double y, double z, double w)
# 311 "/usr/local/cuda/include/vector_functions.hpp"
{
# 312 "/usr/local/cuda/include/vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 313 "/usr/local/cuda/include/vector_functions.hpp"
}
# 27 "/usr/include/string.h" 3

# 27 "/usr/include/string.h" 3
extern "C" {
# 42 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 43 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 46 "/usr/include/string.h" 3
extern void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 47 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 54 "/usr/include/string.h" 3
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 56 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 62 "/usr/include/string.h" 3
extern void *memset(void * __s, int __c, size_t __n) throw() __attribute((__nonnull__(1)));
# 65 "/usr/include/string.h" 3
extern int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 66 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 70 "/usr/include/string.h" 3
extern "C++" {
# 72 "/usr/include/string.h" 3
extern void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 73 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 74 "/usr/include/string.h" 3
extern const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 75 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 90 "/usr/include/string.h" 3
}
# 101 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 102 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 103 "/usr/include/string.h" 3
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 104 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 112 "/usr/include/string.h" 3
extern "C++" void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 113 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 114 "/usr/include/string.h" 3
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 115 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 125 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 126 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 128 "/usr/include/string.h" 3
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 130 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 133 "/usr/include/string.h" 3
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 134 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 136 "/usr/include/string.h" 3
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 137 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 140 "/usr/include/string.h" 3
extern int strcmp(const char * __s1, const char * __s2) throw()
# 141 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 143 "/usr/include/string.h" 3
extern int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 144 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 147 "/usr/include/string.h" 3
extern int strcoll(const char * __s1, const char * __s2) throw()
# 148 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 150 "/usr/include/string.h" 3
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 152 "/usr/include/string.h" 3
 __attribute((__nonnull__(2)));
# 39 "/usr/include/xlocale.h" 3
typedef
# 27 "/usr/include/xlocale.h" 3
struct __locale_struct {
# 30 "/usr/include/xlocale.h" 3
struct __locale_data *__locales[13];
# 33 "/usr/include/xlocale.h" 3
const unsigned short *__ctype_b;
# 34 "/usr/include/xlocale.h" 3
const int *__ctype_tolower;
# 35 "/usr/include/xlocale.h" 3
const int *__ctype_toupper;
# 38 "/usr/include/xlocale.h" 3
const char *__names[13];
# 39 "/usr/include/xlocale.h" 3
} *__locale_t;
# 42 "/usr/include/xlocale.h" 3
typedef __locale_t locale_t;
# 162 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, __locale_t __l) throw()
# 163 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3)));
# 165 "/usr/include/string.h" 3
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, __locale_t __l) throw()
# 166 "/usr/include/string.h" 3
 __attribute((__nonnull__(2, 4)));
# 171 "/usr/include/string.h" 3
extern char *strdup(const char * __s) throw()
# 172 "/usr/include/string.h" 3
 __attribute((__malloc__)) __attribute((__nonnull__(1)));
# 179 "/usr/include/string.h" 3
extern char *strndup(const char * __string, size_t __n) throw()
# 180 "/usr/include/string.h" 3
 __attribute((__malloc__)) __attribute((__nonnull__(1)));
# 209 "/usr/include/string.h" 3
extern "C++" {
# 211 "/usr/include/string.h" 3
extern char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 212 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 213 "/usr/include/string.h" 3
extern const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 214 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 229 "/usr/include/string.h" 3
}
# 236 "/usr/include/string.h" 3
extern "C++" {
# 238 "/usr/include/string.h" 3
extern char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 239 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 240 "/usr/include/string.h" 3
extern const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 241 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 256 "/usr/include/string.h" 3
}
# 267 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 268 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 269 "/usr/include/string.h" 3
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 270 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 280 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) throw()
# 281 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 284 "/usr/include/string.h" 3
extern size_t strspn(const char * __s, const char * __accept) throw()
# 285 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 288 "/usr/include/string.h" 3
extern "C++" {
# 290 "/usr/include/string.h" 3
extern char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 291 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 292 "/usr/include/string.h" 3
extern const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 293 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 308 "/usr/include/string.h" 3
}
# 315 "/usr/include/string.h" 3
extern "C++" {
# 317 "/usr/include/string.h" 3
extern char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 318 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 319 "/usr/include/string.h" 3
extern const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 320 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 335 "/usr/include/string.h" 3
}
# 343 "/usr/include/string.h" 3
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 344 "/usr/include/string.h" 3
 __attribute((__nonnull__(2)));
# 349 "/usr/include/string.h" 3
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 352 "/usr/include/string.h" 3
 __attribute((__nonnull__(2, 3)));
# 354 "/usr/include/string.h" 3
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 356 "/usr/include/string.h" 3
 __attribute((__nonnull__(2, 3)));
# 362 "/usr/include/string.h" 3
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 363 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 364 "/usr/include/string.h" 3
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 366 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 377 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 379 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 3)));
# 383 "/usr/include/string.h" 3
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 385 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 386 "/usr/include/string.h" 3
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 388 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 394 "/usr/include/string.h" 3
extern size_t strlen(const char * __s) throw()
# 395 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 401 "/usr/include/string.h" 3
extern size_t strnlen(const char * __string, size_t __maxlen) throw()
# 402 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 408 "/usr/include/string.h" 3
extern char *strerror(int __errnum) throw();
# 433 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 434 "/usr/include/string.h" 3
 __attribute((__nonnull__(2)));
# 440 "/usr/include/string.h" 3
extern char *strerror_l(int __errnum, __locale_t __l) throw();
# 446 "/usr/include/string.h" 3
extern void __bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1)));
# 450 "/usr/include/string.h" 3
extern void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 451 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 454 "/usr/include/string.h" 3
extern void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1)));
# 457 "/usr/include/string.h" 3
extern int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 458 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 462 "/usr/include/string.h" 3
extern "C++" {
# 464 "/usr/include/string.h" 3
extern char *index(char * __s, int __c) throw() __asm__("index")
# 465 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 466 "/usr/include/string.h" 3
extern const char *index(const char * __s, int __c) throw() __asm__("index")
# 467 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 482 "/usr/include/string.h" 3
}
# 490 "/usr/include/string.h" 3
extern "C++" {
# 492 "/usr/include/string.h" 3
extern char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 493 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 494 "/usr/include/string.h" 3
extern const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 495 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 510 "/usr/include/string.h" 3
}
# 518 "/usr/include/string.h" 3
extern int ffs(int __i) throw() __attribute((const));
# 523 "/usr/include/string.h" 3
extern int ffsl(long __l) throw() __attribute((const));
# 524 "/usr/include/string.h" 3
__extension__ extern int ffsll(long long __ll) throw()
# 525 "/usr/include/string.h" 3
 __attribute((const));
# 529 "/usr/include/string.h" 3
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 530 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 533 "/usr/include/string.h" 3
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 534 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 540 "/usr/include/string.h" 3
extern int strcasecmp_l(const char * __s1, const char * __s2, __locale_t __loc) throw()
# 542 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3)));
# 544 "/usr/include/string.h" 3
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, __locale_t __loc) throw()
# 546 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4)));
# 552 "/usr/include/string.h" 3
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 554 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 559 "/usr/include/string.h" 3
extern char *strsignal(int __sig) throw();
# 562 "/usr/include/string.h" 3
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 563 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 564 "/usr/include/string.h" 3
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 565 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 569 "/usr/include/string.h" 3
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 571 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 572 "/usr/include/string.h" 3
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 574 "/usr/include/string.h" 3
 __attribute((__nonnull__(1, 2)));
# 579 "/usr/include/string.h" 3
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 580 "/usr/include/string.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1, 2)));
# 583 "/usr/include/string.h" 3
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1)));
# 586 "/usr/include/string.h" 3
extern void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1)));
# 594 "/usr/include/string.h" 3
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 595 "/usr/include/string.h" 3
 __attribute((__nonnull__(1)));
# 596 "/usr/include/string.h" 3
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 597 "/usr/include/string.h" 3
 __attribute((__nonnull__(1)));
# 658 "/usr/include/string.h" 3
}
# 29 "/usr/include/time.h" 3
extern "C" {
# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char;
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned short __u_short;
# 32 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __u_int;
# 33 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __u_long;
# 36 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef signed char __int8_t;
# 37 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __uint8_t;
# 38 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef signed short __int16_t;
# 39 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned short __uint16_t;
# 40 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef signed int __int32_t;
# 41 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __uint32_t;
# 43 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef signed long __int64_t;
# 44 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __uint64_t;
# 52 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __quad_t;
# 53 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __u_quad_t;
# 124 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t;
# 125 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __uid_t;
# 126 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __gid_t;
# 127 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __ino_t;
# 128 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __ino64_t;
# 129 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __mode_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __nlink_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __off_t;
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __off64_t;
# 133 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef int __pid_t;
# 134 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef struct { int __val[2]; } __fsid_t;
# 135 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __clock_t;
# 136 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __rlim_t;
# 137 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __rlim64_t;
# 138 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __id_t;
# 139 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __time_t;
# 140 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __useconds_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __suseconds_t;
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef int __daddr_t;
# 144 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef int __key_t;
# 147 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef int __clockid_t;
# 150 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef void *__timer_t;
# 153 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __blksize_t;
# 158 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __blkcnt_t;
# 159 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __blkcnt64_t;
# 162 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __fsblkcnt_t;
# 163 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __fsblkcnt64_t;
# 166 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __fsfilcnt_t;
# 167 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __fsfilcnt64_t;
# 170 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __fsword_t;
# 172 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __ssize_t;
# 175 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __syscall_slong_t;
# 177 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __syscall_ulong_t;
# 181 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef __off64_t __loff_t;
# 182 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef __quad_t *__qaddr_t;
# 183 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef char *__caddr_t;
# 186 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef long __intptr_t;
# 189 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned __socklen_t;
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
struct timeval {
# 32 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
__time_t tv_sec;
# 33 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
__suseconds_t tv_usec;
# 34 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
};
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex {
# 27 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
unsigned modes;
# 28 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t offset;
# 29 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t freq;
# 30 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t maxerror;
# 31 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t esterror;
# 32 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int status;
# 33 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t constant;
# 34 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t precision;
# 35 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t tolerance;
# 36 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
timeval time;
# 37 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t tick;
# 38 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t ppsfreq;
# 39 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t jitter;
# 40 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int shift;
# 41 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t stabil;
# 42 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t jitcnt;
# 43 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t calcnt;
# 44 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t errcnt;
# 45 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
__syscall_slong_t stbcnt;
# 47 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int tai;
# 50 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int:32; int:32; int:32; int:32;
# 51 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int:32; int:32; int:32; int:32;
# 52 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
int:32; int:32; int:32;
# 53 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
};
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 93 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw();
# 95 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
}
# 59 "/usr/include/time.h" 3
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3
struct timespec {
# 122 "/usr/include/time.h" 3
__time_t tv_sec;
# 123 "/usr/include/time.h" 3
__syscall_slong_t tv_nsec;
# 124 "/usr/include/time.h" 3
};
# 133 "/usr/include/time.h" 3
struct tm {
# 135 "/usr/include/time.h" 3
int tm_sec;
# 136 "/usr/include/time.h" 3
int tm_min;
# 137 "/usr/include/time.h" 3
int tm_hour;
# 138 "/usr/include/time.h" 3
int tm_mday;
# 139 "/usr/include/time.h" 3
int tm_mon;
# 140 "/usr/include/time.h" 3
int tm_year;
# 141 "/usr/include/time.h" 3
int tm_wday;
# 142 "/usr/include/time.h" 3
int tm_yday;
# 143 "/usr/include/time.h" 3
int tm_isdst;
# 146 "/usr/include/time.h" 3
long tm_gmtoff;
# 147 "/usr/include/time.h" 3
const char *tm_zone;
# 152 "/usr/include/time.h" 3
};
# 161 "/usr/include/time.h" 3
struct itimerspec {
# 163 "/usr/include/time.h" 3
timespec it_interval;
# 164 "/usr/include/time.h" 3
timespec it_value;
# 165 "/usr/include/time.h" 3
};
# 168 "/usr/include/time.h" 3
struct sigevent;
# 174 "/usr/include/time.h" 3
typedef __pid_t pid_t;
# 189 "/usr/include/time.h" 3
extern clock_t clock() throw();
# 192 "/usr/include/time.h" 3
extern time_t time(time_t * __timer) throw();
# 195 "/usr/include/time.h" 3
extern double difftime(time_t __time1, time_t __time0) throw()
# 196 "/usr/include/time.h" 3
 __attribute((const));
# 199 "/usr/include/time.h" 3
extern time_t mktime(tm * __tp) throw();
# 205 "/usr/include/time.h" 3
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw();
# 213 "/usr/include/time.h" 3
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw();
# 223 "/usr/include/time.h" 3
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw();
# 230 "/usr/include/time.h" 3
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, __locale_t __loc) throw();
# 239 "/usr/include/time.h" 3
extern tm *gmtime(const time_t * __timer) throw();
# 243 "/usr/include/time.h" 3
extern tm *localtime(const time_t * __timer) throw();
# 249 "/usr/include/time.h" 3
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw();
# 254 "/usr/include/time.h" 3
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw();
# 261 "/usr/include/time.h" 3
extern char *asctime(const tm * __tp) throw();
# 264 "/usr/include/time.h" 3
extern char *ctime(const time_t * __timer) throw();
# 272 "/usr/include/time.h" 3
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw();
# 276 "/usr/include/time.h" 3
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw();
# 282 "/usr/include/time.h" 3
extern char *__tzname[2];
# 283 "/usr/include/time.h" 3
extern int __daylight;
# 284 "/usr/include/time.h" 3
extern long __timezone;
# 289 "/usr/include/time.h" 3
extern char *tzname[2];
# 293 "/usr/include/time.h" 3
extern void tzset() throw();
# 297 "/usr/include/time.h" 3
extern int daylight;
# 298 "/usr/include/time.h" 3
extern long timezone;
# 304 "/usr/include/time.h" 3
extern int stime(const time_t * __when) throw();
# 319 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw();
# 322 "/usr/include/time.h" 3
extern time_t timelocal(tm * __tp) throw();
# 325 "/usr/include/time.h" 3
extern int dysize(int __year) throw() __attribute((const));
# 334 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining);
# 339 "/usr/include/time.h" 3
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw();
# 342 "/usr/include/time.h" 3
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw();
# 345 "/usr/include/time.h" 3
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw();
# 353 "/usr/include/time.h" 3
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem);
# 358 "/usr/include/time.h" 3
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw();
# 363 "/usr/include/time.h" 3
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw();
# 368 "/usr/include/time.h" 3
extern int timer_delete(timer_t __timerid) throw();
# 371 "/usr/include/time.h" 3
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw();
# 376 "/usr/include/time.h" 3
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw();
# 380 "/usr/include/time.h" 3
extern int timer_getoverrun(timer_t __timerid) throw();
# 386 "/usr/include/time.h" 3
extern int timespec_get(timespec * __ts, int __base) throw()
# 387 "/usr/include/time.h" 3
 __attribute((__nonnull__(1)));
# 403 "/usr/include/time.h" 3
extern int getdate_err;
# 412 "/usr/include/time.h" 3
extern tm *getdate(const char * __string);
# 426 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp);
# 430 "/usr/include/time.h" 3
}
# 68 "/usr/local/cuda/include/common_functions.h"

# 68 "/usr/local/cuda/include/common_functions.h"
extern "C" {
# 71 "/usr/local/cuda/include/common_functions.h"
extern clock_t clock() throw();
# 72 "/usr/local/cuda/include/common_functions.h"
extern void *memset(void *, int, size_t) throw();
# 73 "/usr/local/cuda/include/common_functions.h"
extern void *memcpy(void *, const void *, size_t) throw();
# 75 "/usr/local/cuda/include/common_functions.h"
}
# 93 "/usr/local/cuda/include/math_functions.h"
extern "C" {
# 164 "/usr/local/cuda/include/math_functions.h"
extern int abs(int) throw();
# 165 "/usr/local/cuda/include/math_functions.h"
extern long labs(long) throw();
# 166 "/usr/local/cuda/include/math_functions.h"
extern long long llabs(long long) throw();
# 216 "/usr/local/cuda/include/math_functions.h"
extern double fabs(double x) throw();
# 257 "/usr/local/cuda/include/math_functions.h"
extern float fabsf(float x) throw();
# 261 "/usr/local/cuda/include/math_functions.h"
extern inline int min(int, int);
# 263 "/usr/local/cuda/include/math_functions.h"
extern inline unsigned umin(unsigned, unsigned);
# 264 "/usr/local/cuda/include/math_functions.h"
extern inline long long llmin(long long, long long);
# 265 "/usr/local/cuda/include/math_functions.h"
extern inline unsigned long long ullmin(unsigned long long, unsigned long long);
# 286 "/usr/local/cuda/include/math_functions.h"
extern float fminf(float x, float y) throw();
# 306 "/usr/local/cuda/include/math_functions.h"
extern double fmin(double x, double y) throw();
# 313 "/usr/local/cuda/include/math_functions.h"
extern inline int max(int, int);
# 315 "/usr/local/cuda/include/math_functions.h"
extern inline unsigned umax(unsigned, unsigned);
# 316 "/usr/local/cuda/include/math_functions.h"
extern inline long long llmax(long long, long long);
# 317 "/usr/local/cuda/include/math_functions.h"
extern inline unsigned long long ullmax(unsigned long long, unsigned long long);
# 338 "/usr/local/cuda/include/math_functions.h"
extern float fmaxf(float x, float y) throw();
# 358 "/usr/local/cuda/include/math_functions.h"
extern double fmax(double, double) throw();
# 402 "/usr/local/cuda/include/math_functions.h"
extern double sin(double x) throw();
# 435 "/usr/local/cuda/include/math_functions.h"
extern double cos(double x) throw();
# 454 "/usr/local/cuda/include/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) throw();
# 470 "/usr/local/cuda/include/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) throw();
# 515 "/usr/local/cuda/include/math_functions.h"
extern double tan(double x) throw();
# 584 "/usr/local/cuda/include/math_functions.h"
extern double sqrt(double x) throw();
# 656 "/usr/local/cuda/include/math_functions.h"
extern double rsqrt(double x);
# 726 "/usr/local/cuda/include/math_functions.h"
extern float rsqrtf(float x);
# 782 "/usr/local/cuda/include/math_functions.h"
extern double log2(double x) throw();
# 807 "/usr/local/cuda/include/math_functions.h"
extern double exp2(double x) throw();
# 832 "/usr/local/cuda/include/math_functions.h"
extern float exp2f(float x) throw();
# 859 "/usr/local/cuda/include/math_functions.h"
extern double exp10(double x) throw();
# 882 "/usr/local/cuda/include/math_functions.h"
extern float exp10f(float x) throw();
# 928 "/usr/local/cuda/include/math_functions.h"
extern double expm1(double x) throw();
# 973 "/usr/local/cuda/include/math_functions.h"
extern float expm1f(float x) throw();
# 1028 "/usr/local/cuda/include/math_functions.h"
extern float log2f(float x) throw();
# 1082 "/usr/local/cuda/include/math_functions.h"
extern double log10(double x) throw();
# 1153 "/usr/local/cuda/include/math_functions.h"
extern double log(double x) throw();
# 1247 "/usr/local/cuda/include/math_functions.h"
extern double log1p(double x) throw();
# 1344 "/usr/local/cuda/include/math_functions.h"
extern float log1pf(float x) throw();
# 1419 "/usr/local/cuda/include/math_functions.h"
extern double floor(double x) throw();
# 1458 "/usr/local/cuda/include/math_functions.h"
extern double exp(double x) throw();
# 1489 "/usr/local/cuda/include/math_functions.h"
extern double cosh(double x) throw();
# 1519 "/usr/local/cuda/include/math_functions.h"
extern double sinh(double x) throw();
# 1549 "/usr/local/cuda/include/math_functions.h"
extern double tanh(double x) throw();
# 1584 "/usr/local/cuda/include/math_functions.h"
extern double acosh(double x) throw();
# 1622 "/usr/local/cuda/include/math_functions.h"
extern float acoshf(float x) throw();
# 1638 "/usr/local/cuda/include/math_functions.h"
extern double asinh(double x) throw();
# 1654 "/usr/local/cuda/include/math_functions.h"
extern float asinhf(float x) throw();
# 1708 "/usr/local/cuda/include/math_functions.h"
extern double atanh(double x) throw();
# 1762 "/usr/local/cuda/include/math_functions.h"
extern float atanhf(float x) throw();
# 1821 "/usr/local/cuda/include/math_functions.h"
extern double ldexp(double x, int exp) throw();
# 1877 "/usr/local/cuda/include/math_functions.h"
extern float ldexpf(float x, int exp) throw();
# 1929 "/usr/local/cuda/include/math_functions.h"
extern double logb(double x) throw();
# 1984 "/usr/local/cuda/include/math_functions.h"
extern float logbf(float x) throw();
# 2014 "/usr/local/cuda/include/math_functions.h"
extern int ilogb(double x) throw();
# 2044 "/usr/local/cuda/include/math_functions.h"
extern int ilogbf(float x) throw();
# 2120 "/usr/local/cuda/include/math_functions.h"
extern double scalbn(double x, int n) throw();
# 2196 "/usr/local/cuda/include/math_functions.h"
extern float scalbnf(float x, int n) throw();
# 2272 "/usr/local/cuda/include/math_functions.h"
extern double scalbln(double x, long n) throw();
# 2348 "/usr/local/cuda/include/math_functions.h"
extern float scalblnf(float x, long n) throw();
# 2426 "/usr/local/cuda/include/math_functions.h"
extern double frexp(double x, int * nptr) throw();
# 2501 "/usr/local/cuda/include/math_functions.h"
extern float frexpf(float x, int * nptr) throw();
# 2515 "/usr/local/cuda/include/math_functions.h"
extern double round(double x) throw();
# 2532 "/usr/local/cuda/include/math_functions.h"
extern float roundf(float x) throw();
# 2550 "/usr/local/cuda/include/math_functions.h"
extern long lround(double x) throw();
# 2568 "/usr/local/cuda/include/math_functions.h"
extern long lroundf(float x) throw();
# 2586 "/usr/local/cuda/include/math_functions.h"
extern long long llround(double x) throw();
# 2604 "/usr/local/cuda/include/math_functions.h"
extern long long llroundf(float x) throw();
# 2656 "/usr/local/cuda/include/math_functions.h"
extern float rintf(float x) throw();
# 2672 "/usr/local/cuda/include/math_functions.h"
extern long lrint(double x) throw();
# 2688 "/usr/local/cuda/include/math_functions.h"
extern long lrintf(float x) throw();
# 2704 "/usr/local/cuda/include/math_functions.h"
extern long long llrint(double x) throw();
# 2720 "/usr/local/cuda/include/math_functions.h"
extern long long llrintf(float x) throw();
# 2773 "/usr/local/cuda/include/math_functions.h"
extern double nearbyint(double x) throw();
# 2826 "/usr/local/cuda/include/math_functions.h"
extern float nearbyintf(float x) throw();
# 2888 "/usr/local/cuda/include/math_functions.h"
extern double ceil(double x) throw();
# 2900 "/usr/local/cuda/include/math_functions.h"
extern double trunc(double x) throw();
# 2915 "/usr/local/cuda/include/math_functions.h"
extern float truncf(float x) throw();
# 2941 "/usr/local/cuda/include/math_functions.h"
extern double fdim(double x, double y) throw();
# 2967 "/usr/local/cuda/include/math_functions.h"
extern float fdimf(float x, float y) throw();
# 3003 "/usr/local/cuda/include/math_functions.h"
extern double atan2(double y, double x) throw();
# 3034 "/usr/local/cuda/include/math_functions.h"
extern double atan(double x) throw();
# 3057 "/usr/local/cuda/include/math_functions.h"
extern double acos(double x) throw();
# 3089 "/usr/local/cuda/include/math_functions.h"
extern double asin(double x) throw();
# 3135 "/usr/local/cuda/include/math_functions.h"
extern double hypot(double x, double y) throw();
# 3187 "/usr/local/cuda/include/math_functions.h"
extern double rhypot(double x, double y) throw();
# 3233 "/usr/local/cuda/include/math_functions.h"
extern float hypotf(float x, float y) throw();
# 3285 "/usr/local/cuda/include/math_functions.h"
extern float rhypotf(float x, float y) throw();
# 3332 "/usr/local/cuda/include/math_functions.h"
extern double norm3d(double a, double b, double c) throw();
# 3383 "/usr/local/cuda/include/math_functions.h"
extern double rnorm3d(double a, double b, double c) throw();
# 3432 "/usr/local/cuda/include/math_functions.h"
extern double norm4d(double a, double b, double c, double d) throw();
# 3488 "/usr/local/cuda/include/math_functions.h"
extern double rnorm4d(double a, double b, double c, double d) throw();
# 3533 "/usr/local/cuda/include/math_functions.h"
extern double norm(int dim, const double * t) throw();
# 3584 "/usr/local/cuda/include/math_functions.h"
extern double rnorm(int dim, const double * t) throw();
# 3636 "/usr/local/cuda/include/math_functions.h"
extern float rnormf(int dim, const float * a) throw();
# 3680 "/usr/local/cuda/include/math_functions.h"
extern float normf(int dim, const float * a) throw();
# 3725 "/usr/local/cuda/include/math_functions.h"
extern float norm3df(float a, float b, float c) throw();
# 3776 "/usr/local/cuda/include/math_functions.h"
extern float rnorm3df(float a, float b, float c) throw();
# 3825 "/usr/local/cuda/include/math_functions.h"
extern float norm4df(float a, float b, float c, float d) throw();
# 3881 "/usr/local/cuda/include/math_functions.h"
extern float rnorm4df(float a, float b, float c, float d) throw();
# 3965 "/usr/local/cuda/include/math_functions.h"
extern double cbrt(double x) throw();
# 4051 "/usr/local/cuda/include/math_functions.h"
extern float cbrtf(float x) throw();
# 4106 "/usr/local/cuda/include/math_functions.h"
extern double rcbrt(double x);
# 4156 "/usr/local/cuda/include/math_functions.h"
extern float rcbrtf(float x);
# 4216 "/usr/local/cuda/include/math_functions.h"
extern double sinpi(double x);
# 4276 "/usr/local/cuda/include/math_functions.h"
extern float sinpif(float x);
# 4328 "/usr/local/cuda/include/math_functions.h"
extern double cospi(double x);
# 4380 "/usr/local/cuda/include/math_functions.h"
extern float cospif(float x);
# 4410 "/usr/local/cuda/include/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr);
# 4440 "/usr/local/cuda/include/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr);
# 4752 "/usr/local/cuda/include/math_functions.h"
extern double pow(double x, double y) throw();
# 4808 "/usr/local/cuda/include/math_functions.h"
extern double modf(double x, double * iptr) throw();
# 4867 "/usr/local/cuda/include/math_functions.h"
extern double fmod(double x, double y) throw();
# 4953 "/usr/local/cuda/include/math_functions.h"
extern double remainder(double x, double y) throw();
# 5043 "/usr/local/cuda/include/math_functions.h"
extern float remainderf(float x, float y) throw();
# 5097 "/usr/local/cuda/include/math_functions.h"
extern double remquo(double x, double y, int * quo) throw();
# 5151 "/usr/local/cuda/include/math_functions.h"
extern float remquof(float x, float y, int * quo) throw();
# 5192 "/usr/local/cuda/include/math_functions.h"
extern double j0(double x) throw();
# 5234 "/usr/local/cuda/include/math_functions.h"
extern float j0f(float x) throw();
# 5295 "/usr/local/cuda/include/math_functions.h"
extern double j1(double x) throw();
# 5356 "/usr/local/cuda/include/math_functions.h"
extern float j1f(float x) throw();
# 5399 "/usr/local/cuda/include/math_functions.h"
extern double jn(int n, double x) throw();
# 5442 "/usr/local/cuda/include/math_functions.h"
extern float jnf(int n, float x) throw();
# 5494 "/usr/local/cuda/include/math_functions.h"
extern double y0(double x) throw();
# 5546 "/usr/local/cuda/include/math_functions.h"
extern float y0f(float x) throw();
# 5598 "/usr/local/cuda/include/math_functions.h"
extern double y1(double x) throw();
# 5650 "/usr/local/cuda/include/math_functions.h"
extern float y1f(float x) throw();
# 5703 "/usr/local/cuda/include/math_functions.h"
extern double yn(int n, double x) throw();
# 5756 "/usr/local/cuda/include/math_functions.h"
extern float ynf(int n, float x) throw();
# 5783 "/usr/local/cuda/include/math_functions.h"
extern double cyl_bessel_i0(double x) throw();
# 5809 "/usr/local/cuda/include/math_functions.h"
extern float cyl_bessel_i0f(float x) throw();
# 5836 "/usr/local/cuda/include/math_functions.h"
extern double cyl_bessel_i1(double x) throw();
# 5862 "/usr/local/cuda/include/math_functions.h"
extern float cyl_bessel_i1f(float x) throw();
# 5945 "/usr/local/cuda/include/math_functions.h"
extern double erf(double x) throw();
# 6027 "/usr/local/cuda/include/math_functions.h"
extern float erff(float x) throw();
# 6091 "/usr/local/cuda/include/math_functions.h"
extern double erfinv(double y);
# 6148 "/usr/local/cuda/include/math_functions.h"
extern float erfinvf(float y);
# 6187 "/usr/local/cuda/include/math_functions.h"
extern double erfc(double x) throw();
# 6225 "/usr/local/cuda/include/math_functions.h"
extern float erfcf(float x) throw();
# 6353 "/usr/local/cuda/include/math_functions.h"
extern double lgamma(double x) throw();
# 6416 "/usr/local/cuda/include/math_functions.h"
extern double erfcinv(double y);
# 6472 "/usr/local/cuda/include/math_functions.h"
extern float erfcinvf(float y);
# 6530 "/usr/local/cuda/include/math_functions.h"
extern double normcdfinv(double y);
# 6588 "/usr/local/cuda/include/math_functions.h"
extern float normcdfinvf(float y);
# 6631 "/usr/local/cuda/include/math_functions.h"
extern double normcdf(double y);
# 6674 "/usr/local/cuda/include/math_functions.h"
extern float normcdff(float y);
# 6749 "/usr/local/cuda/include/math_functions.h"
extern double erfcx(double x);
# 6824 "/usr/local/cuda/include/math_functions.h"
extern float erfcxf(float x);
# 6958 "/usr/local/cuda/include/math_functions.h"
extern float lgammaf(float x) throw();
# 7067 "/usr/local/cuda/include/math_functions.h"
extern double tgamma(double x) throw();
# 7176 "/usr/local/cuda/include/math_functions.h"
extern float tgammaf(float x) throw();
# 7189 "/usr/local/cuda/include/math_functions.h"
extern double copysign(double x, double y) throw();
# 7202 "/usr/local/cuda/include/math_functions.h"
extern float copysignf(float x, float y) throw();
# 7239 "/usr/local/cuda/include/math_functions.h"
extern double nextafter(double x, double y) throw();
# 7276 "/usr/local/cuda/include/math_functions.h"
extern float nextafterf(float x, float y) throw();
# 7292 "/usr/local/cuda/include/math_functions.h"
extern double nan(const char * tagp) throw();
# 7308 "/usr/local/cuda/include/math_functions.h"
extern float nanf(const char * tagp) throw();
# 7315 "/usr/local/cuda/include/math_functions.h"
extern int __isinff(float) throw();
# 7316 "/usr/local/cuda/include/math_functions.h"
extern int __isnanf(float) throw();
# 7326 "/usr/local/cuda/include/math_functions.h"
extern int __finite(double) throw();
# 7327 "/usr/local/cuda/include/math_functions.h"
extern int __finitef(float) throw();
# 7328 "/usr/local/cuda/include/math_functions.h"
extern int __signbit(double) throw();
# 7329 "/usr/local/cuda/include/math_functions.h"
extern int __isnan(double) throw();
# 7330 "/usr/local/cuda/include/math_functions.h"
extern int __isinf(double) throw();
# 7333 "/usr/local/cuda/include/math_functions.h"
extern int __signbitf(float) throw();
# 7492 "/usr/local/cuda/include/math_functions.h"
extern double fma(double x, double y, double z) throw();
# 7650 "/usr/local/cuda/include/math_functions.h"
extern float fmaf(float x, float y, float z) throw();
# 7661 "/usr/local/cuda/include/math_functions.h"
extern int __signbitl(long double) throw();
# 7667 "/usr/local/cuda/include/math_functions.h"
extern int __finitel(long double) throw();
# 7668 "/usr/local/cuda/include/math_functions.h"
extern int __isinfl(long double) throw();
# 7669 "/usr/local/cuda/include/math_functions.h"
extern int __isnanl(long double) throw();
# 7719 "/usr/local/cuda/include/math_functions.h"
extern float acosf(float x) throw();
# 7759 "/usr/local/cuda/include/math_functions.h"
extern float asinf(float x) throw();
# 7799 "/usr/local/cuda/include/math_functions.h"
extern float atanf(float x) throw();
# 7832 "/usr/local/cuda/include/math_functions.h"
extern float atan2f(float y, float x) throw();
# 7856 "/usr/local/cuda/include/math_functions.h"
extern float cosf(float x) throw();
# 7898 "/usr/local/cuda/include/math_functions.h"
extern float sinf(float x) throw();
# 7940 "/usr/local/cuda/include/math_functions.h"
extern float tanf(float x) throw();
# 7964 "/usr/local/cuda/include/math_functions.h"
extern float coshf(float x) throw();
# 8005 "/usr/local/cuda/include/math_functions.h"
extern float sinhf(float x) throw();
# 8035 "/usr/local/cuda/include/math_functions.h"
extern float tanhf(float x) throw();
# 8086 "/usr/local/cuda/include/math_functions.h"
extern float logf(float x) throw();
# 8136 "/usr/local/cuda/include/math_functions.h"
extern float expf(float x) throw();
# 8187 "/usr/local/cuda/include/math_functions.h"
extern float log10f(float x) throw();
# 8242 "/usr/local/cuda/include/math_functions.h"
extern float modff(float x, float * iptr) throw();
# 8550 "/usr/local/cuda/include/math_functions.h"
extern float powf(float x, float y) throw();
# 8619 "/usr/local/cuda/include/math_functions.h"
extern float sqrtf(float x) throw();
# 8678 "/usr/local/cuda/include/math_functions.h"
extern float ceilf(float x) throw();
# 8750 "/usr/local/cuda/include/math_functions.h"
extern float floorf(float x) throw();
# 8809 "/usr/local/cuda/include/math_functions.h"
extern float fmodf(float x, float y) throw();
# 8823 "/usr/local/cuda/include/math_functions.h"
}
# 28 "/usr/include/math.h" 3

# 28 "/usr/include/math.h" 3
extern "C" {
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3
typedef float float_t;
# 29 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3
typedef double double_t;
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw();
# 56 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double asin(double __x) throw(); extern double __asin(double __x) throw();
# 58 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double atan(double __x) throw(); extern double __atan(double __x) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw();
# 63 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double cos(double __x) throw(); extern double __cos(double __x) throw();
# 65 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double sin(double __x) throw(); extern double __sin(double __x) throw();
# 67 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double tan(double __x) throw(); extern double __tan(double __x) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw();
# 76 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw();
# 88 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw();
# 92 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw();
# 100 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double exp(double __x) throw(); extern double __exp(double __x) throw();
# 103 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw();
# 106 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw();
# 109 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double log(double __x) throw(); extern double __log(double __x) throw();
# 112 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double log10(double __x) throw(); extern double __log10(double __x) throw();
# 115 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2)));
# 120 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw();
# 122 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double pow10(double __x) throw(); extern double __pow10(double __x) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw();
# 131 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw();
# 134 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double logb(double __x) throw(); extern double __logb(double __x) throw();
# 141 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw();
# 144 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double log2(double __x) throw(); extern double __log2(double __x) throw();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw();
# 156 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw();
# 162 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw();
# 169 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const));
# 181 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const));
# 184 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const));
# 187 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw();
# 192 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isinf(double __value) throw() __attribute((const));
# 195 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __finite(double __value) throw() __attribute((const));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern inline int isinf(double __value) throw() __attribute((const));
# 208 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) throw() __attribute((const));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw();
# 215 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double significand(double __x) throw(); extern double __significand(double __x) throw();
# 221 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const));
# 228 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double nan(const char * __tagb) throw() __attribute((const)); extern double __nan(const char * __tagb) throw() __attribute((const));
# 234 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isnan(double __value) throw() __attribute((const));
# 241 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern inline int isnan(double __value) throw() __attribute((const));
# 247 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) throw(); extern double __j0(double) throw();
# 248 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j1(double) throw(); extern double __j1(double) throw();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double jn(int, double) throw(); extern double __jn(int, double) throw();
# 250 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double y0(double) throw(); extern double __y0(double) throw();
# 251 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double y1(double) throw(); extern double __y1(double) throw();
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double yn(int, double) throw(); extern double __yn(int, double) throw();
# 259 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double erf(double) throw(); extern double __erf(double) throw();
# 260 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double erfc(double) throw(); extern double __erfc(double) throw();
# 261 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double lgamma(double) throw(); extern double __lgamma(double) throw();
# 268 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double tgamma(double) throw(); extern double __tgamma(double) throw();
# 274 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double gamma(double) throw(); extern double __gamma(double) throw();
# 281 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw();
# 289 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double rint(double __x) throw(); extern double __rint(double __x) throw();
# 292 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double nextafter(double __x, double __y) throw() __attribute((const)); extern double __nextafter(double __x, double __y) throw() __attribute((const));
# 294 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double nexttoward(double __x, long double __y) throw() __attribute((const)); extern double __nexttoward(double __x, long double __y) throw() __attribute((const));
# 298 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw();
# 302 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw();
# 306 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw();
# 311 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw();
# 315 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw();
# 319 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const));
# 323 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const));
# 328 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw();
# 335 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw();
# 337 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw();
# 341 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lround(double __x) throw(); extern long __lround(double __x) throw();
# 343 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw();
# 347 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw();
# 350 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const));
# 353 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const));
# 357 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __fpclassify(double __value) throw()
# 358 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 361 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __signbit(double __value) throw()
# 362 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 366 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __issignaling(double __value) throw()
# 376 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw();
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw();
# 56 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw();
# 58 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw();
# 63 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float cosf(float __x) throw();
# 65 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float sinf(float __x) throw();
# 67 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float tanf(float __x) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw();
# 76 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern void sincosf(float __x, float * __sinx, float * __cosx) throw();
# 88 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw();
# 92 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw();
# 100 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float expf(float __x) throw();
# 103 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw();
# 106 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw();
# 109 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float logf(float __x) throw();
# 112 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float log10f(float __x) throw();
# 115 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2)));
# 120 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float exp10f(float __x) throw();
# 122 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float pow10f(float __x) throw(); extern float __pow10f(float __x) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw();
# 131 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw();
# 134 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw();
# 141 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw();
# 144 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float log2f(float __x) throw();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float powf(float __x, float __y) throw();
# 156 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw();
# 162 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw();
# 169 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const));
# 181 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const));
# 184 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const));
# 187 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw();
# 192 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isinff(float __value) throw() __attribute((const));
# 195 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __finitef(float __value) throw() __attribute((const));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) throw() __attribute((const));
# 208 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finitef(float __value) throw() __attribute((const));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw();
# 215 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw();
# 221 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const));
# 228 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float nanf(const char * __tagb) throw() __attribute((const)); extern float __nanf(const char * __tagb) throw() __attribute((const));
# 234 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isnanf(float __value) throw() __attribute((const));
# 241 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) throw() __attribute((const));
# 247 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float j0f(float) throw(); extern float __j0f(float) throw();
# 248 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float j1f(float) throw(); extern float __j1f(float) throw();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw();
# 250 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float y0f(float) throw(); extern float __y0f(float) throw();
# 251 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float y1f(float) throw(); extern float __y1f(float) throw();
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw();
# 259 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float erff(float) throw(); extern float __erff(float) throw();
# 260 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float erfcf(float) throw(); extern float __erfcf(float) throw();
# 261 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw();
# 268 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw();
# 274 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float gammaf(float) throw(); extern float __gammaf(float) throw();
# 281 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw();
# 289 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw();
# 292 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float nextafterf(float __x, float __y) throw() __attribute((const)); extern float __nextafterf(float __x, float __y) throw() __attribute((const));
# 294 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float nexttowardf(float __x, long double __y) throw() __attribute((const)); extern float __nexttowardf(float __x, long double __y) throw() __attribute((const));
# 298 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw();
# 302 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw();
# 306 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw();
# 311 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw();
# 315 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw();
# 319 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const));
# 323 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const));
# 328 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw();
# 335 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw();
# 337 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw();
# 341 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw();
# 343 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw();
# 347 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw();
# 350 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const));
# 353 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const));
# 357 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __fpclassifyf(float __value) throw()
# 358 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 361 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __signbitf(float __value) throw()
# 362 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 366 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __issignalingf(float __value) throw()
# 376 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw();
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw();
# 56 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw();
# 58 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw();
# 63 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw();
# 65 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw();
# 67 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw();
# 76 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw();
# 88 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw();
# 92 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw();
# 100 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw();
# 103 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw();
# 106 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw();
# 109 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw();
# 112 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw();
# 115 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2)));
# 120 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw();
# 122 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double pow10l(long double __x) throw(); extern long double __pow10l(long double __x) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw();
# 131 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw();
# 134 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw();
# 141 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw();
# 144 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw();
# 156 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw();
# 162 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw();
# 169 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const));
# 181 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const));
# 184 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const));
# 187 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw();
# 192 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isinfl(long double __value) throw() __attribute((const));
# 195 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __finitel(long double __value) throw() __attribute((const));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) throw() __attribute((const));
# 208 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finitel(long double __value) throw() __attribute((const));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw();
# 215 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw();
# 221 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const));
# 228 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double nanl(const char * __tagb) throw() __attribute((const)); extern long double __nanl(const char * __tagb) throw() __attribute((const));
# 234 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __isnanl(long double __value) throw() __attribute((const));
# 241 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) throw() __attribute((const));
# 247 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw();
# 248 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw();
# 250 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw();
# 251 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw();
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw();
# 259 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw();
# 260 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw();
# 261 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw();
# 268 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw();
# 274 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw();
# 281 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw();
# 289 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw();
# 292 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double nextafterl(long double __x, long double __y) throw() __attribute((const)); extern long double __nextafterl(long double __x, long double __y) throw() __attribute((const));
# 294 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double nexttowardl(long double __x, long double __y) throw() __attribute((const)); extern long double __nexttowardl(long double __x, long double __y) throw() __attribute((const));
# 298 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw();
# 302 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw();
# 306 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw();
# 311 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw();
# 315 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw();
# 319 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const));
# 323 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const));
# 328 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw();
# 335 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw();
# 337 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw();
# 341 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw();
# 343 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw();
# 347 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw();
# 350 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const));
# 353 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const));
# 357 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __fpclassifyl(long double __value) throw()
# 358 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 361 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __signbitl(long double __value) throw()
# 362 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 366 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int __issignalingl(long double __value) throw()
# 376 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
 __attribute((const));
# 383 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw();
# 168 "/usr/include/math.h" 3
extern int signgam;
# 210 "/usr/include/math.h" 3
enum {
# 211 "/usr/include/math.h" 3
FP_NAN,
# 214 "/usr/include/math.h" 3
FP_INFINITE,
# 217 "/usr/include/math.h" 3
FP_ZERO,
# 220 "/usr/include/math.h" 3
FP_SUBNORMAL,
# 223 "/usr/include/math.h" 3
FP_NORMAL
# 226 "/usr/include/math.h" 3
};
# 354 "/usr/include/math.h" 3
typedef
# 348 "/usr/include/math.h" 3
enum {
# 349 "/usr/include/math.h" 3
_IEEE_ = (-1),
# 350 "/usr/include/math.h" 3
_SVID_ = 0,
# 351 "/usr/include/math.h" 3
_XOPEN_,
# 352 "/usr/include/math.h" 3
_POSIX_,
# 353 "/usr/include/math.h" 3
_ISOC_
# 354 "/usr/include/math.h" 3
} _LIB_VERSION_TYPE;
# 359 "/usr/include/math.h" 3
extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3
struct __exception {
# 375 "/usr/include/math.h" 3
int type;
# 376 "/usr/include/math.h" 3
char *name;
# 377 "/usr/include/math.h" 3
double arg1;
# 378 "/usr/include/math.h" 3
double arg2;
# 379 "/usr/include/math.h" 3
double retval;
# 380 "/usr/include/math.h" 3
};
# 383 "/usr/include/math.h" 3
extern int matherr(__exception * __exc) throw();
# 534 "/usr/include/math.h" 3
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 55 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
typedef
# 51 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
enum {
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
P_ALL,
# 53 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
P_PID,
# 54 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
P_PGID
# 55 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
} idtype_t;
# 45 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline unsigned __bswap_32(unsigned __bsx)
# 46 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
{
# 47 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
return __builtin_bswap32(__bsx);
# 48 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
}
# 109 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint64_t __bswap_64(__uint64_t __bsx)
# 110 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
{
# 111 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
return __builtin_bswap64(__bsx);
# 112 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
}
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
union wait {
# 68 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
int w_status;
# 70 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
struct {
# 72 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned __w_termsig:7;
# 73 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned __w_coredump:1;
# 74 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned __w_retcode:8;
# 75 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned:16;
# 83 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
} __wait_terminated;
# 85 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
struct {
# 87 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned __w_stopval:8;
# 88 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned __w_stopsig:8;
# 89 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
unsigned:16;
# 96 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
} __wait_stopped;
# 97 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
};
# 101 "/usr/include/stdlib.h" 3
typedef
# 98 "/usr/include/stdlib.h" 3
struct {
# 99 "/usr/include/stdlib.h" 3
int quot;
# 100 "/usr/include/stdlib.h" 3
int rem;
# 101 "/usr/include/stdlib.h" 3
} div_t;
# 109 "/usr/include/stdlib.h" 3
typedef
# 106 "/usr/include/stdlib.h" 3
struct {
# 107 "/usr/include/stdlib.h" 3
long quot;
# 108 "/usr/include/stdlib.h" 3
long rem;
# 109 "/usr/include/stdlib.h" 3
} ldiv_t;
# 121 "/usr/include/stdlib.h" 3
__extension__ typedef
# 118 "/usr/include/stdlib.h" 3
struct {
# 119 "/usr/include/stdlib.h" 3
long long quot;
# 120 "/usr/include/stdlib.h" 3
long long rem;
# 121 "/usr/include/stdlib.h" 3
} lldiv_t;
# 139 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() throw();
# 144 "/usr/include/stdlib.h" 3
extern double atof(const char * __nptr) throw()
# 145 "/usr/include/stdlib.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 147 "/usr/include/stdlib.h" 3
extern int atoi(const char * __nptr) throw()
# 148 "/usr/include/stdlib.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 150 "/usr/include/stdlib.h" 3
extern long atol(const char * __nptr) throw()
# 151 "/usr/include/stdlib.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 157 "/usr/include/stdlib.h" 3
__extension__ extern long long atoll(const char * __nptr) throw()
# 158 "/usr/include/stdlib.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 164 "/usr/include/stdlib.h" 3
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 172 "/usr/include/stdlib.h" 3
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 173 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 175 "/usr/include/stdlib.h" 3
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 177 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 183 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 185 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 187 "/usr/include/stdlib.h" 3
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 195 "/usr/include/stdlib.h" 3
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 197 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 200 "/usr/include/stdlib.h" 3
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 209 "/usr/include/stdlib.h" 3
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 211 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 214 "/usr/include/stdlib.h" 3
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 216 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 239 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 241 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 243 "/usr/include/stdlib.h" 3
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 246 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 249 "/usr/include/stdlib.h" 3
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 252 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 255 "/usr/include/stdlib.h" 3
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 258 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 260 "/usr/include/stdlib.h" 3
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 262 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 3)));
# 264 "/usr/include/stdlib.h" 3
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 266 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 3)));
# 268 "/usr/include/stdlib.h" 3
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 271 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 3)));
# 305 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw();
# 308 "/usr/include/stdlib.h" 3
extern long a64l(const char * __s) throw()
# 309 "/usr/include/stdlib.h" 3
 __attribute((__pure__)) __attribute((__nonnull__(1)));
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_char u_char;
# 34 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_short u_short;
# 35 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_int u_int;
# 36 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_long u_long;
# 37 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __quad_t quad_t;
# 38 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_quad_t u_quad_t;
# 39 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __fsid_t fsid_t;
# 44 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __loff_t loff_t;
# 48 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __ino_t ino_t;
# 55 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __ino64_t ino64_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __dev_t dev_t;
# 65 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __gid_t gid_t;
# 70 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __mode_t mode_t;
# 75 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __nlink_t nlink_t;
# 80 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uid_t uid_t;
# 86 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __off_t off_t;
# 93 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __off64_t off64_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __id_t id_t;
# 109 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __ssize_t ssize_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __daddr_t daddr_t;
# 116 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __caddr_t caddr_t;
# 122 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __key_t key_t;
# 136 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t;
# 140 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __suseconds_t suseconds_t;
# 150 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong;
# 151 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned short ushort;
# 152 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef signed char int8_t __attribute((__mode__(__QI__)));
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef short int16_t __attribute((__mode__(__HI__)));
# 196 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef int int32_t __attribute((__mode__(__SI__)));
# 197 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef long int64_t __attribute((__mode__(__DI__)));
# 200 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned char u_int8_t __attribute((__mode__(__QI__)));
# 201 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned short u_int16_t __attribute((__mode__(__HI__)));
# 202 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned u_int32_t __attribute((__mode__(__SI__)));
# 203 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long u_int64_t __attribute((__mode__(__DI__)));
# 205 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef long register_t __attribute((__mode__(__word__)));
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
typedef int __sig_atomic_t;
# 30 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
typedef
# 28 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
struct {
# 29 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))];
# 30 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
} __sigset_t;
# 37 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef __sigset_t sigset_t;
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask;
# 75 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef
# 65 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
struct {
# 69 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))];
# 75 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
} fd_set;
# 82 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
extern "C" {
# 27 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
__extension__ extern unsigned gnu_dev_major(unsigned long long __dev) throw()
# 28 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
 __attribute((const));
# 30 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
__extension__ extern unsigned gnu_dev_minor(unsigned long long __dev) throw()
# 31 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
 __attribute((const));
# 33 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
__extension__ extern unsigned long long gnu_dev_makedev(unsigned __major, unsigned __minor) throw()
# 35 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
 __attribute((const));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
}
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t;
# 235 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt_t blkcnt_t;
# 239 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __fsblkcnt_t fsblkcnt_t;
# 243 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t;
# 263 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __fsblkcnt64_t fsblkcnt64_t;
# 264 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __fsfilcnt64_t fsfilcnt64_t;
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t;
# 63 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union pthread_attr_t {
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[56];
# 66 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
long __align;
# 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
};
# 69 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef pthread_attr_t pthread_attr_t;
# 79 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
struct __pthread_internal_list {
# 77 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__pthread_internal_list *__prev;
# 78 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__pthread_internal_list *__next;
# 79 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __pthread_list_t;
# 128 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 91 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 92 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
struct __pthread_mutex_s {
# 94 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __lock;
# 95 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __count;
# 96 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __owner;
# 98 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __nusers;
# 102 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __kind;
# 104 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
short __spins;
# 105 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
short __elision;
# 106 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __data;
# 126 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[40];
# 127 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
long __align;
# 128 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_mutex_t;
# 134 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 131 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 132 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[4];
# 133 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __align;
# 134 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_mutexattr_t;
# 154 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 140 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 142 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
struct {
# 143 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __lock;
# 144 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __futex;
# 145 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__extension__ unsigned long long __total_seq;
# 146 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__extension__ unsigned long long __wakeup_seq;
# 147 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__extension__ unsigned long long __woken_seq;
# 148 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
void *__mutex;
# 149 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __nwaiters;
# 150 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __broadcast_seq;
# 151 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __data;
# 152 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[48];
# 153 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
__extension__ long long __align;
# 154 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_cond_t;
# 160 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 157 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 158 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[4];
# 159 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __align;
# 160 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_condattr_t;
# 164 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned pthread_key_t;
# 168 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef int pthread_once_t;
# 222 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 175 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 178 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
struct {
# 179 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __lock;
# 180 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __nr_readers;
# 181 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __readers_wakeup;
# 182 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __writer_wakeup;
# 183 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __nr_readers_queued;
# 184 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __nr_writers_queued;
# 185 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __writer;
# 186 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __shared;
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
signed char __rwelision;
# 192 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned char __pad1[7];
# 195 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned long __pad2;
# 198 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
unsigned __flags;
# 200 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[56];
# 221 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
long __align;
# 222 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_rwlock_t;
# 228 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 225 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 226 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[8];
# 227 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
long __align;
# 228 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_rwlockattr_t;
# 234 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef volatile int pthread_spinlock_t;
# 243 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 240 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 241 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[32];
# 242 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
long __align;
# 243 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_barrier_t;
# 249 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef
# 246 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union {
# 247 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[4];
# 248 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
int __align;
# 249 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} pthread_barrierattr_t;
# 273 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 321 "/usr/include/stdlib.h" 3
extern long random() throw();
# 324 "/usr/include/stdlib.h" 3
extern void srandom(unsigned __seed) throw();
# 330 "/usr/include/stdlib.h" 3
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 331 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2)));
# 335 "/usr/include/stdlib.h" 3
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1)));
# 343 "/usr/include/stdlib.h" 3
struct random_data {
# 345 "/usr/include/stdlib.h" 3
int32_t *fptr;
# 346 "/usr/include/stdlib.h" 3
int32_t *rptr;
# 347 "/usr/include/stdlib.h" 3
int32_t *state;
# 348 "/usr/include/stdlib.h" 3
int rand_type;
# 349 "/usr/include/stdlib.h" 3
int rand_deg;
# 350 "/usr/include/stdlib.h" 3
int rand_sep;
# 351 "/usr/include/stdlib.h" 3
int32_t *end_ptr;
# 352 "/usr/include/stdlib.h" 3
};
# 354 "/usr/include/stdlib.h" 3
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 355 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 357 "/usr/include/stdlib.h" 3
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 358 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2)));
# 360 "/usr/include/stdlib.h" 3
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 363 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2, 4)));
# 365 "/usr/include/stdlib.h" 3
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 367 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 374 "/usr/include/stdlib.h" 3
extern int rand() throw();
# 376 "/usr/include/stdlib.h" 3
extern void srand(unsigned __seed) throw();
# 381 "/usr/include/stdlib.h" 3
extern int rand_r(unsigned * __seed) throw();
# 389 "/usr/include/stdlib.h" 3
extern double drand48() throw();
# 390 "/usr/include/stdlib.h" 3
extern double erand48(unsigned short __xsubi[3]) throw() __attribute((__nonnull__(1)));
# 393 "/usr/include/stdlib.h" 3
extern long lrand48() throw();
# 394 "/usr/include/stdlib.h" 3
extern long nrand48(unsigned short __xsubi[3]) throw()
# 395 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 398 "/usr/include/stdlib.h" 3
extern long mrand48() throw();
# 399 "/usr/include/stdlib.h" 3
extern long jrand48(unsigned short __xsubi[3]) throw()
# 400 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 403 "/usr/include/stdlib.h" 3
extern void srand48(long __seedval) throw();
# 404 "/usr/include/stdlib.h" 3
extern unsigned short *seed48(unsigned short __seed16v[3]) throw()
# 405 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 406 "/usr/include/stdlib.h" 3
extern void lcong48(unsigned short __param[7]) throw() __attribute((__nonnull__(1)));
# 412 "/usr/include/stdlib.h" 3
struct drand48_data {
# 414 "/usr/include/stdlib.h" 3
unsigned short __x[3];
# 415 "/usr/include/stdlib.h" 3
unsigned short __old_x[3];
# 416 "/usr/include/stdlib.h" 3
unsigned short __c;
# 417 "/usr/include/stdlib.h" 3
unsigned short __init;
# 418 "/usr/include/stdlib.h" 3
__extension__ unsigned long long __a;
# 420 "/usr/include/stdlib.h" 3
};
# 423 "/usr/include/stdlib.h" 3
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 424 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 425 "/usr/include/stdlib.h" 3
extern int erand48_r(unsigned short __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 427 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 430 "/usr/include/stdlib.h" 3
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 432 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 433 "/usr/include/stdlib.h" 3
extern int nrand48_r(unsigned short __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 436 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 439 "/usr/include/stdlib.h" 3
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 441 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 442 "/usr/include/stdlib.h" 3
extern int jrand48_r(unsigned short __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 445 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 448 "/usr/include/stdlib.h" 3
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 449 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2)));
# 451 "/usr/include/stdlib.h" 3
extern int seed48_r(unsigned short __seed16v[3], drand48_data * __buffer) throw()
# 452 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 454 "/usr/include/stdlib.h" 3
extern int lcong48_r(unsigned short __param[7], drand48_data * __buffer) throw()
# 456 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2)));
# 466 "/usr/include/stdlib.h" 3
extern void *malloc(size_t __size) throw() __attribute((__malloc__));
# 468 "/usr/include/stdlib.h" 3
extern void *calloc(size_t __nmemb, size_t __size) throw()
# 469 "/usr/include/stdlib.h" 3
 __attribute((__malloc__));
# 480 "/usr/include/stdlib.h" 3
extern void *realloc(void * __ptr, size_t __size) throw()
# 481 "/usr/include/stdlib.h" 3
 __attribute((__warn_unused_result__));
# 483 "/usr/include/stdlib.h" 3
extern void free(void * __ptr) throw();
# 488 "/usr/include/stdlib.h" 3
extern void cfree(void * __ptr) throw();
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32 "/usr/include/alloca.h" 3
extern void *alloca(size_t __size) throw();
# 38 "/usr/include/alloca.h" 3
}
# 498 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) throw() __attribute((__malloc__));
# 503 "/usr/include/stdlib.h" 3
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 504 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 509 "/usr/include/stdlib.h" 3
extern void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 510 "/usr/include/stdlib.h" 3
 __attribute((__malloc__)) __attribute((__alloc_size__(2)));
# 515 "/usr/include/stdlib.h" 3
extern void abort() throw() __attribute((__noreturn__));
# 519 "/usr/include/stdlib.h" 3
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1)));
# 524 "/usr/include/stdlib.h" 3
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 525 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 535 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 536 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 543 "/usr/include/stdlib.h" 3
extern void exit(int __status) throw() __attribute((__noreturn__));
# 549 "/usr/include/stdlib.h" 3
extern void quick_exit(int __status) throw() __attribute((__noreturn__));
# 557 "/usr/include/stdlib.h" 3
extern void _Exit(int __status) throw() __attribute((__noreturn__));
# 564 "/usr/include/stdlib.h" 3
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1)));
# 570 "/usr/include/stdlib.h" 3
extern char *secure_getenv(const char * __name) throw()
# 571 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 578 "/usr/include/stdlib.h" 3
extern int putenv(char * __string) throw() __attribute((__nonnull__(1)));
# 584 "/usr/include/stdlib.h" 3
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 585 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2)));
# 588 "/usr/include/stdlib.h" 3
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1)));
# 595 "/usr/include/stdlib.h" 3
extern int clearenv() throw();
# 606 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1)));
# 619 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1)));
# 629 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1)));
# 641 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1)));
# 651 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 652 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 662 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1)));
# 673 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1)));
# 683 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1)));
# 693 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 694 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 705 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 706 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 716 "/usr/include/stdlib.h" 3
extern int system(const char * __command);
# 723 "/usr/include/stdlib.h" 3
extern char *canonicalize_file_name(const char * __name) throw()
# 724 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 733 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw();
# 741 "/usr/include/stdlib.h" 3
typedef int (*__compar_fn_t)(const void *, const void *);
# 744 "/usr/include/stdlib.h" 3
typedef __compar_fn_t comparison_fn_t;
# 748 "/usr/include/stdlib.h" 3
typedef int (*__compar_d_fn_t)(const void *, const void *, void *);
# 754 "/usr/include/stdlib.h" 3
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 756 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2, 5)));
# 764 "/usr/include/stdlib.h" 3
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 765 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 767 "/usr/include/stdlib.h" 3
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 769 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 4)));
# 774 "/usr/include/stdlib.h" 3
extern int abs(int __x) throw() __attribute((const));
# 775 "/usr/include/stdlib.h" 3
extern long labs(long __x) throw() __attribute((const));
# 779 "/usr/include/stdlib.h" 3
__extension__ extern long long llabs(long long __x) throw()
# 780 "/usr/include/stdlib.h" 3
 __attribute((const));
# 788 "/usr/include/stdlib.h" 3
extern div_t div(int __numer, int __denom) throw()
# 789 "/usr/include/stdlib.h" 3
 __attribute((const));
# 790 "/usr/include/stdlib.h" 3
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 791 "/usr/include/stdlib.h" 3
 __attribute((const));
# 796 "/usr/include/stdlib.h" 3
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 798 "/usr/include/stdlib.h" 3
 __attribute((const));
# 811 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 812 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4)));
# 817 "/usr/include/stdlib.h" 3
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 818 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4)));
# 823 "/usr/include/stdlib.h" 3
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 824 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3)));
# 829 "/usr/include/stdlib.h" 3
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 831 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4)));
# 832 "/usr/include/stdlib.h" 3
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 834 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4)));
# 835 "/usr/include/stdlib.h" 3
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 836 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3)));
# 841 "/usr/include/stdlib.h" 3
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 843 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4, 5)));
# 844 "/usr/include/stdlib.h" 3
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 846 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4, 5)));
# 848 "/usr/include/stdlib.h" 3
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 851 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4, 5)));
# 852 "/usr/include/stdlib.h" 3
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 855 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(3, 4, 5)));
# 862 "/usr/include/stdlib.h" 3
extern int mblen(const char * __s, size_t __n) throw();
# 865 "/usr/include/stdlib.h" 3
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw();
# 869 "/usr/include/stdlib.h" 3
extern int wctomb(char * __s, wchar_t __wchar) throw();
# 873 "/usr/include/stdlib.h" 3
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw();
# 876 "/usr/include/stdlib.h" 3
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw();
# 887 "/usr/include/stdlib.h" 3
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1)));
# 898 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 901 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1, 2, 3)));
# 907 "/usr/include/stdlib.h" 3
extern void setkey(const char * __key) throw() __attribute((__nonnull__(1)));
# 915 "/usr/include/stdlib.h" 3
extern int posix_openpt(int __oflag);
# 923 "/usr/include/stdlib.h" 3
extern int grantpt(int __fd) throw();
# 927 "/usr/include/stdlib.h" 3
extern int unlockpt(int __fd) throw();
# 932 "/usr/include/stdlib.h" 3
extern char *ptsname(int __fd) throw();
# 939 "/usr/include/stdlib.h" 3
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 940 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(2)));
# 943 "/usr/include/stdlib.h" 3
extern int getpt();
# 950 "/usr/include/stdlib.h" 3
extern int getloadavg(double __loadavg[], int __nelem) throw()
# 951 "/usr/include/stdlib.h" 3
 __attribute((__nonnull__(1)));
# 967 "/usr/include/stdlib.h" 3
}
# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std {
# 196 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
typedef unsigned long size_t;
# 197 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
typedef long ptrdiff_t;
# 202 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
}
# 216 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std {
# 218 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
inline namespace __cxx11 __attribute((__abi_tag__("cxx11" ))) { }
# 219 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
}
# 220 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace __gnu_cxx {
# 222 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
inline namespace __cxx11 __attribute((__abi_tag__("cxx11" ))) { }
# 223 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
}
# 68 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 72 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Iterator, class _Container> class __normal_iterator;
# 76 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
}
# 78 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace std __attribute((__visibility__("default"))) {
# 82 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __true_type { };
# 83 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __false_type { };
# 85 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< bool >
# 86 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __truth_type {
# 87 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type; };
# 90 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __truth_type< true> {
# 91 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type; };
# 95 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Sp, class _Tp>
# 96 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __traitor {
# 98 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)};
# 99 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef typename __truth_type< __value> ::__type __type;
# 100 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 103 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class , class >
# 104 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __are_same {
# 106 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 107 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 108 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 110 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 111 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __are_same< _Tp, _Tp> {
# 113 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 114 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 115 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 118 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 119 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_void {
# 121 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 122 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 123 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 126 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_void< void> {
# 128 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 129 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 130 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 135 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 136 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_integer {
# 138 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 139 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 140 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 147 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< bool> {
# 149 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 150 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 151 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 154 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char> {
# 156 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 157 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 158 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 161 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< signed char> {
# 163 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 164 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 165 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 168 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned char> {
# 170 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 171 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 172 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 176 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< wchar_t> {
# 178 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 179 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 180 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 200 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short> {
# 202 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 203 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 204 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 207 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned short> {
# 209 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 210 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 211 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 214 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< int> {
# 216 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 217 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 218 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 221 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned> {
# 223 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 224 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 225 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 228 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long> {
# 230 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 231 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 232 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 235 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long> {
# 237 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 238 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 239 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 242 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long long> {
# 244 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 245 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 246 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 249 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long long> {
# 251 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 252 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 253 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 270 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer< __int128_t> { enum { __value = 1}; typedef __true_type __type; }; template<> struct __is_integer< __uint128_t> { enum { __value = 1}; typedef __true_type __type; };
# 287 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 288 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_floating {
# 290 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 291 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 292 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 296 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_floating< float> {
# 298 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 299 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 300 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 303 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_floating< double> {
# 305 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 306 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 307 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 310 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_floating< long double> {
# 312 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 313 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 314 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 319 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 320 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_pointer {
# 322 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 323 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 324 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 326 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 327 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_pointer< _Tp *> {
# 329 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 330 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 331 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 336 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 337 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_normal_iterator {
# 339 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 340 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 341 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 343 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Iterator, class _Container>
# 344 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> > {
# 347 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 348 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 349 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 354 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 355 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> > {
# 357 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 362 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 363 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> > {
# 365 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 370 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 371 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_char {
# 373 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 374 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 375 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 378 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_char< char> {
# 380 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 381 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 382 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 386 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_char< wchar_t> {
# 388 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 389 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 390 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 393 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 394 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_byte {
# 396 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 397 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 398 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 401 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_byte< char> {
# 403 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 404 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 405 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 408 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_byte< signed char> {
# 410 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 411 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 412 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 415 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_byte< unsigned char> {
# 417 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 418 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 419 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 424 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template< class _Tp>
# 425 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
struct __is_move_iterator {
# 427 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
enum { __value};
# 428 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 429 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
};
# 444 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/5/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 42 "/usr/include/c++/5/ext/type_traits.h" 3
template< bool , class >
# 43 "/usr/include/c++/5/ext/type_traits.h" 3
struct __enable_if {
# 44 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 46 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp>
# 47 "/usr/include/c++/5/ext/type_traits.h" 3
struct __enable_if< true, _Tp> {
# 48 "/usr/include/c++/5/ext/type_traits.h" 3
typedef _Tp __type; };
# 52 "/usr/include/c++/5/ext/type_traits.h" 3
template< bool _Cond, class _Iftrue, class _Iffalse>
# 53 "/usr/include/c++/5/ext/type_traits.h" 3
struct __conditional_type {
# 54 "/usr/include/c++/5/ext/type_traits.h" 3
typedef _Iftrue __type; };
# 56 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Iftrue, class _Iffalse>
# 57 "/usr/include/c++/5/ext/type_traits.h" 3
struct __conditional_type< false, _Iftrue, _Iffalse> {
# 58 "/usr/include/c++/5/ext/type_traits.h" 3
typedef _Iffalse __type; };
# 62 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp>
# 63 "/usr/include/c++/5/ext/type_traits.h" 3
struct __add_unsigned {
# 66 "/usr/include/c++/5/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 69 "/usr/include/c++/5/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 70 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 73 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< char> {
# 74 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned char __type; };
# 77 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< signed char> {
# 78 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned char __type; };
# 81 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< short> {
# 82 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned short __type; };
# 85 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< int> {
# 86 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned __type; };
# 89 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< long> {
# 90 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned long __type; };
# 93 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< long long> {
# 94 "/usr/include/c++/5/ext/type_traits.h" 3
typedef unsigned long long __type; };
# 98 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< bool> ;
# 101 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __add_unsigned< wchar_t> ;
# 105 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp>
# 106 "/usr/include/c++/5/ext/type_traits.h" 3
struct __remove_unsigned {
# 109 "/usr/include/c++/5/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 112 "/usr/include/c++/5/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 113 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 116 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< char> {
# 117 "/usr/include/c++/5/ext/type_traits.h" 3
typedef signed char __type; };
# 120 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned char> {
# 121 "/usr/include/c++/5/ext/type_traits.h" 3
typedef signed char __type; };
# 124 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned short> {
# 125 "/usr/include/c++/5/ext/type_traits.h" 3
typedef short __type; };
# 128 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned> {
# 129 "/usr/include/c++/5/ext/type_traits.h" 3
typedef int __type; };
# 132 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long> {
# 133 "/usr/include/c++/5/ext/type_traits.h" 3
typedef long __type; };
# 136 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long long> {
# 137 "/usr/include/c++/5/ext/type_traits.h" 3
typedef long long __type; };
# 141 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< bool> ;
# 144 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __remove_unsigned< wchar_t> ;
# 148 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Type> inline bool
# 150 "/usr/include/c++/5/ext/type_traits.h" 3
__is_null_pointer(_Type *__ptr)
# 151 "/usr/include/c++/5/ext/type_traits.h" 3
{ return __ptr == 0; }
# 153 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Type> inline bool
# 155 "/usr/include/c++/5/ext/type_traits.h" 3
__is_null_pointer(_Type)
# 156 "/usr/include/c++/5/ext/type_traits.h" 3
{ return false; }
# 165 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp, bool = std::__is_integer< _Tp> ::__value>
# 166 "/usr/include/c++/5/ext/type_traits.h" 3
struct __promote {
# 167 "/usr/include/c++/5/ext/type_traits.h" 3
typedef double __type; };
# 172 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp>
# 173 "/usr/include/c++/5/ext/type_traits.h" 3
struct __promote< _Tp, false> {
# 174 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 177 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __promote< long double> {
# 178 "/usr/include/c++/5/ext/type_traits.h" 3
typedef long double __type; };
# 181 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __promote< double> {
# 182 "/usr/include/c++/5/ext/type_traits.h" 3
typedef double __type; };
# 185 "/usr/include/c++/5/ext/type_traits.h" 3
template<> struct __promote< float> {
# 186 "/usr/include/c++/5/ext/type_traits.h" 3
typedef float __type; };
# 188 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp, class _Up, class
# 189 "/usr/include/c++/5/ext/type_traits.h" 3
_Tp2 = typename __promote< _Tp> ::__type, class
# 190 "/usr/include/c++/5/ext/type_traits.h" 3
_Up2 = typename __promote< _Up> ::__type>
# 191 "/usr/include/c++/5/ext/type_traits.h" 3
struct __promote_2 {
# 193 "/usr/include/c++/5/ext/type_traits.h" 3
typedef __typeof__(_Tp2() + _Up2()) __type;
# 194 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 196 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp, class _Up, class _Vp, class
# 197 "/usr/include/c++/5/ext/type_traits.h" 3
_Tp2 = typename __promote< _Tp> ::__type, class
# 198 "/usr/include/c++/5/ext/type_traits.h" 3
_Up2 = typename __promote< _Up> ::__type, class
# 199 "/usr/include/c++/5/ext/type_traits.h" 3
_Vp2 = typename __promote< _Vp> ::__type>
# 200 "/usr/include/c++/5/ext/type_traits.h" 3
struct __promote_3 {
# 202 "/usr/include/c++/5/ext/type_traits.h" 3
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type;
# 203 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 205 "/usr/include/c++/5/ext/type_traits.h" 3
template< class _Tp, class _Up, class _Vp, class _Wp, class
# 206 "/usr/include/c++/5/ext/type_traits.h" 3
_Tp2 = typename __promote< _Tp> ::__type, class
# 207 "/usr/include/c++/5/ext/type_traits.h" 3
_Up2 = typename __promote< _Up> ::__type, class
# 208 "/usr/include/c++/5/ext/type_traits.h" 3
_Vp2 = typename __promote< _Vp> ::__type, class
# 209 "/usr/include/c++/5/ext/type_traits.h" 3
_Wp2 = typename __promote< _Wp> ::__type>
# 210 "/usr/include/c++/5/ext/type_traits.h" 3
struct __promote_4 {
# 212 "/usr/include/c++/5/ext/type_traits.h" 3
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type;
# 213 "/usr/include/c++/5/ext/type_traits.h" 3
};
# 216 "/usr/include/c++/5/ext/type_traits.h" 3
}
# 75 "/usr/include/c++/5/cmath" 3
namespace std __attribute((__visibility__("default"))) {
# 81 "/usr/include/c++/5/cmath" 3
inline double abs(double __x)
# 82 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabs(__x); }
# 87 "/usr/include/c++/5/cmath" 3
inline float abs(float __x)
# 88 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabsf(__x); }
# 91 "/usr/include/c++/5/cmath" 3
inline long double abs(long double __x)
# 92 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabsl(__x); }
# 95 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 99 "/usr/include/c++/5/cmath" 3
abs(_Tp __x)
# 100 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabs(__x); }
# 102 "/usr/include/c++/5/cmath" 3
using ::acos;
# 106 "/usr/include/c++/5/cmath" 3
inline float acos(float __x)
# 107 "/usr/include/c++/5/cmath" 3
{ return __builtin_acosf(__x); }
# 110 "/usr/include/c++/5/cmath" 3
inline long double acos(long double __x)
# 111 "/usr/include/c++/5/cmath" 3
{ return __builtin_acosl(__x); }
# 114 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 118 "/usr/include/c++/5/cmath" 3
acos(_Tp __x)
# 119 "/usr/include/c++/5/cmath" 3
{ return __builtin_acos(__x); }
# 121 "/usr/include/c++/5/cmath" 3
using ::asin;
# 125 "/usr/include/c++/5/cmath" 3
inline float asin(float __x)
# 126 "/usr/include/c++/5/cmath" 3
{ return __builtin_asinf(__x); }
# 129 "/usr/include/c++/5/cmath" 3
inline long double asin(long double __x)
# 130 "/usr/include/c++/5/cmath" 3
{ return __builtin_asinl(__x); }
# 133 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 137 "/usr/include/c++/5/cmath" 3
asin(_Tp __x)
# 138 "/usr/include/c++/5/cmath" 3
{ return __builtin_asin(__x); }
# 140 "/usr/include/c++/5/cmath" 3
using ::atan;
# 144 "/usr/include/c++/5/cmath" 3
inline float atan(float __x)
# 145 "/usr/include/c++/5/cmath" 3
{ return __builtin_atanf(__x); }
# 148 "/usr/include/c++/5/cmath" 3
inline long double atan(long double __x)
# 149 "/usr/include/c++/5/cmath" 3
{ return __builtin_atanl(__x); }
# 152 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 156 "/usr/include/c++/5/cmath" 3
atan(_Tp __x)
# 157 "/usr/include/c++/5/cmath" 3
{ return __builtin_atan(__x); }
# 159 "/usr/include/c++/5/cmath" 3
using ::atan2;
# 163 "/usr/include/c++/5/cmath" 3
inline float atan2(float __y, float __x)
# 164 "/usr/include/c++/5/cmath" 3
{ return __builtin_atan2f(__y, __x); }
# 167 "/usr/include/c++/5/cmath" 3
inline long double atan2(long double __y, long double __x)
# 168 "/usr/include/c++/5/cmath" 3
{ return __builtin_atan2l(__y, __x); }
# 171 "/usr/include/c++/5/cmath" 3
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type
# 174 "/usr/include/c++/5/cmath" 3
atan2(_Tp __y, _Up __x)
# 175 "/usr/include/c++/5/cmath" 3
{
# 176 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type;
# 177 "/usr/include/c++/5/cmath" 3
return atan2((__type)__y, (__type)__x);
# 178 "/usr/include/c++/5/cmath" 3
}
# 180 "/usr/include/c++/5/cmath" 3
using ::ceil;
# 184 "/usr/include/c++/5/cmath" 3
inline float ceil(float __x)
# 185 "/usr/include/c++/5/cmath" 3
{ return __builtin_ceilf(__x); }
# 188 "/usr/include/c++/5/cmath" 3
inline long double ceil(long double __x)
# 189 "/usr/include/c++/5/cmath" 3
{ return __builtin_ceill(__x); }
# 192 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 196 "/usr/include/c++/5/cmath" 3
ceil(_Tp __x)
# 197 "/usr/include/c++/5/cmath" 3
{ return __builtin_ceil(__x); }
# 199 "/usr/include/c++/5/cmath" 3
using ::cos;
# 203 "/usr/include/c++/5/cmath" 3
inline float cos(float __x)
# 204 "/usr/include/c++/5/cmath" 3
{ return __builtin_cosf(__x); }
# 207 "/usr/include/c++/5/cmath" 3
inline long double cos(long double __x)
# 208 "/usr/include/c++/5/cmath" 3
{ return __builtin_cosl(__x); }
# 211 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 215 "/usr/include/c++/5/cmath" 3
cos(_Tp __x)
# 216 "/usr/include/c++/5/cmath" 3
{ return __builtin_cos(__x); }
# 218 "/usr/include/c++/5/cmath" 3
using ::cosh;
# 222 "/usr/include/c++/5/cmath" 3
inline float cosh(float __x)
# 223 "/usr/include/c++/5/cmath" 3
{ return __builtin_coshf(__x); }
# 226 "/usr/include/c++/5/cmath" 3
inline long double cosh(long double __x)
# 227 "/usr/include/c++/5/cmath" 3
{ return __builtin_coshl(__x); }
# 230 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 234 "/usr/include/c++/5/cmath" 3
cosh(_Tp __x)
# 235 "/usr/include/c++/5/cmath" 3
{ return __builtin_cosh(__x); }
# 237 "/usr/include/c++/5/cmath" 3
using ::exp;
# 241 "/usr/include/c++/5/cmath" 3
inline float exp(float __x)
# 242 "/usr/include/c++/5/cmath" 3
{ return __builtin_expf(__x); }
# 245 "/usr/include/c++/5/cmath" 3
inline long double exp(long double __x)
# 246 "/usr/include/c++/5/cmath" 3
{ return __builtin_expl(__x); }
# 249 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 253 "/usr/include/c++/5/cmath" 3
exp(_Tp __x)
# 254 "/usr/include/c++/5/cmath" 3
{ return __builtin_exp(__x); }
# 256 "/usr/include/c++/5/cmath" 3
using ::fabs;
# 260 "/usr/include/c++/5/cmath" 3
inline float fabs(float __x)
# 261 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabsf(__x); }
# 264 "/usr/include/c++/5/cmath" 3
inline long double fabs(long double __x)
# 265 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabsl(__x); }
# 268 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 272 "/usr/include/c++/5/cmath" 3
fabs(_Tp __x)
# 273 "/usr/include/c++/5/cmath" 3
{ return __builtin_fabs(__x); }
# 275 "/usr/include/c++/5/cmath" 3
using ::floor;
# 279 "/usr/include/c++/5/cmath" 3
inline float floor(float __x)
# 280 "/usr/include/c++/5/cmath" 3
{ return __builtin_floorf(__x); }
# 283 "/usr/include/c++/5/cmath" 3
inline long double floor(long double __x)
# 284 "/usr/include/c++/5/cmath" 3
{ return __builtin_floorl(__x); }
# 287 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 291 "/usr/include/c++/5/cmath" 3
floor(_Tp __x)
# 292 "/usr/include/c++/5/cmath" 3
{ return __builtin_floor(__x); }
# 294 "/usr/include/c++/5/cmath" 3
using ::fmod;
# 298 "/usr/include/c++/5/cmath" 3
inline float fmod(float __x, float __y)
# 299 "/usr/include/c++/5/cmath" 3
{ return __builtin_fmodf(__x, __y); }
# 302 "/usr/include/c++/5/cmath" 3
inline long double fmod(long double __x, long double __y)
# 303 "/usr/include/c++/5/cmath" 3
{ return __builtin_fmodl(__x, __y); }
# 306 "/usr/include/c++/5/cmath" 3
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type
# 309 "/usr/include/c++/5/cmath" 3
fmod(_Tp __x, _Up __y)
# 310 "/usr/include/c++/5/cmath" 3
{
# 311 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type;
# 312 "/usr/include/c++/5/cmath" 3
return fmod((__type)__x, (__type)__y);
# 313 "/usr/include/c++/5/cmath" 3
}
# 315 "/usr/include/c++/5/cmath" 3
using ::frexp;
# 319 "/usr/include/c++/5/cmath" 3
inline float frexp(float __x, int *__exp)
# 320 "/usr/include/c++/5/cmath" 3
{ return __builtin_frexpf(__x, __exp); }
# 323 "/usr/include/c++/5/cmath" 3
inline long double frexp(long double __x, int *__exp)
# 324 "/usr/include/c++/5/cmath" 3
{ return __builtin_frexpl(__x, __exp); }
# 327 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 331 "/usr/include/c++/5/cmath" 3
frexp(_Tp __x, int *__exp)
# 332 "/usr/include/c++/5/cmath" 3
{ return __builtin_frexp(__x, __exp); }
# 334 "/usr/include/c++/5/cmath" 3
using ::ldexp;
# 338 "/usr/include/c++/5/cmath" 3
inline float ldexp(float __x, int __exp)
# 339 "/usr/include/c++/5/cmath" 3
{ return __builtin_ldexpf(__x, __exp); }
# 342 "/usr/include/c++/5/cmath" 3
inline long double ldexp(long double __x, int __exp)
# 343 "/usr/include/c++/5/cmath" 3
{ return __builtin_ldexpl(__x, __exp); }
# 346 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 350 "/usr/include/c++/5/cmath" 3
ldexp(_Tp __x, int __exp)
# 351 "/usr/include/c++/5/cmath" 3
{ return __builtin_ldexp(__x, __exp); }
# 353 "/usr/include/c++/5/cmath" 3
using ::log;
# 357 "/usr/include/c++/5/cmath" 3
inline float log(float __x)
# 358 "/usr/include/c++/5/cmath" 3
{ return __builtin_logf(__x); }
# 361 "/usr/include/c++/5/cmath" 3
inline long double log(long double __x)
# 362 "/usr/include/c++/5/cmath" 3
{ return __builtin_logl(__x); }
# 365 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 369 "/usr/include/c++/5/cmath" 3
log(_Tp __x)
# 370 "/usr/include/c++/5/cmath" 3
{ return __builtin_log(__x); }
# 372 "/usr/include/c++/5/cmath" 3
using ::log10;
# 376 "/usr/include/c++/5/cmath" 3
inline float log10(float __x)
# 377 "/usr/include/c++/5/cmath" 3
{ return __builtin_log10f(__x); }
# 380 "/usr/include/c++/5/cmath" 3
inline long double log10(long double __x)
# 381 "/usr/include/c++/5/cmath" 3
{ return __builtin_log10l(__x); }
# 384 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 388 "/usr/include/c++/5/cmath" 3
log10(_Tp __x)
# 389 "/usr/include/c++/5/cmath" 3
{ return __builtin_log10(__x); }
# 391 "/usr/include/c++/5/cmath" 3
using ::modf;
# 395 "/usr/include/c++/5/cmath" 3
inline float modf(float __x, float *__iptr)
# 396 "/usr/include/c++/5/cmath" 3
{ return __builtin_modff(__x, __iptr); }
# 399 "/usr/include/c++/5/cmath" 3
inline long double modf(long double __x, long double *__iptr)
# 400 "/usr/include/c++/5/cmath" 3
{ return __builtin_modfl(__x, __iptr); }
# 403 "/usr/include/c++/5/cmath" 3
using ::pow;
# 407 "/usr/include/c++/5/cmath" 3
inline float pow(float __x, float __y)
# 408 "/usr/include/c++/5/cmath" 3
{ return __builtin_powf(__x, __y); }
# 411 "/usr/include/c++/5/cmath" 3
inline long double pow(long double __x, long double __y)
# 412 "/usr/include/c++/5/cmath" 3
{ return __builtin_powl(__x, __y); }
# 418 "/usr/include/c++/5/cmath" 3
inline double pow(double __x, int __i)
# 419 "/usr/include/c++/5/cmath" 3
{ return __builtin_powi(__x, __i); }
# 422 "/usr/include/c++/5/cmath" 3
inline float pow(float __x, int __n)
# 423 "/usr/include/c++/5/cmath" 3
{ return __builtin_powif(__x, __n); }
# 426 "/usr/include/c++/5/cmath" 3
inline long double pow(long double __x, int __n)
# 427 "/usr/include/c++/5/cmath" 3
{ return __builtin_powil(__x, __n); }
# 431 "/usr/include/c++/5/cmath" 3
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type
# 434 "/usr/include/c++/5/cmath" 3
pow(_Tp __x, _Up __y)
# 435 "/usr/include/c++/5/cmath" 3
{
# 436 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type;
# 437 "/usr/include/c++/5/cmath" 3
return pow((__type)__x, (__type)__y);
# 438 "/usr/include/c++/5/cmath" 3
}
# 440 "/usr/include/c++/5/cmath" 3
using ::sin;
# 444 "/usr/include/c++/5/cmath" 3
inline float sin(float __x)
# 445 "/usr/include/c++/5/cmath" 3
{ return __builtin_sinf(__x); }
# 448 "/usr/include/c++/5/cmath" 3
inline long double sin(long double __x)
# 449 "/usr/include/c++/5/cmath" 3
{ return __builtin_sinl(__x); }
# 452 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 456 "/usr/include/c++/5/cmath" 3
sin(_Tp __x)
# 457 "/usr/include/c++/5/cmath" 3
{ return __builtin_sin(__x); }
# 459 "/usr/include/c++/5/cmath" 3
using ::sinh;
# 463 "/usr/include/c++/5/cmath" 3
inline float sinh(float __x)
# 464 "/usr/include/c++/5/cmath" 3
{ return __builtin_sinhf(__x); }
# 467 "/usr/include/c++/5/cmath" 3
inline long double sinh(long double __x)
# 468 "/usr/include/c++/5/cmath" 3
{ return __builtin_sinhl(__x); }
# 471 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 475 "/usr/include/c++/5/cmath" 3
sinh(_Tp __x)
# 476 "/usr/include/c++/5/cmath" 3
{ return __builtin_sinh(__x); }
# 478 "/usr/include/c++/5/cmath" 3
using ::sqrt;
# 482 "/usr/include/c++/5/cmath" 3
inline float sqrt(float __x)
# 483 "/usr/include/c++/5/cmath" 3
{ return __builtin_sqrtf(__x); }
# 486 "/usr/include/c++/5/cmath" 3
inline long double sqrt(long double __x)
# 487 "/usr/include/c++/5/cmath" 3
{ return __builtin_sqrtl(__x); }
# 490 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 494 "/usr/include/c++/5/cmath" 3
sqrt(_Tp __x)
# 495 "/usr/include/c++/5/cmath" 3
{ return __builtin_sqrt(__x); }
# 497 "/usr/include/c++/5/cmath" 3
using ::tan;
# 501 "/usr/include/c++/5/cmath" 3
inline float tan(float __x)
# 502 "/usr/include/c++/5/cmath" 3
{ return __builtin_tanf(__x); }
# 505 "/usr/include/c++/5/cmath" 3
inline long double tan(long double __x)
# 506 "/usr/include/c++/5/cmath" 3
{ return __builtin_tanl(__x); }
# 509 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 513 "/usr/include/c++/5/cmath" 3
tan(_Tp __x)
# 514 "/usr/include/c++/5/cmath" 3
{ return __builtin_tan(__x); }
# 516 "/usr/include/c++/5/cmath" 3
using ::tanh;
# 520 "/usr/include/c++/5/cmath" 3
inline float tanh(float __x)
# 521 "/usr/include/c++/5/cmath" 3
{ return __builtin_tanhf(__x); }
# 524 "/usr/include/c++/5/cmath" 3
inline long double tanh(long double __x)
# 525 "/usr/include/c++/5/cmath" 3
{ return __builtin_tanhl(__x); }
# 528 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type
# 532 "/usr/include/c++/5/cmath" 3
tanh(_Tp __x)
# 533 "/usr/include/c++/5/cmath" 3
{ return __builtin_tanh(__x); }
# 536 "/usr/include/c++/5/cmath" 3
}
# 555 "/usr/include/c++/5/cmath" 3
namespace std __attribute((__visibility__("default"))) {
# 831 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 834 "/usr/include/c++/5/cmath" 3
fpclassify(_Tp __f)
# 835 "/usr/include/c++/5/cmath" 3
{
# 836 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 837 "/usr/include/c++/5/cmath" 3
return __builtin_fpclassify(0, 1, 4, 3, 2, (__type)__f);
# 839 "/usr/include/c++/5/cmath" 3
}
# 841 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 844 "/usr/include/c++/5/cmath" 3
isfinite(_Tp __f)
# 845 "/usr/include/c++/5/cmath" 3
{
# 846 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 847 "/usr/include/c++/5/cmath" 3
return __builtin_isfinite((__type)__f);
# 848 "/usr/include/c++/5/cmath" 3
}
# 850 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 853 "/usr/include/c++/5/cmath" 3
isinf(_Tp __f)
# 854 "/usr/include/c++/5/cmath" 3
{
# 855 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 856 "/usr/include/c++/5/cmath" 3
return __builtin_isinf((__type)__f);
# 857 "/usr/include/c++/5/cmath" 3
}
# 859 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 862 "/usr/include/c++/5/cmath" 3
isnan(_Tp __f)
# 863 "/usr/include/c++/5/cmath" 3
{
# 864 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 865 "/usr/include/c++/5/cmath" 3
return __builtin_isnan((__type)__f);
# 866 "/usr/include/c++/5/cmath" 3
}
# 868 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 871 "/usr/include/c++/5/cmath" 3
isnormal(_Tp __f)
# 872 "/usr/include/c++/5/cmath" 3
{
# 873 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 874 "/usr/include/c++/5/cmath" 3
return __builtin_isnormal((__type)__f);
# 875 "/usr/include/c++/5/cmath" 3
}
# 877 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 880 "/usr/include/c++/5/cmath" 3
signbit(_Tp __f)
# 881 "/usr/include/c++/5/cmath" 3
{
# 882 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 883 "/usr/include/c++/5/cmath" 3
return (sizeof(__type) == sizeof(float)) ? __builtin_signbitf((__type)__f) : ((sizeof(__type) == sizeof(double)) ? __builtin_signbit((__type)__f) : __builtin_signbitl((__type)__f));
# 888 "/usr/include/c++/5/cmath" 3
}
# 890 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 893 "/usr/include/c++/5/cmath" 3
isgreater(_Tp __f1, _Tp __f2)
# 894 "/usr/include/c++/5/cmath" 3
{
# 895 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 896 "/usr/include/c++/5/cmath" 3
return __builtin_isgreater((__type)__f1, (__type)__f2);
# 897 "/usr/include/c++/5/cmath" 3
}
# 899 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 902 "/usr/include/c++/5/cmath" 3
isgreaterequal(_Tp __f1, _Tp __f2)
# 903 "/usr/include/c++/5/cmath" 3
{
# 904 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 905 "/usr/include/c++/5/cmath" 3
return __builtin_isgreaterequal((__type)__f1, (__type)__f2);
# 906 "/usr/include/c++/5/cmath" 3
}
# 908 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 911 "/usr/include/c++/5/cmath" 3
isless(_Tp __f1, _Tp __f2)
# 912 "/usr/include/c++/5/cmath" 3
{
# 913 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 914 "/usr/include/c++/5/cmath" 3
return __builtin_isless((__type)__f1, (__type)__f2);
# 915 "/usr/include/c++/5/cmath" 3
}
# 917 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 920 "/usr/include/c++/5/cmath" 3
islessequal(_Tp __f1, _Tp __f2)
# 921 "/usr/include/c++/5/cmath" 3
{
# 922 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 923 "/usr/include/c++/5/cmath" 3
return __builtin_islessequal((__type)__f1, (__type)__f2);
# 924 "/usr/include/c++/5/cmath" 3
}
# 926 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 929 "/usr/include/c++/5/cmath" 3
islessgreater(_Tp __f1, _Tp __f2)
# 930 "/usr/include/c++/5/cmath" 3
{
# 931 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 932 "/usr/include/c++/5/cmath" 3
return __builtin_islessgreater((__type)__f1, (__type)__f2);
# 933 "/usr/include/c++/5/cmath" 3
}
# 935 "/usr/include/c++/5/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type
# 938 "/usr/include/c++/5/cmath" 3
isunordered(_Tp __f1, _Tp __f2)
# 939 "/usr/include/c++/5/cmath" 3
{
# 940 "/usr/include/c++/5/cmath" 3
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type;
# 941 "/usr/include/c++/5/cmath" 3
return __builtin_isunordered((__type)__f1, (__type)__f2);
# 942 "/usr/include/c++/5/cmath" 3
}
# 947 "/usr/include/c++/5/cmath" 3
}
# 114 "/usr/include/c++/5/cstdlib" 3
namespace std __attribute((__visibility__("default"))) {
# 118 "/usr/include/c++/5/cstdlib" 3
using ::div_t;
# 119 "/usr/include/c++/5/cstdlib" 3
using ::ldiv_t;
# 121 "/usr/include/c++/5/cstdlib" 3
using ::abort;
# 122 "/usr/include/c++/5/cstdlib" 3
using ::abs;
# 123 "/usr/include/c++/5/cstdlib" 3
using ::atexit;
# 129 "/usr/include/c++/5/cstdlib" 3
using ::atof;
# 130 "/usr/include/c++/5/cstdlib" 3
using ::atoi;
# 131 "/usr/include/c++/5/cstdlib" 3
using ::atol;
# 132 "/usr/include/c++/5/cstdlib" 3
using ::bsearch;
# 133 "/usr/include/c++/5/cstdlib" 3
using ::calloc;
# 134 "/usr/include/c++/5/cstdlib" 3
using ::div;
# 135 "/usr/include/c++/5/cstdlib" 3
using ::exit;
# 136 "/usr/include/c++/5/cstdlib" 3
using ::free;
# 137 "/usr/include/c++/5/cstdlib" 3
using ::getenv;
# 138 "/usr/include/c++/5/cstdlib" 3
using ::labs;
# 139 "/usr/include/c++/5/cstdlib" 3
using ::ldiv;
# 140 "/usr/include/c++/5/cstdlib" 3
using ::malloc;
# 142 "/usr/include/c++/5/cstdlib" 3
using ::mblen;
# 143 "/usr/include/c++/5/cstdlib" 3
using ::mbstowcs;
# 144 "/usr/include/c++/5/cstdlib" 3
using ::mbtowc;
# 146 "/usr/include/c++/5/cstdlib" 3
using ::qsort;
# 152 "/usr/include/c++/5/cstdlib" 3
using ::rand;
# 153 "/usr/include/c++/5/cstdlib" 3
using ::realloc;
# 154 "/usr/include/c++/5/cstdlib" 3
using ::srand;
# 155 "/usr/include/c++/5/cstdlib" 3
using ::strtod;
# 156 "/usr/include/c++/5/cstdlib" 3
using ::strtol;
# 157 "/usr/include/c++/5/cstdlib" 3
using ::strtoul;
# 158 "/usr/include/c++/5/cstdlib" 3
using ::system;
# 160 "/usr/include/c++/5/cstdlib" 3
using ::wcstombs;
# 161 "/usr/include/c++/5/cstdlib" 3
using ::wctomb;
# 166 "/usr/include/c++/5/cstdlib" 3
inline long abs(long __i) { return __builtin_labs(__i); }
# 169 "/usr/include/c++/5/cstdlib" 3
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
# 174 "/usr/include/c++/5/cstdlib" 3
inline long long abs(long long __x) { return __builtin_llabs(__x); }
# 179 "/usr/include/c++/5/cstdlib" 3
inline __int128_t abs(__int128_t __x) { return (__x >= (0)) ? __x : (-__x); }
# 196 "/usr/include/c++/5/cstdlib" 3
}
# 209 "/usr/include/c++/5/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 214 "/usr/include/c++/5/cstdlib" 3
using ::lldiv_t;
# 220 "/usr/include/c++/5/cstdlib" 3
using ::_Exit;
# 224 "/usr/include/c++/5/cstdlib" 3
using ::llabs;
# 227 "/usr/include/c++/5/cstdlib" 3
inline lldiv_t div(long long __n, long long __d)
# 228 "/usr/include/c++/5/cstdlib" 3
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; }
# 230 "/usr/include/c++/5/cstdlib" 3
using ::lldiv;
# 241 "/usr/include/c++/5/cstdlib" 3
using ::atoll;
# 242 "/usr/include/c++/5/cstdlib" 3
using ::strtoll;
# 243 "/usr/include/c++/5/cstdlib" 3
using ::strtoull;
# 245 "/usr/include/c++/5/cstdlib" 3
using ::strtof;
# 246 "/usr/include/c++/5/cstdlib" 3
using ::strtold;
# 249 "/usr/include/c++/5/cstdlib" 3
}
# 251 "/usr/include/c++/5/cstdlib" 3
namespace std {
# 254 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::lldiv_t;
# 256 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::_Exit;
# 258 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::llabs;
# 259 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::div;
# 260 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::lldiv;
# 262 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::atoll;
# 263 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::strtof;
# 264 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::strtoll;
# 265 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::strtoull;
# 266 "/usr/include/c++/5/cstdlib" 3
using __gnu_cxx::strtold;
# 267 "/usr/include/c++/5/cstdlib" 3
}
# 8925 "/usr/local/cuda/include/math_functions.h"

# 8925 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int signbit(float x);
# 8929 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int signbit(double x);
# 8931 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int signbit(long double x);
# 8933 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isfinite(float x);
# 8937 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isfinite(double x);
# 8939 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isfinite(long double x);
# 8941 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isnan(float x);
# 8945 "/usr/local/cuda/include/math_functions.h"
extern "C" __attribute((always_inline)) inline int isnan(double x) throw();
# 8947 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isnan(long double x);
# 8949 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isinf(float x);
# 8953 "/usr/local/cuda/include/math_functions.h"
extern "C" __attribute((always_inline)) inline int isinf(double x) throw();
# 8955 "/usr/local/cuda/include/math_functions.h"
__attribute((always_inline)) inline int isinf(long double x);
# 9002 "/usr/local/cuda/include/math_functions.h"
namespace std {
# 9004 "/usr/local/cuda/include/math_functions.h"
template< class T> extern T __pow_helper(T, int);
# 9005 "/usr/local/cuda/include/math_functions.h"
template< class T> extern T __cmath_power(T, unsigned);
# 9006 "/usr/local/cuda/include/math_functions.h"
}
# 9008 "/usr/local/cuda/include/math_functions.h"
using std::abs;
# 9009 "/usr/local/cuda/include/math_functions.h"
using std::fabs;
# 9010 "/usr/local/cuda/include/math_functions.h"
using std::ceil;
# 9011 "/usr/local/cuda/include/math_functions.h"
using std::floor;
# 9012 "/usr/local/cuda/include/math_functions.h"
using std::sqrt;
# 9013 "/usr/local/cuda/include/math_functions.h"
using std::pow;
# 9014 "/usr/local/cuda/include/math_functions.h"
using std::log;
# 9015 "/usr/local/cuda/include/math_functions.h"
using std::log10;
# 9016 "/usr/local/cuda/include/math_functions.h"
using std::fmod;
# 9017 "/usr/local/cuda/include/math_functions.h"
using std::modf;
# 9018 "/usr/local/cuda/include/math_functions.h"
using std::exp;
# 9019 "/usr/local/cuda/include/math_functions.h"
using std::frexp;
# 9020 "/usr/local/cuda/include/math_functions.h"
using std::ldexp;
# 9021 "/usr/local/cuda/include/math_functions.h"
using std::asin;
# 9022 "/usr/local/cuda/include/math_functions.h"
using std::sin;
# 9023 "/usr/local/cuda/include/math_functions.h"
using std::sinh;
# 9024 "/usr/local/cuda/include/math_functions.h"
using std::acos;
# 9025 "/usr/local/cuda/include/math_functions.h"
using std::cos;
# 9026 "/usr/local/cuda/include/math_functions.h"
using std::cosh;
# 9027 "/usr/local/cuda/include/math_functions.h"
using std::atan;
# 9028 "/usr/local/cuda/include/math_functions.h"
using std::atan2;
# 9029 "/usr/local/cuda/include/math_functions.h"
using std::tan;
# 9030 "/usr/local/cuda/include/math_functions.h"
using std::tanh;
# 9393 "/usr/local/cuda/include/math_functions.h"
namespace std {
# 9406 "/usr/local/cuda/include/math_functions.h"
extern inline long long abs(long long);
# 9412 "/usr/local/cuda/include/math_functions.h"
extern inline long abs(long);
# 9413 "/usr/local/cuda/include/math_functions.h"
extern inline float abs(float);
# 9414 "/usr/local/cuda/include/math_functions.h"
extern inline double abs(double);
# 9415 "/usr/local/cuda/include/math_functions.h"
extern inline float fabs(float);
# 9416 "/usr/local/cuda/include/math_functions.h"
extern inline float ceil(float);
# 9417 "/usr/local/cuda/include/math_functions.h"
extern inline float floor(float);
# 9418 "/usr/local/cuda/include/math_functions.h"
extern inline float sqrt(float);
# 9419 "/usr/local/cuda/include/math_functions.h"
extern inline float pow(float, float);
# 9428 "/usr/local/cuda/include/math_functions.h"
extern inline float pow(float, int);
# 9429 "/usr/local/cuda/include/math_functions.h"
extern inline double pow(double, int);
# 9434 "/usr/local/cuda/include/math_functions.h"
extern inline float log(float);
# 9435 "/usr/local/cuda/include/math_functions.h"
extern inline float log10(float);
# 9436 "/usr/local/cuda/include/math_functions.h"
extern inline float fmod(float, float);
# 9437 "/usr/local/cuda/include/math_functions.h"
extern inline float modf(float, float *);
# 9438 "/usr/local/cuda/include/math_functions.h"
extern inline float exp(float);
# 9439 "/usr/local/cuda/include/math_functions.h"
extern inline float frexp(float, int *);
# 9440 "/usr/local/cuda/include/math_functions.h"
extern inline float ldexp(float, int);
# 9441 "/usr/local/cuda/include/math_functions.h"
extern inline float asin(float);
# 9442 "/usr/local/cuda/include/math_functions.h"
extern inline float sin(float);
# 9443 "/usr/local/cuda/include/math_functions.h"
extern inline float sinh(float);
# 9444 "/usr/local/cuda/include/math_functions.h"
extern inline float acos(float);
# 9445 "/usr/local/cuda/include/math_functions.h"
extern inline float cos(float);
# 9446 "/usr/local/cuda/include/math_functions.h"
extern inline float cosh(float);
# 9447 "/usr/local/cuda/include/math_functions.h"
extern inline float atan(float);
# 9448 "/usr/local/cuda/include/math_functions.h"
extern inline float atan2(float, float);
# 9449 "/usr/local/cuda/include/math_functions.h"
extern inline float tan(float);
# 9450 "/usr/local/cuda/include/math_functions.h"
extern inline float tanh(float);
# 9518 "/usr/local/cuda/include/math_functions.h"
}
# 9609 "/usr/local/cuda/include/math_functions.h"
static inline float logb(float a);
# 9611 "/usr/local/cuda/include/math_functions.h"
static inline int ilogb(float a);
# 9613 "/usr/local/cuda/include/math_functions.h"
static inline float scalbn(float a, int b);
# 9615 "/usr/local/cuda/include/math_functions.h"
static inline float scalbln(float a, long b);
# 9617 "/usr/local/cuda/include/math_functions.h"
static inline float exp2(float a);
# 9619 "/usr/local/cuda/include/math_functions.h"
static inline float expm1(float a);
# 9621 "/usr/local/cuda/include/math_functions.h"
static inline float log2(float a);
# 9623 "/usr/local/cuda/include/math_functions.h"
static inline float log1p(float a);
# 9625 "/usr/local/cuda/include/math_functions.h"
static inline float acosh(float a);
# 9627 "/usr/local/cuda/include/math_functions.h"
static inline float asinh(float a);
# 9629 "/usr/local/cuda/include/math_functions.h"
static inline float atanh(float a);
# 9631 "/usr/local/cuda/include/math_functions.h"
static inline float hypot(float a, float b);
# 9633 "/usr/local/cuda/include/math_functions.h"
static inline float norm3d(float a, float b, float c);
# 9635 "/usr/local/cuda/include/math_functions.h"
static inline float norm4d(float a, float b, float c, float d);
# 9637 "/usr/local/cuda/include/math_functions.h"
static inline float cbrt(float a);
# 9639 "/usr/local/cuda/include/math_functions.h"
static inline float erf(float a);
# 9641 "/usr/local/cuda/include/math_functions.h"
static inline float erfc(float a);
# 9643 "/usr/local/cuda/include/math_functions.h"
static inline float lgamma(float a);
# 9645 "/usr/local/cuda/include/math_functions.h"
static inline float tgamma(float a);
# 9647 "/usr/local/cuda/include/math_functions.h"
static inline float copysign(float a, float b);
# 9649 "/usr/local/cuda/include/math_functions.h"
static inline float nextafter(float a, float b);
# 9651 "/usr/local/cuda/include/math_functions.h"
static inline float remainder(float a, float b);
# 9653 "/usr/local/cuda/include/math_functions.h"
static inline float remquo(float a, float b, int * quo);
# 9655 "/usr/local/cuda/include/math_functions.h"
static inline float round(float a);
# 9657 "/usr/local/cuda/include/math_functions.h"
static inline long lround(float a);
# 9659 "/usr/local/cuda/include/math_functions.h"
static inline long long llround(float a);
# 9661 "/usr/local/cuda/include/math_functions.h"
static inline float trunc(float a);
# 9663 "/usr/local/cuda/include/math_functions.h"
static inline float rint(float a);
# 9665 "/usr/local/cuda/include/math_functions.h"
static inline long lrint(float a);
# 9667 "/usr/local/cuda/include/math_functions.h"
static inline long long llrint(float a);
# 9669 "/usr/local/cuda/include/math_functions.h"
static inline float nearbyint(float a);
# 9671 "/usr/local/cuda/include/math_functions.h"
static inline float fdim(float a, float b);
# 9673 "/usr/local/cuda/include/math_functions.h"
static inline float fma(float a, float b, float c);
# 9675 "/usr/local/cuda/include/math_functions.h"
static inline float fmax(float a, float b);
# 9677 "/usr/local/cuda/include/math_functions.h"
static inline float fmin(float a, float b);
# 9718 "/usr/local/cuda/include/math_functions.h"
static inline float exp10(float a);
# 9720 "/usr/local/cuda/include/math_functions.h"
static inline float rsqrt(float a);
# 9722 "/usr/local/cuda/include/math_functions.h"
static inline float rcbrt(float a);
# 9724 "/usr/local/cuda/include/math_functions.h"
static inline float sinpi(float a);
# 9726 "/usr/local/cuda/include/math_functions.h"
static inline float cospi(float a);
# 9728 "/usr/local/cuda/include/math_functions.h"
static inline void sincospi(float a, float * sptr, float * cptr);
# 9730 "/usr/local/cuda/include/math_functions.h"
static inline void sincos(float a, float * sptr, float * cptr);
# 9732 "/usr/local/cuda/include/math_functions.h"
static inline float j0(float a);
# 9734 "/usr/local/cuda/include/math_functions.h"
static inline float j1(float a);
# 9736 "/usr/local/cuda/include/math_functions.h"
static inline float jn(int n, float a);
# 9738 "/usr/local/cuda/include/math_functions.h"
static inline float y0(float a);
# 9740 "/usr/local/cuda/include/math_functions.h"
static inline float y1(float a);
# 9742 "/usr/local/cuda/include/math_functions.h"
static inline float yn(int n, float a);
# 9744 "/usr/local/cuda/include/math_functions.h"
static inline float cyl_bessel_i0(float a);
# 9746 "/usr/local/cuda/include/math_functions.h"
static inline float cyl_bessel_i1(float a);
# 9748 "/usr/local/cuda/include/math_functions.h"
static inline float erfinv(float a);
# 9750 "/usr/local/cuda/include/math_functions.h"
static inline float erfcinv(float a);
# 9752 "/usr/local/cuda/include/math_functions.h"
static inline float normcdfinv(float a);
# 9754 "/usr/local/cuda/include/math_functions.h"
static inline float normcdf(float a);
# 9756 "/usr/local/cuda/include/math_functions.h"
static inline float erfcx(float a);
# 9758 "/usr/local/cuda/include/math_functions.h"
static inline double copysign(double a, float b);
# 9760 "/usr/local/cuda/include/math_functions.h"
static inline float copysign(float a, double b);
# 9762 "/usr/local/cuda/include/math_functions.h"
static inline unsigned min(unsigned a, unsigned b);
# 9764 "/usr/local/cuda/include/math_functions.h"
static inline unsigned min(int a, unsigned b);
# 9766 "/usr/local/cuda/include/math_functions.h"
static inline unsigned min(unsigned a, int b);
# 9768 "/usr/local/cuda/include/math_functions.h"
static inline long min(long a, long b);
# 9770 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long min(unsigned long a, unsigned long b);
# 9772 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long min(long a, unsigned long b);
# 9774 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long min(unsigned long a, long b);
# 9776 "/usr/local/cuda/include/math_functions.h"
static inline long long min(long long a, long long b);
# 9778 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long min(unsigned long long a, unsigned long long b);
# 9780 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long min(long long a, unsigned long long b);
# 9782 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long min(unsigned long long a, long long b);
# 9784 "/usr/local/cuda/include/math_functions.h"
static inline float min(float a, float b);
# 9786 "/usr/local/cuda/include/math_functions.h"
static inline double min(double a, double b);
# 9788 "/usr/local/cuda/include/math_functions.h"
static inline double min(float a, double b);
# 9790 "/usr/local/cuda/include/math_functions.h"
static inline double min(double a, float b);
# 9792 "/usr/local/cuda/include/math_functions.h"
static inline unsigned max(unsigned a, unsigned b);
# 9794 "/usr/local/cuda/include/math_functions.h"
static inline unsigned max(int a, unsigned b);
# 9796 "/usr/local/cuda/include/math_functions.h"
static inline unsigned max(unsigned a, int b);
# 9798 "/usr/local/cuda/include/math_functions.h"
static inline long max(long a, long b);
# 9800 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long max(unsigned long a, unsigned long b);
# 9802 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long max(long a, unsigned long b);
# 9804 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long max(unsigned long a, long b);
# 9806 "/usr/local/cuda/include/math_functions.h"
static inline long long max(long long a, long long b);
# 9808 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long max(unsigned long long a, unsigned long long b);
# 9810 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long max(long long a, unsigned long long b);
# 9812 "/usr/local/cuda/include/math_functions.h"
static inline unsigned long long max(unsigned long long a, long long b);
# 9814 "/usr/local/cuda/include/math_functions.h"
static inline float max(float a, float b);
# 9816 "/usr/local/cuda/include/math_functions.h"
static inline double max(double a, double b);
# 9818 "/usr/local/cuda/include/math_functions.h"
static inline double max(float a, double b);
# 9820 "/usr/local/cuda/include/math_functions.h"
static inline double max(double a, float b);
# 248 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int signbit(float x) { return __signbitf(x); }
# 252 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int signbit(double x) { return __signbit(x); }
# 254 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int signbit(long double x) { return __signbitl(x); }
# 265 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(float x) { return __finitef(x); }
# 280 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(double x) { return __finite(x); }
# 293 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(long double x) { return __finitel(x); }
# 296 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isnan(float x) { return __isnanf(x); }
# 300 "/usr/local/cuda/include/math_functions.hpp"
extern "C" __attribute((always_inline)) inline int isnan(double x) throw() { return __isnan(x); }
# 302 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isnan(long double x) { return __isnanl(x); }
# 304 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isinf(float x) { return __isinff(x); }
# 308 "/usr/local/cuda/include/math_functions.hpp"
extern "C" __attribute((always_inline)) inline int isinf(double x) throw() { return __isinf(x); }
# 310 "/usr/local/cuda/include/math_functions.hpp"
__attribute((always_inline)) inline int isinf(long double x) { return __isinfl(x); }
# 503 "/usr/local/cuda/include/math_functions.hpp"
static inline float logb(float a)
# 504 "/usr/local/cuda/include/math_functions.hpp"
{
# 505 "/usr/local/cuda/include/math_functions.hpp"
return logbf(a);
# 506 "/usr/local/cuda/include/math_functions.hpp"
}
# 508 "/usr/local/cuda/include/math_functions.hpp"
static inline int ilogb(float a)
# 509 "/usr/local/cuda/include/math_functions.hpp"
{
# 510 "/usr/local/cuda/include/math_functions.hpp"
return ilogbf(a);
# 511 "/usr/local/cuda/include/math_functions.hpp"
}
# 513 "/usr/local/cuda/include/math_functions.hpp"
static inline float scalbn(float a, int b)
# 514 "/usr/local/cuda/include/math_functions.hpp"
{
# 515 "/usr/local/cuda/include/math_functions.hpp"
return scalbnf(a, b);
# 516 "/usr/local/cuda/include/math_functions.hpp"
}
# 518 "/usr/local/cuda/include/math_functions.hpp"
static inline float scalbln(float a, long b)
# 519 "/usr/local/cuda/include/math_functions.hpp"
{
# 520 "/usr/local/cuda/include/math_functions.hpp"
return scalblnf(a, b);
# 521 "/usr/local/cuda/include/math_functions.hpp"
}
# 523 "/usr/local/cuda/include/math_functions.hpp"
static inline float exp2(float a)
# 524 "/usr/local/cuda/include/math_functions.hpp"
{
# 525 "/usr/local/cuda/include/math_functions.hpp"
return exp2f(a);
# 526 "/usr/local/cuda/include/math_functions.hpp"
}
# 528 "/usr/local/cuda/include/math_functions.hpp"
static inline float expm1(float a)
# 529 "/usr/local/cuda/include/math_functions.hpp"
{
# 530 "/usr/local/cuda/include/math_functions.hpp"
return expm1f(a);
# 531 "/usr/local/cuda/include/math_functions.hpp"
}
# 533 "/usr/local/cuda/include/math_functions.hpp"
static inline float log2(float a)
# 534 "/usr/local/cuda/include/math_functions.hpp"
{
# 535 "/usr/local/cuda/include/math_functions.hpp"
return log2f(a);
# 536 "/usr/local/cuda/include/math_functions.hpp"
}
# 538 "/usr/local/cuda/include/math_functions.hpp"
static inline float log1p(float a)
# 539 "/usr/local/cuda/include/math_functions.hpp"
{
# 540 "/usr/local/cuda/include/math_functions.hpp"
return log1pf(a);
# 541 "/usr/local/cuda/include/math_functions.hpp"
}
# 543 "/usr/local/cuda/include/math_functions.hpp"
static inline float acosh(float a)
# 544 "/usr/local/cuda/include/math_functions.hpp"
{
# 545 "/usr/local/cuda/include/math_functions.hpp"
return acoshf(a);
# 546 "/usr/local/cuda/include/math_functions.hpp"
}
# 548 "/usr/local/cuda/include/math_functions.hpp"
static inline float asinh(float a)
# 549 "/usr/local/cuda/include/math_functions.hpp"
{
# 550 "/usr/local/cuda/include/math_functions.hpp"
return asinhf(a);
# 551 "/usr/local/cuda/include/math_functions.hpp"
}
# 553 "/usr/local/cuda/include/math_functions.hpp"
static inline float atanh(float a)
# 554 "/usr/local/cuda/include/math_functions.hpp"
{
# 555 "/usr/local/cuda/include/math_functions.hpp"
return atanhf(a);
# 556 "/usr/local/cuda/include/math_functions.hpp"
}
# 558 "/usr/local/cuda/include/math_functions.hpp"
static inline float hypot(float a, float b)
# 559 "/usr/local/cuda/include/math_functions.hpp"
{
# 560 "/usr/local/cuda/include/math_functions.hpp"
return hypotf(a, b);
# 561 "/usr/local/cuda/include/math_functions.hpp"
}
# 563 "/usr/local/cuda/include/math_functions.hpp"
static inline float norm3d(float a, float b, float c)
# 564 "/usr/local/cuda/include/math_functions.hpp"
{
# 565 "/usr/local/cuda/include/math_functions.hpp"
return norm3df(a, b, c);
# 566 "/usr/local/cuda/include/math_functions.hpp"
}
# 568 "/usr/local/cuda/include/math_functions.hpp"
static inline float norm4d(float a, float b, float c, float d)
# 569 "/usr/local/cuda/include/math_functions.hpp"
{
# 570 "/usr/local/cuda/include/math_functions.hpp"
return norm4df(a, b, c, d);
# 571 "/usr/local/cuda/include/math_functions.hpp"
}
# 573 "/usr/local/cuda/include/math_functions.hpp"
static inline float cbrt(float a)
# 574 "/usr/local/cuda/include/math_functions.hpp"
{
# 575 "/usr/local/cuda/include/math_functions.hpp"
return cbrtf(a);
# 576 "/usr/local/cuda/include/math_functions.hpp"
}
# 578 "/usr/local/cuda/include/math_functions.hpp"
static inline float erf(float a)
# 579 "/usr/local/cuda/include/math_functions.hpp"
{
# 580 "/usr/local/cuda/include/math_functions.hpp"
return erff(a);
# 581 "/usr/local/cuda/include/math_functions.hpp"
}
# 583 "/usr/local/cuda/include/math_functions.hpp"
static inline float erfc(float a)
# 584 "/usr/local/cuda/include/math_functions.hpp"
{
# 585 "/usr/local/cuda/include/math_functions.hpp"
return erfcf(a);
# 586 "/usr/local/cuda/include/math_functions.hpp"
}
# 588 "/usr/local/cuda/include/math_functions.hpp"
static inline float lgamma(float a)
# 589 "/usr/local/cuda/include/math_functions.hpp"
{
# 590 "/usr/local/cuda/include/math_functions.hpp"
return lgammaf(a);
# 591 "/usr/local/cuda/include/math_functions.hpp"
}
# 593 "/usr/local/cuda/include/math_functions.hpp"
static inline float tgamma(float a)
# 594 "/usr/local/cuda/include/math_functions.hpp"
{
# 595 "/usr/local/cuda/include/math_functions.hpp"
return tgammaf(a);
# 596 "/usr/local/cuda/include/math_functions.hpp"
}
# 598 "/usr/local/cuda/include/math_functions.hpp"
static inline float copysign(float a, float b)
# 599 "/usr/local/cuda/include/math_functions.hpp"
{
# 600 "/usr/local/cuda/include/math_functions.hpp"
return copysignf(a, b);
# 601 "/usr/local/cuda/include/math_functions.hpp"
}
# 603 "/usr/local/cuda/include/math_functions.hpp"
static inline float nextafter(float a, float b)
# 604 "/usr/local/cuda/include/math_functions.hpp"
{
# 605 "/usr/local/cuda/include/math_functions.hpp"
return nextafterf(a, b);
# 606 "/usr/local/cuda/include/math_functions.hpp"
}
# 608 "/usr/local/cuda/include/math_functions.hpp"
static inline float remainder(float a, float b)
# 609 "/usr/local/cuda/include/math_functions.hpp"
{
# 610 "/usr/local/cuda/include/math_functions.hpp"
return remainderf(a, b);
# 611 "/usr/local/cuda/include/math_functions.hpp"
}
# 613 "/usr/local/cuda/include/math_functions.hpp"
static inline float remquo(float a, float b, int *quo)
# 614 "/usr/local/cuda/include/math_functions.hpp"
{
# 615 "/usr/local/cuda/include/math_functions.hpp"
return remquof(a, b, quo);
# 616 "/usr/local/cuda/include/math_functions.hpp"
}
# 618 "/usr/local/cuda/include/math_functions.hpp"
static inline float round(float a)
# 619 "/usr/local/cuda/include/math_functions.hpp"
{
# 620 "/usr/local/cuda/include/math_functions.hpp"
return roundf(a);
# 621 "/usr/local/cuda/include/math_functions.hpp"
}
# 623 "/usr/local/cuda/include/math_functions.hpp"
static inline long lround(float a)
# 624 "/usr/local/cuda/include/math_functions.hpp"
{
# 625 "/usr/local/cuda/include/math_functions.hpp"
return lroundf(a);
# 626 "/usr/local/cuda/include/math_functions.hpp"
}
# 628 "/usr/local/cuda/include/math_functions.hpp"
static inline long long llround(float a)
# 629 "/usr/local/cuda/include/math_functions.hpp"
{
# 630 "/usr/local/cuda/include/math_functions.hpp"
return llroundf(a);
# 631 "/usr/local/cuda/include/math_functions.hpp"
}
# 633 "/usr/local/cuda/include/math_functions.hpp"
static inline float trunc(float a)
# 634 "/usr/local/cuda/include/math_functions.hpp"
{
# 635 "/usr/local/cuda/include/math_functions.hpp"
return truncf(a);
# 636 "/usr/local/cuda/include/math_functions.hpp"
}
# 638 "/usr/local/cuda/include/math_functions.hpp"
static inline float rint(float a)
# 639 "/usr/local/cuda/include/math_functions.hpp"
{
# 640 "/usr/local/cuda/include/math_functions.hpp"
return rintf(a);
# 641 "/usr/local/cuda/include/math_functions.hpp"
}
# 643 "/usr/local/cuda/include/math_functions.hpp"
static inline long lrint(float a)
# 644 "/usr/local/cuda/include/math_functions.hpp"
{
# 645 "/usr/local/cuda/include/math_functions.hpp"
return lrintf(a);
# 646 "/usr/local/cuda/include/math_functions.hpp"
}
# 648 "/usr/local/cuda/include/math_functions.hpp"
static inline long long llrint(float a)
# 649 "/usr/local/cuda/include/math_functions.hpp"
{
# 650 "/usr/local/cuda/include/math_functions.hpp"
return llrintf(a);
# 651 "/usr/local/cuda/include/math_functions.hpp"
}
# 653 "/usr/local/cuda/include/math_functions.hpp"
static inline float nearbyint(float a)
# 654 "/usr/local/cuda/include/math_functions.hpp"
{
# 655 "/usr/local/cuda/include/math_functions.hpp"
return nearbyintf(a);
# 656 "/usr/local/cuda/include/math_functions.hpp"
}
# 658 "/usr/local/cuda/include/math_functions.hpp"
static inline float fdim(float a, float b)
# 659 "/usr/local/cuda/include/math_functions.hpp"
{
# 660 "/usr/local/cuda/include/math_functions.hpp"
return fdimf(a, b);
# 661 "/usr/local/cuda/include/math_functions.hpp"
}
# 663 "/usr/local/cuda/include/math_functions.hpp"
static inline float fma(float a, float b, float c)
# 664 "/usr/local/cuda/include/math_functions.hpp"
{
# 665 "/usr/local/cuda/include/math_functions.hpp"
return fmaf(a, b, c);
# 666 "/usr/local/cuda/include/math_functions.hpp"
}
# 668 "/usr/local/cuda/include/math_functions.hpp"
static inline float fmax(float a, float b)
# 669 "/usr/local/cuda/include/math_functions.hpp"
{
# 670 "/usr/local/cuda/include/math_functions.hpp"
return fmaxf(a, b);
# 671 "/usr/local/cuda/include/math_functions.hpp"
}
# 673 "/usr/local/cuda/include/math_functions.hpp"
static inline float fmin(float a, float b)
# 674 "/usr/local/cuda/include/math_functions.hpp"
{
# 675 "/usr/local/cuda/include/math_functions.hpp"
return fminf(a, b);
# 676 "/usr/local/cuda/include/math_functions.hpp"
}
# 681 "/usr/local/cuda/include/math_functions.hpp"
static inline float exp10(float a)
# 682 "/usr/local/cuda/include/math_functions.hpp"
{
# 683 "/usr/local/cuda/include/math_functions.hpp"
return exp10f(a);
# 684 "/usr/local/cuda/include/math_functions.hpp"
}
# 686 "/usr/local/cuda/include/math_functions.hpp"
static inline float rsqrt(float a)
# 687 "/usr/local/cuda/include/math_functions.hpp"
{
# 688 "/usr/local/cuda/include/math_functions.hpp"
return rsqrtf(a);
# 689 "/usr/local/cuda/include/math_functions.hpp"
}
# 691 "/usr/local/cuda/include/math_functions.hpp"
static inline float rcbrt(float a)
# 692 "/usr/local/cuda/include/math_functions.hpp"
{
# 693 "/usr/local/cuda/include/math_functions.hpp"
return rcbrtf(a);
# 694 "/usr/local/cuda/include/math_functions.hpp"
}
# 696 "/usr/local/cuda/include/math_functions.hpp"
static inline float sinpi(float a)
# 697 "/usr/local/cuda/include/math_functions.hpp"
{
# 698 "/usr/local/cuda/include/math_functions.hpp"
return sinpif(a);
# 699 "/usr/local/cuda/include/math_functions.hpp"
}
# 701 "/usr/local/cuda/include/math_functions.hpp"
static inline float cospi(float a)
# 702 "/usr/local/cuda/include/math_functions.hpp"
{
# 703 "/usr/local/cuda/include/math_functions.hpp"
return cospif(a);
# 704 "/usr/local/cuda/include/math_functions.hpp"
}
# 706 "/usr/local/cuda/include/math_functions.hpp"
static inline void sincospi(float a, float *sptr, float *cptr)
# 707 "/usr/local/cuda/include/math_functions.hpp"
{
# 708 "/usr/local/cuda/include/math_functions.hpp"
sincospif(a, sptr, cptr);
# 709 "/usr/local/cuda/include/math_functions.hpp"
}
# 711 "/usr/local/cuda/include/math_functions.hpp"
static inline void sincos(float a, float *sptr, float *cptr)
# 712 "/usr/local/cuda/include/math_functions.hpp"
{
# 713 "/usr/local/cuda/include/math_functions.hpp"
sincosf(a, sptr, cptr);
# 714 "/usr/local/cuda/include/math_functions.hpp"
}
# 716 "/usr/local/cuda/include/math_functions.hpp"
static inline float j0(float a)
# 717 "/usr/local/cuda/include/math_functions.hpp"
{
# 718 "/usr/local/cuda/include/math_functions.hpp"
return j0f(a);
# 719 "/usr/local/cuda/include/math_functions.hpp"
}
# 721 "/usr/local/cuda/include/math_functions.hpp"
static inline float j1(float a)
# 722 "/usr/local/cuda/include/math_functions.hpp"
{
# 723 "/usr/local/cuda/include/math_functions.hpp"
return j1f(a);
# 724 "/usr/local/cuda/include/math_functions.hpp"
}
# 726 "/usr/local/cuda/include/math_functions.hpp"
static inline float jn(int n, float a)
# 727 "/usr/local/cuda/include/math_functions.hpp"
{
# 728 "/usr/local/cuda/include/math_functions.hpp"
return jnf(n, a);
# 729 "/usr/local/cuda/include/math_functions.hpp"
}
# 731 "/usr/local/cuda/include/math_functions.hpp"
static inline float y0(float a)
# 732 "/usr/local/cuda/include/math_functions.hpp"
{
# 733 "/usr/local/cuda/include/math_functions.hpp"
return y0f(a);
# 734 "/usr/local/cuda/include/math_functions.hpp"
}
# 736 "/usr/local/cuda/include/math_functions.hpp"
static inline float y1(float a)
# 737 "/usr/local/cuda/include/math_functions.hpp"
{
# 738 "/usr/local/cuda/include/math_functions.hpp"
return y1f(a);
# 739 "/usr/local/cuda/include/math_functions.hpp"
}
# 741 "/usr/local/cuda/include/math_functions.hpp"
static inline float yn(int n, float a)
# 742 "/usr/local/cuda/include/math_functions.hpp"
{
# 743 "/usr/local/cuda/include/math_functions.hpp"
return ynf(n, a);
# 744 "/usr/local/cuda/include/math_functions.hpp"
}
# 746 "/usr/local/cuda/include/math_functions.hpp"
static inline float cyl_bessel_i0(float a)
# 747 "/usr/local/cuda/include/math_functions.hpp"
{
# 748 "/usr/local/cuda/include/math_functions.hpp"
return cyl_bessel_i0f(a);
# 749 "/usr/local/cuda/include/math_functions.hpp"
}
# 751 "/usr/local/cuda/include/math_functions.hpp"
static inline float cyl_bessel_i1(float a)
# 752 "/usr/local/cuda/include/math_functions.hpp"
{
# 753 "/usr/local/cuda/include/math_functions.hpp"
return cyl_bessel_i1f(a);
# 754 "/usr/local/cuda/include/math_functions.hpp"
}
# 756 "/usr/local/cuda/include/math_functions.hpp"
static inline float erfinv(float a)
# 757 "/usr/local/cuda/include/math_functions.hpp"
{
# 758 "/usr/local/cuda/include/math_functions.hpp"
return erfinvf(a);
# 759 "/usr/local/cuda/include/math_functions.hpp"
}
# 761 "/usr/local/cuda/include/math_functions.hpp"
static inline float erfcinv(float a)
# 762 "/usr/local/cuda/include/math_functions.hpp"
{
# 763 "/usr/local/cuda/include/math_functions.hpp"
return erfcinvf(a);
# 764 "/usr/local/cuda/include/math_functions.hpp"
}
# 766 "/usr/local/cuda/include/math_functions.hpp"
static inline float normcdfinv(float a)
# 767 "/usr/local/cuda/include/math_functions.hpp"
{
# 768 "/usr/local/cuda/include/math_functions.hpp"
return normcdfinvf(a);
# 769 "/usr/local/cuda/include/math_functions.hpp"
}
# 771 "/usr/local/cuda/include/math_functions.hpp"
static inline float normcdf(float a)
# 772 "/usr/local/cuda/include/math_functions.hpp"
{
# 773 "/usr/local/cuda/include/math_functions.hpp"
return normcdff(a);
# 774 "/usr/local/cuda/include/math_functions.hpp"
}
# 776 "/usr/local/cuda/include/math_functions.hpp"
static inline float erfcx(float a)
# 777 "/usr/local/cuda/include/math_functions.hpp"
{
# 778 "/usr/local/cuda/include/math_functions.hpp"
return erfcxf(a);
# 779 "/usr/local/cuda/include/math_functions.hpp"
}
# 781 "/usr/local/cuda/include/math_functions.hpp"
static inline double copysign(double a, float b)
# 782 "/usr/local/cuda/include/math_functions.hpp"
{
# 783 "/usr/local/cuda/include/math_functions.hpp"
return copysign(a, (double)b);
# 784 "/usr/local/cuda/include/math_functions.hpp"
}
# 786 "/usr/local/cuda/include/math_functions.hpp"
static inline float copysign(float a, double b)
# 787 "/usr/local/cuda/include/math_functions.hpp"
{
# 788 "/usr/local/cuda/include/math_functions.hpp"
return copysignf(a, (float)b);
# 789 "/usr/local/cuda/include/math_functions.hpp"
}
# 791 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned min(unsigned a, unsigned b)
# 792 "/usr/local/cuda/include/math_functions.hpp"
{
# 793 "/usr/local/cuda/include/math_functions.hpp"
return umin(a, b);
# 794 "/usr/local/cuda/include/math_functions.hpp"
}
# 796 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned min(int a, unsigned b)
# 797 "/usr/local/cuda/include/math_functions.hpp"
{
# 798 "/usr/local/cuda/include/math_functions.hpp"
return umin((unsigned)a, b);
# 799 "/usr/local/cuda/include/math_functions.hpp"
}
# 801 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned min(unsigned a, int b)
# 802 "/usr/local/cuda/include/math_functions.hpp"
{
# 803 "/usr/local/cuda/include/math_functions.hpp"
return umin(a, (unsigned)b);
# 804 "/usr/local/cuda/include/math_functions.hpp"
}
# 806 "/usr/local/cuda/include/math_functions.hpp"
static inline long min(long a, long b)
# 807 "/usr/local/cuda/include/math_functions.hpp"
{
# 813 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(long) == sizeof(int)) {
# 817 "/usr/local/cuda/include/math_functions.hpp"
return (long)min((int)a, (int)b);
# 818 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 819 "/usr/local/cuda/include/math_functions.hpp"
return (long)llmin((long long)a, (long long)b);
# 820 "/usr/local/cuda/include/math_functions.hpp"
}
# 821 "/usr/local/cuda/include/math_functions.hpp"
}
# 823 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long min(unsigned long a, unsigned long b)
# 824 "/usr/local/cuda/include/math_functions.hpp"
{
# 828 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 832 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b);
# 833 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 834 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b);
# 835 "/usr/local/cuda/include/math_functions.hpp"
}
# 836 "/usr/local/cuda/include/math_functions.hpp"
}
# 838 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long min(long a, unsigned long b)
# 839 "/usr/local/cuda/include/math_functions.hpp"
{
# 843 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 847 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b);
# 848 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 849 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b);
# 850 "/usr/local/cuda/include/math_functions.hpp"
}
# 851 "/usr/local/cuda/include/math_functions.hpp"
}
# 853 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long min(unsigned long a, long b)
# 854 "/usr/local/cuda/include/math_functions.hpp"
{
# 858 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 862 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b);
# 863 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 864 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b);
# 865 "/usr/local/cuda/include/math_functions.hpp"
}
# 866 "/usr/local/cuda/include/math_functions.hpp"
}
# 868 "/usr/local/cuda/include/math_functions.hpp"
static inline long long min(long long a, long long b)
# 869 "/usr/local/cuda/include/math_functions.hpp"
{
# 870 "/usr/local/cuda/include/math_functions.hpp"
return llmin(a, b);
# 871 "/usr/local/cuda/include/math_functions.hpp"
}
# 873 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long min(unsigned long long a, unsigned long long b)
# 874 "/usr/local/cuda/include/math_functions.hpp"
{
# 875 "/usr/local/cuda/include/math_functions.hpp"
return ullmin(a, b);
# 876 "/usr/local/cuda/include/math_functions.hpp"
}
# 878 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long min(long long a, unsigned long long b)
# 879 "/usr/local/cuda/include/math_functions.hpp"
{
# 880 "/usr/local/cuda/include/math_functions.hpp"
return ullmin((unsigned long long)a, b);
# 881 "/usr/local/cuda/include/math_functions.hpp"
}
# 883 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long min(unsigned long long a, long long b)
# 884 "/usr/local/cuda/include/math_functions.hpp"
{
# 885 "/usr/local/cuda/include/math_functions.hpp"
return ullmin(a, (unsigned long long)b);
# 886 "/usr/local/cuda/include/math_functions.hpp"
}
# 888 "/usr/local/cuda/include/math_functions.hpp"
static inline float min(float a, float b)
# 889 "/usr/local/cuda/include/math_functions.hpp"
{
# 890 "/usr/local/cuda/include/math_functions.hpp"
return fminf(a, b);
# 891 "/usr/local/cuda/include/math_functions.hpp"
}
# 893 "/usr/local/cuda/include/math_functions.hpp"
static inline double min(double a, double b)
# 894 "/usr/local/cuda/include/math_functions.hpp"
{
# 895 "/usr/local/cuda/include/math_functions.hpp"
return fmin(a, b);
# 896 "/usr/local/cuda/include/math_functions.hpp"
}
# 898 "/usr/local/cuda/include/math_functions.hpp"
static inline double min(float a, double b)
# 899 "/usr/local/cuda/include/math_functions.hpp"
{
# 900 "/usr/local/cuda/include/math_functions.hpp"
return fmin((double)a, b);
# 901 "/usr/local/cuda/include/math_functions.hpp"
}
# 903 "/usr/local/cuda/include/math_functions.hpp"
static inline double min(double a, float b)
# 904 "/usr/local/cuda/include/math_functions.hpp"
{
# 905 "/usr/local/cuda/include/math_functions.hpp"
return fmin(a, (double)b);
# 906 "/usr/local/cuda/include/math_functions.hpp"
}
# 908 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned max(unsigned a, unsigned b)
# 909 "/usr/local/cuda/include/math_functions.hpp"
{
# 910 "/usr/local/cuda/include/math_functions.hpp"
return umax(a, b);
# 911 "/usr/local/cuda/include/math_functions.hpp"
}
# 913 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned max(int a, unsigned b)
# 914 "/usr/local/cuda/include/math_functions.hpp"
{
# 915 "/usr/local/cuda/include/math_functions.hpp"
return umax((unsigned)a, b);
# 916 "/usr/local/cuda/include/math_functions.hpp"
}
# 918 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned max(unsigned a, int b)
# 919 "/usr/local/cuda/include/math_functions.hpp"
{
# 920 "/usr/local/cuda/include/math_functions.hpp"
return umax(a, (unsigned)b);
# 921 "/usr/local/cuda/include/math_functions.hpp"
}
# 923 "/usr/local/cuda/include/math_functions.hpp"
static inline long max(long a, long b)
# 924 "/usr/local/cuda/include/math_functions.hpp"
{
# 929 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(long) == sizeof(int)) {
# 933 "/usr/local/cuda/include/math_functions.hpp"
return (long)max((int)a, (int)b);
# 934 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 935 "/usr/local/cuda/include/math_functions.hpp"
return (long)llmax((long long)a, (long long)b);
# 936 "/usr/local/cuda/include/math_functions.hpp"
}
# 937 "/usr/local/cuda/include/math_functions.hpp"
}
# 939 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long max(unsigned long a, unsigned long b)
# 940 "/usr/local/cuda/include/math_functions.hpp"
{
# 944 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 948 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b);
# 949 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 950 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b);
# 951 "/usr/local/cuda/include/math_functions.hpp"
}
# 952 "/usr/local/cuda/include/math_functions.hpp"
}
# 954 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long max(long a, unsigned long b)
# 955 "/usr/local/cuda/include/math_functions.hpp"
{
# 959 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 963 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b);
# 964 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 965 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b);
# 966 "/usr/local/cuda/include/math_functions.hpp"
}
# 967 "/usr/local/cuda/include/math_functions.hpp"
}
# 969 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long max(unsigned long a, long b)
# 970 "/usr/local/cuda/include/math_functions.hpp"
{
# 974 "/usr/local/cuda/include/math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) {
# 978 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b);
# 979 "/usr/local/cuda/include/math_functions.hpp"
} else {
# 980 "/usr/local/cuda/include/math_functions.hpp"
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b);
# 981 "/usr/local/cuda/include/math_functions.hpp"
}
# 982 "/usr/local/cuda/include/math_functions.hpp"
}
# 984 "/usr/local/cuda/include/math_functions.hpp"
static inline long long max(long long a, long long b)
# 985 "/usr/local/cuda/include/math_functions.hpp"
{
# 986 "/usr/local/cuda/include/math_functions.hpp"
return llmax(a, b);
# 987 "/usr/local/cuda/include/math_functions.hpp"
}
# 989 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long max(unsigned long long a, unsigned long long b)
# 990 "/usr/local/cuda/include/math_functions.hpp"
{
# 991 "/usr/local/cuda/include/math_functions.hpp"
return ullmax(a, b);
# 992 "/usr/local/cuda/include/math_functions.hpp"
}
# 994 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long max(long long a, unsigned long long b)
# 995 "/usr/local/cuda/include/math_functions.hpp"
{
# 996 "/usr/local/cuda/include/math_functions.hpp"
return ullmax((unsigned long long)a, b);
# 997 "/usr/local/cuda/include/math_functions.hpp"
}
# 999 "/usr/local/cuda/include/math_functions.hpp"
static inline unsigned long long max(unsigned long long a, long long b)
# 1000 "/usr/local/cuda/include/math_functions.hpp"
{
# 1001 "/usr/local/cuda/include/math_functions.hpp"
return ullmax(a, (unsigned long long)b);
# 1002 "/usr/local/cuda/include/math_functions.hpp"
}
# 1004 "/usr/local/cuda/include/math_functions.hpp"
static inline float max(float a, float b)
# 1005 "/usr/local/cuda/include/math_functions.hpp"
{
# 1006 "/usr/local/cuda/include/math_functions.hpp"
return fmaxf(a, b);
# 1007 "/usr/local/cuda/include/math_functions.hpp"
}
# 1009 "/usr/local/cuda/include/math_functions.hpp"
static inline double max(double a, double b)
# 1010 "/usr/local/cuda/include/math_functions.hpp"
{
# 1011 "/usr/local/cuda/include/math_functions.hpp"
return fmax(a, b);
# 1012 "/usr/local/cuda/include/math_functions.hpp"
}
# 1014 "/usr/local/cuda/include/math_functions.hpp"
static inline double max(float a, double b)
# 1015 "/usr/local/cuda/include/math_functions.hpp"
{
# 1016 "/usr/local/cuda/include/math_functions.hpp"
return fmax((double)a, b);
# 1017 "/usr/local/cuda/include/math_functions.hpp"
}
# 1019 "/usr/local/cuda/include/math_functions.hpp"
static inline double max(double a, float b)
# 1020 "/usr/local/cuda/include/math_functions.hpp"
{
# 1021 "/usr/local/cuda/include/math_functions.hpp"
return fmax(a, (double)b);
# 1022 "/usr/local/cuda/include/math_functions.hpp"
}
# 1033 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline int min(int a, int b)
# 1034 "/usr/local/cuda/include/math_functions.hpp"
{
# 1035 "/usr/local/cuda/include/math_functions.hpp"
return (a < b) ? a : b;
# 1036 "/usr/local/cuda/include/math_functions.hpp"
}
# 1038 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline unsigned umin(unsigned a, unsigned b)
# 1039 "/usr/local/cuda/include/math_functions.hpp"
{
# 1040 "/usr/local/cuda/include/math_functions.hpp"
return (a < b) ? a : b;
# 1041 "/usr/local/cuda/include/math_functions.hpp"
}
# 1043 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline long long llmin(long long a, long long b)
# 1044 "/usr/local/cuda/include/math_functions.hpp"
{
# 1045 "/usr/local/cuda/include/math_functions.hpp"
return (a < b) ? a : b;
# 1046 "/usr/local/cuda/include/math_functions.hpp"
}
# 1048 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline unsigned long long ullmin(unsigned long long a, unsigned long long
# 1049 "/usr/local/cuda/include/math_functions.hpp"
b)
# 1050 "/usr/local/cuda/include/math_functions.hpp"
{
# 1051 "/usr/local/cuda/include/math_functions.hpp"
return (a < b) ? a : b;
# 1052 "/usr/local/cuda/include/math_functions.hpp"
}
# 1054 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline int max(int a, int b)
# 1055 "/usr/local/cuda/include/math_functions.hpp"
{
# 1056 "/usr/local/cuda/include/math_functions.hpp"
return (a > b) ? a : b;
# 1057 "/usr/local/cuda/include/math_functions.hpp"
}
# 1059 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline unsigned umax(unsigned a, unsigned b)
# 1060 "/usr/local/cuda/include/math_functions.hpp"
{
# 1061 "/usr/local/cuda/include/math_functions.hpp"
return (a > b) ? a : b;
# 1062 "/usr/local/cuda/include/math_functions.hpp"
}
# 1064 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline long long llmax(long long a, long long b)
# 1065 "/usr/local/cuda/include/math_functions.hpp"
{
# 1066 "/usr/local/cuda/include/math_functions.hpp"
return (a > b) ? a : b;
# 1067 "/usr/local/cuda/include/math_functions.hpp"
}
# 1069 "/usr/local/cuda/include/math_functions.hpp"
extern "C" inline unsigned long long ullmax(unsigned long long a, unsigned long long
# 1070 "/usr/local/cuda/include/math_functions.hpp"
b)
# 1071 "/usr/local/cuda/include/math_functions.hpp"
{
# 1072 "/usr/local/cuda/include/math_functions.hpp"
return (a > b) ? a : b;
# 1073 "/usr/local/cuda/include/math_functions.hpp"
}
# 77 "/usr/local/cuda/include/cuda_surface_types.h"
template< class T, int dim = 1>
# 78 "/usr/local/cuda/include/cuda_surface_types.h"
struct surface : public surfaceReference {
# 81 "/usr/local/cuda/include/cuda_surface_types.h"
surface()
# 82 "/usr/local/cuda/include/cuda_surface_types.h"
{
# 83 "/usr/local/cuda/include/cuda_surface_types.h"
(surfaceReference::channelDesc) = cudaCreateChannelDesc< T> ();
# 84 "/usr/local/cuda/include/cuda_surface_types.h"
}
# 86 "/usr/local/cuda/include/cuda_surface_types.h"
surface(cudaChannelFormatDesc desc)
# 87 "/usr/local/cuda/include/cuda_surface_types.h"
{
# 88 "/usr/local/cuda/include/cuda_surface_types.h"
(surfaceReference::channelDesc) = desc;
# 89 "/usr/local/cuda/include/cuda_surface_types.h"
}
# 91 "/usr/local/cuda/include/cuda_surface_types.h"
};
# 93 "/usr/local/cuda/include/cuda_surface_types.h"
template< int dim>
# 94 "/usr/local/cuda/include/cuda_surface_types.h"
struct surface< void, dim> : public surfaceReference {
# 97 "/usr/local/cuda/include/cuda_surface_types.h"
surface()
# 98 "/usr/local/cuda/include/cuda_surface_types.h"
{
# 99 "/usr/local/cuda/include/cuda_surface_types.h"
(surfaceReference::channelDesc) = cudaCreateChannelDesc< void> ();
# 100 "/usr/local/cuda/include/cuda_surface_types.h"
}
# 102 "/usr/local/cuda/include/cuda_surface_types.h"
};
# 77 "/usr/local/cuda/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType>
# 78 "/usr/local/cuda/include/cuda_texture_types.h"
struct texture : public textureReference {
# 81 "/usr/local/cuda/include/cuda_texture_types.h"
texture(int norm = 0, cudaTextureFilterMode
# 82 "/usr/local/cuda/include/cuda_texture_types.h"
fMode = cudaFilterModePoint, cudaTextureAddressMode
# 83 "/usr/local/cuda/include/cuda_texture_types.h"
aMode = cudaAddressModeClamp)
# 84 "/usr/local/cuda/include/cuda_texture_types.h"
{
# 85 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::normalized) = norm;
# 86 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::filterMode) = fMode;
# 87 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[0]) = aMode;
# 88 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[1]) = aMode;
# 89 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[2]) = aMode;
# 90 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::channelDesc) = cudaCreateChannelDesc< T> ();
# 91 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::sRGB) = 0;
# 92 "/usr/local/cuda/include/cuda_texture_types.h"
}
# 94 "/usr/local/cuda/include/cuda_texture_types.h"
texture(int norm, cudaTextureFilterMode
# 95 "/usr/local/cuda/include/cuda_texture_types.h"
fMode, cudaTextureAddressMode
# 96 "/usr/local/cuda/include/cuda_texture_types.h"
aMode, cudaChannelFormatDesc
# 97 "/usr/local/cuda/include/cuda_texture_types.h"
desc)
# 98 "/usr/local/cuda/include/cuda_texture_types.h"
{
# 99 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::normalized) = norm;
# 100 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::filterMode) = fMode;
# 101 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[0]) = aMode;
# 102 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[1]) = aMode;
# 103 "/usr/local/cuda/include/cuda_texture_types.h"
((textureReference::addressMode)[2]) = aMode;
# 104 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::channelDesc) = desc;
# 105 "/usr/local/cuda/include/cuda_texture_types.h"
(textureReference::sRGB) = 0;
# 106 "/usr/local/cuda/include/cuda_texture_types.h"
}
# 108 "/usr/local/cuda/include/cuda_texture_types.h"
};
# 90 "/usr/local/cuda/include/device_functions.h"
extern "C" {
# 3230 "/usr/local/cuda/include/device_functions.h"
}
# 3238 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b);
# 3240 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b);
# 3242 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b);
# 3244 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b);
# 3246 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b);
# 3248 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b);
# 3250 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b);
# 3252 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b);
# 3254 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline int float_as_int(float a);
# 3256 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline float int_as_float(int a);
# 3258 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned float_as_uint(float a);
# 3260 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline float uint_as_float(unsigned a);
# 3262 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline float saturate(float a);
# 3264 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline int mul24(int a, int b);
# 3266 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b);
# 3268 "/usr/local/cuda/include/device_functions.h"
__attribute((deprecated("Please use __trap() instead."))) __attribute__((unused)) static inline void trap();
# 3271 "/usr/local/cuda/include/device_functions.h"
__attribute((deprecated("Please use __brkpt() instead."))) __attribute__((unused)) static inline void brkpt(int c = 0);
# 3273 "/usr/local/cuda/include/device_functions.h"
__attribute((deprecated("Please use __syncthreads() instead."))) __attribute__((unused)) static inline void syncthreads();
# 3275 "/usr/local/cuda/include/device_functions.h"
__attribute((deprecated("Please use __prof_trigger() instead."))) __attribute__((unused)) static inline void prof_trigger(int e);
# 3277 "/usr/local/cuda/include/device_functions.h"
__attribute((deprecated("Please use __threadfence() instead."))) __attribute__((unused)) static inline void threadfence(bool global = true);
# 3279 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero);
# 3281 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero);
# 3283 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest);
# 3285 "/usr/local/cuda/include/device_functions.h"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest);
# 83 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(int a, int b)
# 84 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 86 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 88 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b)
# 89 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 91 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 93 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b)
# 94 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 96 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 98 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b)
# 99 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 101 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 103 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b)
# 104 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 106 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 108 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b)
# 109 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 111 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 113 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b)
# 114 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 116 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 118 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b)
# 119 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 121 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 123 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(float a)
# 124 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;
# 126 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 128 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(int a)
# 129 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;
# 131 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 133 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(float a)
# 134 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;
# 136 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 138 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(unsigned a)
# 139 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;
# 141 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 142 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline float saturate(float a)
# 143 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;
# 145 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 147 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline int mul24(int a, int b)
# 148 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 150 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 152 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b)
# 153 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
# 155 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 157 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline void trap()
# 158 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;
# 160 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 163 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline void brkpt(int c)
# 164 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)c;
# 166 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 168 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline void syncthreads()
# 169 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;
# 171 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 173 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline void prof_trigger(int e)
# 174 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)e;
# 191 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 193 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline void threadfence(bool global)
# 194 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)global;
# 196 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 198 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode)
# 199 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 204 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 206 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode)
# 207 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 212 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 214 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode)
# 215 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 220 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 222 "/usr/local/cuda/include/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode)
# 223 "/usr/local/cuda/include/device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 228 "/usr/local/cuda/include/device_functions.hpp"
::exit(___);}
# 111 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 113 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 115 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 117 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 119 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 121 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 123 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 125 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 127 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 129 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 131 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 133 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 135 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 137 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 139 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 141 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 143 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 145 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 147 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 149 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 151 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 164 "/usr/local/cuda/include/device_atomic_functions.h"
extern "C" {
# 175 "/usr/local/cuda/include/device_atomic_functions.h"
}
# 185 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 187 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 189 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 191 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
# 193 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
# 80 "/usr/local/cuda/include/device_double_functions.h"
extern "C" {
# 1134 "/usr/local/cuda/include/device_double_functions.h"
}
# 1143 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode);
# 1145 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest);
# 1147 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest);
# 1149 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest);
# 1151 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero);
# 1153 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero);
# 1155 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero);
# 1157 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero);
# 1159 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest);
# 1161 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest);
# 1163 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest);
# 1165 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest);
# 1167 "/usr/local/cuda/include/device_double_functions.h"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest);
# 85 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode)
# 86 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 91 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 93 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode)
# 94 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 99 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 101 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode)
# 102 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 109 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode)
# 110 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 117 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode)
# 118 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 123 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 125 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode)
# 126 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 131 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 133 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode)
# 134 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 139 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 141 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode)
# 142 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 147 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 149 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode)
# 150 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 155 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 157 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode)
# 158 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 163 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 165 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode)
# 166 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 168 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 170 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode)
# 171 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 173 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 175 "/usr/local/cuda/include/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode)
# 176 "/usr/local/cuda/include/device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
# 178 "/usr/local/cuda/include/device_double_functions.hpp"
::exit(___);}
# 94 "/usr/local/cuda/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 102 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 104 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 106 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 108 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 110 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 112 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 114 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 308 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 311 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 314 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 317 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 320 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 323 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 326 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 329 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 332 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 335 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 338 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 341 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 344 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 347 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 350 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 353 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 356 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 359 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 362 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 365 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 368 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 371 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 374 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 377 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 380 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 383 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 386 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 389 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 392 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 395 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 398 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 401 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 404 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 407 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 410 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 413 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 416 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 419 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 422 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 425 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 428 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 431 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned
# 432 "/usr/local/cuda/include/sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 435 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned
# 436 "/usr/local/cuda/include/sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 439 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long
# 440 "/usr/local/cuda/include/sm_60_atomic_functions.h"
compare, unsigned long long
# 441 "/usr/local/cuda/include/sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 444 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long
# 445 "/usr/local/cuda/include/sm_60_atomic_functions.h"
compare, unsigned long long
# 446 "/usr/local/cuda/include/sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
# 449 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 452 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 455 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 458 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 461 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 464 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 467 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 470 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 473 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 476 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 479 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 482 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 485 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 488 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 491 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 494 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 497 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 500 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 503 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 506 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 509 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 512 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 515 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 518 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
# 79 "/usr/local/cuda/include/sm_20_intrinsics.h"
extern "C" {
# 1466 "/usr/local/cuda/include/sm_20_intrinsics.h"
}
# 1475 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
# 1477 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
# 1479 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
# 1481 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
# 1486 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 98 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 100 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 102 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 103 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 105 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 107 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 109 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 111 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 113 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 115 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 117 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 119 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 122 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 124 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 126 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 128 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 130 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 132 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 134 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 136 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 138 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 140 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 142 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 144 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 148 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 150 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
# 152 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 154 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 156 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 158 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
# 160 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 162 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
# 89 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 90 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 92 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 93 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 94 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 95 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 96 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 97 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 98 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 99 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 100 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 101 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 102 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 103 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 105 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 106 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 107 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 108 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 109 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 110 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 111 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 112 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 113 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 114 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 115 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 117 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 118 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 119 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 120 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 121 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 125 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 126 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 128 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 129 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 130 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 131 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 132 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 133 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 134 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 135 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 136 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 137 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 138 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 139 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 141 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 142 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 143 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 144 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 145 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 146 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 147 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 148 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 149 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 150 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 151 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 153 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 154 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 155 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 156 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 157 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 161 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 162 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 164 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 165 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 166 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 167 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 168 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 169 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 170 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 171 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 172 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 173 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 174 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 175 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 177 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 178 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 179 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 180 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 181 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 182 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 183 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 184 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 185 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 186 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 187 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 189 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 190 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 191 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 192 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 193 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 197 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 198 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 200 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 201 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 202 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 203 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 204 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 205 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 206 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 207 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 208 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 209 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 210 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 211 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 213 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 214 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 215 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 216 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 217 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 218 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 219 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 220 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 221 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 222 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 223 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 225 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 226 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 227 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 228 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 229 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
# 236 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
# 237 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
# 240 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
# 241 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
# 91 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 92 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 94 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 95 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 97 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 98 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 100 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 101 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 108 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 109 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 111 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 112 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
# 100 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 101 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dread(T *res, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 102 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 111 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 113 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 114 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 115 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 123 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 125 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 126 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dread(T *res, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 127 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 131 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 260 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 261 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dread(T *res, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 262 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 271 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 273 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 274 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 275 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 283 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 285 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 286 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dread(T *res, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 287 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 291 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 422 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 423 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dread(T *res, surface< void, 3> surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 424 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 433 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 435 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 436 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surf3Dread(surface< void, 3> surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 437 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 445 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 447 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 448 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dread(T *res, surface< void, 3> surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 449 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 453 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 582 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 583 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1DLayeredread(T *res, surface< void, 241> surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 584 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 593 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 595 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 596 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surf1DLayeredread(surface< void, 241> surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 597 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 605 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 607 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 608 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1DLayeredread(T *res, surface< void, 241> surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 609 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 613 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 768 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 769 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredread(T *res, surface< void, 242> surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 770 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 779 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 781 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 782 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surf2DLayeredread(surface< void, 242> surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 783 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 791 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 793 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 794 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredread(T *res, surface< void, 242> surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 795 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 799 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 919 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 920 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapread(T *res, surface< void, 12> surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 921 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 930 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 932 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 933 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surfCubemapread(surface< void, 12> surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 934 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 942 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 944 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 945 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapread(T *res, surface< void, 12> surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 946 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 950 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1070 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1071 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapLayeredread(T *res, surface< void, 252> surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1072 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 1081 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1083 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1084 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline T surfCubemapLayeredread(surface< void, 252> surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1085 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1093 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1095 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1096 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapLayeredread(T *res, surface< void, 252> surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1097 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1101 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1232 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1233 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dwrite(T val, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1234 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 1254 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1256 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1257 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dwrite(T val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1258 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 1262 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1377 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1378 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dwrite(T val, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1379 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 1399 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1401 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1402 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dwrite(T val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1403 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 1407 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1520 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1521 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dwrite(T val, surface< void, 3> surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1522 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 1542 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1544 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1545 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dwrite(T val, surface< void, 3> surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1546 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1550 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1666 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1667 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241> surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1668 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 1688 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1690 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1691 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241> surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1692 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1696 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1822 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1823 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredwrite(T val, surface< void, 242> surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1824 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 1844 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1846 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1847 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredwrite(T val, surface< void, 242> surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1848 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1852 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1958 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1959 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapwrite(T val, surface< void, 12> surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1960 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 1980 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 1982 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 1983 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapwrite(T val, surface< void, 12> surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1984 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1988 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 2093 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 2094 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252> surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 2095 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 2115 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 2117 "/usr/local/cuda/include/surface_functions.h"
template< class T>
# 2118 "/usr/local/cuda/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252> surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 2119 "/usr/local/cuda/include/surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2123 "/usr/local/cuda/include/surface_functions.h"
::exit(___);}
# 70 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 71 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}
# 73 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T>
# 74 "/usr/local/cuda/include/texture_fetch_functions.h"
struct __nv_tex_rmnf_ret { };
# 76 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char> { typedef float type; };
# 77 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< signed char> { typedef float type; };
# 78 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned char> { typedef float type; };
# 79 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short> { typedef float type; };
# 80 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned short> { typedef float type; };
# 81 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char1> { typedef float1 type; };
# 82 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar1> { typedef float1 type; };
# 83 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short1> { typedef float1 type; };
# 84 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort1> { typedef float1 type; };
# 85 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char2> { typedef float2 type; };
# 86 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar2> { typedef float2 type; };
# 87 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short2> { typedef float2 type; };
# 88 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort2> { typedef float2 type; };
# 89 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char4> { typedef float4 type; };
# 90 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar4> { typedef float4 type; };
# 91 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short4> { typedef float4 type; };
# 92 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort4> { typedef float4 type; };
# 94 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 95 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}
# 215 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 216 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}
# 218 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 219 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}
# 345 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 346 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
# 348 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 349 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
# 475 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 476 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}
# 478 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 479 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}
# 603 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 604 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}
# 606 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 607 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}
# 735 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 736 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 738 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 739 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 864 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 865 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 867 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 868 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 992 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 993 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
# 995 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 996 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
# 1121 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T>
# 1122 "/usr/local/cuda/include/texture_fetch_functions.h"
struct __nv_tex2dgather_ret { };
# 1123 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char> { typedef char4 type; };
# 1124 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< signed char> { typedef char4 type; };
# 1125 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char1> { typedef char4 type; };
# 1126 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char2> { typedef char4 type; };
# 1127 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char3> { typedef char4 type; };
# 1128 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char4> { typedef char4 type; };
# 1129 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned char> { typedef uchar4 type; };
# 1130 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar1> { typedef uchar4 type; };
# 1131 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar2> { typedef uchar4 type; };
# 1132 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar3> { typedef uchar4 type; };
# 1133 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar4> { typedef uchar4 type; };
# 1135 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short> { typedef short4 type; };
# 1136 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short1> { typedef short4 type; };
# 1137 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short2> { typedef short4 type; };
# 1138 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short3> { typedef short4 type; };
# 1139 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short4> { typedef short4 type; };
# 1140 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned short> { typedef ushort4 type; };
# 1141 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort1> { typedef ushort4 type; };
# 1142 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort2> { typedef ushort4 type; };
# 1143 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort3> { typedef ushort4 type; };
# 1144 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort4> { typedef ushort4 type; };
# 1146 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int> { typedef int4 type; };
# 1147 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int1> { typedef int4 type; };
# 1148 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int2> { typedef int4 type; };
# 1149 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int3> { typedef int4 type; };
# 1150 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int4> { typedef int4 type; };
# 1151 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned> { typedef uint4 type; };
# 1152 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint1> { typedef uint4 type; };
# 1153 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint2> { typedef uint4 type; };
# 1154 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint3> { typedef uint4 type; };
# 1155 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint4> { typedef uint4 type; };
# 1157 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float> { typedef float4 type; };
# 1158 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float1> { typedef float4 type; };
# 1159 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float2> { typedef float4 type; };
# 1160 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float3> { typedef float4 type; };
# 1161 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float4> { typedef float4 type; };
# 1163 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex2dgather_ret< T> ::type
# 1164 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
# 1166 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static float4
# 1167 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
# 1232 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1233 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
# 1235 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1236 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
# 1360 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1361 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 1363 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1364 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 1484 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1485 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}
# 1487 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1488 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}
# 1612 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1613 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 1615 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1616 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 1740 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1741 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1743 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1744 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1868 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1869 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1871 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 1872 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1996 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 1997 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 1999 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2000 "/usr/local/cuda/include/texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 2124 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 2125 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 2127 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2128 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
# 2252 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 2253 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
# 2255 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2256 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
# 2380 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 2381 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
# 2383 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2384 "/usr/local/cuda/include/texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
# 2509 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 2510 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
# 2512 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2513 "/usr/local/cuda/include/texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
# 2637 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T
# 2638 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
# 2640 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type
# 2641 "/usr/local/cuda/include/texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
# 67 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 68 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1Dfetch(T *, cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}
# 121 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 122 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1Dfetch(cudaTextureObject_t texObject, int x)
# 123 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
# 127 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 135 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 136 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1D(T *, cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}
# 190 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 191 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1D(cudaTextureObject_t texObject, float x)
# 192 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
# 196 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 205 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 206 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2D(T *, cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
# 258 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 259 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2D(cudaTextureObject_t texObject, float x, float y)
# 260 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 264 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 272 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 273 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3D(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
# 325 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 326 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3D(cudaTextureObject_t texObject, float x, float y, float z)
# 327 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 331 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 340 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 341 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayered(T *, cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}
# 393 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 394 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
# 395 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 399 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 408 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 409 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayered(T *, cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}
# 461 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 462 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
# 463 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 467 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 476 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 477 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemap(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
# 529 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 530 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
# 531 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 535 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 544 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 545 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLayered(T *, cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}
# 598 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 599 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
# 600 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 604 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 613 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 614 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2Dgather(T *, cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}
# 660 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 661 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
# 662 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 666 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 675 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 676 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLod(T *, cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
# 728 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 729 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLod(cudaTextureObject_t texObject, float x, float level)
# 730 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 734 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 743 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 744 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLod(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
# 797 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 798 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
# 799 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 803 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 812 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 813 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3DLod(T *, cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 865 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 866 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
# 867 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 871 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 879 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 880 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayeredLod(T *, cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}
# 932 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 933 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
# 934 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 938 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 947 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 948 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayeredLod(T *, cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 1000 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1001 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
# 1002 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 1006 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1014 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1015 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLod(T *, cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1067 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1068 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
# 1069 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 1073 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1081 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1082 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLayeredLod(T *, cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
# 1134 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1135 "/usr/local/cuda/include/texture_indirect_functions.h"
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
# 1136 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 1140 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1148 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1149 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DGrad(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
# 1202 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1203 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
# 1204 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 1208 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1216 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1217 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DGrad(T *, cudaTextureObject_t, float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
# 1269 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1270 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
# 1271 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 1275 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1283 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1284 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3DGrad(T *, cudaTextureObject_t, float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
# 1336 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1337 "/usr/local/cuda/include/texture_indirect_functions.h"
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
# 1338 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 1342 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1350 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1351 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayeredGrad(T *, cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}
# 1404 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1405 "/usr/local/cuda/include/texture_indirect_functions.h"
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
# 1406 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 1410 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 1418 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 1419 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayeredGrad(T *, cudaTextureObject_t, float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
# 1471 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 1472 "/usr/local/cuda/include/texture_indirect_functions.h"
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
# 1473 "/usr/local/cuda/include/texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 1477 "/usr/local/cuda/include/texture_indirect_functions.h"
::exit(___);}
# 68 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 69 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1Dread(T *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 111 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 112 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 113 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 119 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 128 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 129 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2Dread(T *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 172 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 173 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 174 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 180 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 189 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 190 "/usr/local/cuda/include/surface_indirect_functions.h"
surf3Dread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 231 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 232 "/usr/local/cuda/include/surface_indirect_functions.h"
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 233 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 239 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 247 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 248 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1DLayeredread(T *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 290 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 291 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 292 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 298 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 306 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 307 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2DLayeredread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 348 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 349 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 350 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 356 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 364 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 365 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 406 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 407 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 408 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 414 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 422 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 423 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapLayeredread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 464 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T
# 465 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
# 466 "/usr/local/cuda/include/surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 472 "/usr/local/cuda/include/surface_indirect_functions.h"
::exit(___);}
# 480 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 481 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1Dwrite(T, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 528 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 529 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2Dwrite(T, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 576 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 577 "/usr/local/cuda/include/surface_indirect_functions.h"
surf3Dwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 626 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 627 "/usr/local/cuda/include/surface_indirect_functions.h"
surf1DLayeredwrite(T, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 675 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 676 "/usr/local/cuda/include/surface_indirect_functions.h"
surf2DLayeredwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 723 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 724 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 771 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void
# 772 "/usr/local/cuda/include/surface_indirect_functions.h"
surfCubemapLayeredwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
# 68 "/usr/local/cuda/include/device_launch_parameters.h"
extern "C" {
# 71 "/usr/local/cuda/include/device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx;
# 72 "/usr/local/cuda/include/device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx;
# 73 "/usr/local/cuda/include/device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim;
# 74 "/usr/local/cuda/include/device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim;
# 75 "/usr/local/cuda/include/device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize;
# 80 "/usr/local/cuda/include/device_launch_parameters.h"
}
# 183 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 184 "/usr/local/cuda/include/cuda_runtime.h"
cudaLaunchKernel(const T *
# 185 "/usr/local/cuda/include/cuda_runtime.h"
func, dim3
# 186 "/usr/local/cuda/include/cuda_runtime.h"
gridDim, dim3
# 187 "/usr/local/cuda/include/cuda_runtime.h"
blockDim, void **
# 188 "/usr/local/cuda/include/cuda_runtime.h"
args, size_t
# 189 "/usr/local/cuda/include/cuda_runtime.h"
sharedMem = 0, cudaStream_t
# 190 "/usr/local/cuda/include/cuda_runtime.h"
stream = 0)
# 192 "/usr/local/cuda/include/cuda_runtime.h"
{
# 193 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
# 194 "/usr/local/cuda/include/cuda_runtime.h"
}
# 221 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 222 "/usr/local/cuda/include/cuda_runtime.h"
cudaSetupArgument(T
# 223 "/usr/local/cuda/include/cuda_runtime.h"
arg, size_t
# 224 "/usr/local/cuda/include/cuda_runtime.h"
offset)
# 226 "/usr/local/cuda/include/cuda_runtime.h"
{
# 227 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset);
# 228 "/usr/local/cuda/include/cuda_runtime.h"
}
# 260 "/usr/local/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 261 "/usr/local/cuda/include/cuda_runtime.h"
event, unsigned
# 262 "/usr/local/cuda/include/cuda_runtime.h"
flags)
# 264 "/usr/local/cuda/include/cuda_runtime.h"
{
# 265 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags);
# 266 "/usr/local/cuda/include/cuda_runtime.h"
}
# 323 "/usr/local/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 324 "/usr/local/cuda/include/cuda_runtime.h"
ptr, size_t
# 325 "/usr/local/cuda/include/cuda_runtime.h"
size, unsigned
# 326 "/usr/local/cuda/include/cuda_runtime.h"
flags)
# 328 "/usr/local/cuda/include/cuda_runtime.h"
{
# 329 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags);
# 330 "/usr/local/cuda/include/cuda_runtime.h"
}
# 332 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 333 "/usr/local/cuda/include/cuda_runtime.h"
cudaHostAlloc(T **
# 334 "/usr/local/cuda/include/cuda_runtime.h"
ptr, size_t
# 335 "/usr/local/cuda/include/cuda_runtime.h"
size, unsigned
# 336 "/usr/local/cuda/include/cuda_runtime.h"
flags)
# 338 "/usr/local/cuda/include/cuda_runtime.h"
{
# 339 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags);
# 340 "/usr/local/cuda/include/cuda_runtime.h"
}
# 342 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 343 "/usr/local/cuda/include/cuda_runtime.h"
cudaHostGetDevicePointer(T **
# 344 "/usr/local/cuda/include/cuda_runtime.h"
pDevice, void *
# 345 "/usr/local/cuda/include/cuda_runtime.h"
pHost, unsigned
# 346 "/usr/local/cuda/include/cuda_runtime.h"
flags)
# 348 "/usr/local/cuda/include/cuda_runtime.h"
{
# 349 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags);
# 350 "/usr/local/cuda/include/cuda_runtime.h"
}
# 449 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 450 "/usr/local/cuda/include/cuda_runtime.h"
cudaMallocManaged(T **
# 451 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t
# 452 "/usr/local/cuda/include/cuda_runtime.h"
size, unsigned
# 453 "/usr/local/cuda/include/cuda_runtime.h"
flags = 1)
# 455 "/usr/local/cuda/include/cuda_runtime.h"
{
# 456 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags);
# 457 "/usr/local/cuda/include/cuda_runtime.h"
}
# 528 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 529 "/usr/local/cuda/include/cuda_runtime.h"
cudaStreamAttachMemAsync(cudaStream_t
# 530 "/usr/local/cuda/include/cuda_runtime.h"
stream, T *
# 531 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t
# 532 "/usr/local/cuda/include/cuda_runtime.h"
length = 0, unsigned
# 533 "/usr/local/cuda/include/cuda_runtime.h"
flags = 4)
# 535 "/usr/local/cuda/include/cuda_runtime.h"
{
# 536 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags);
# 537 "/usr/local/cuda/include/cuda_runtime.h"
}
# 539 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t
# 540 "/usr/local/cuda/include/cuda_runtime.h"
cudaMalloc(T **
# 541 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t
# 542 "/usr/local/cuda/include/cuda_runtime.h"
size)
# 544 "/usr/local/cuda/include/cuda_runtime.h"
{
# 545 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size);
# 546 "/usr/local/cuda/include/cuda_runtime.h"
}
# 548 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 549 "/usr/local/cuda/include/cuda_runtime.h"
cudaMallocHost(T **
# 550 "/usr/local/cuda/include/cuda_runtime.h"
ptr, size_t
# 551 "/usr/local/cuda/include/cuda_runtime.h"
size, unsigned
# 552 "/usr/local/cuda/include/cuda_runtime.h"
flags = 0)
# 554 "/usr/local/cuda/include/cuda_runtime.h"
{
# 555 "/usr/local/cuda/include/cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags);
# 556 "/usr/local/cuda/include/cuda_runtime.h"
}
# 558 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 559 "/usr/local/cuda/include/cuda_runtime.h"
cudaMallocPitch(T **
# 560 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t *
# 561 "/usr/local/cuda/include/cuda_runtime.h"
pitch, size_t
# 562 "/usr/local/cuda/include/cuda_runtime.h"
width, size_t
# 563 "/usr/local/cuda/include/cuda_runtime.h"
height)
# 565 "/usr/local/cuda/include/cuda_runtime.h"
{
# 566 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height);
# 567 "/usr/local/cuda/include/cuda_runtime.h"
}
# 604 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 605 "/usr/local/cuda/include/cuda_runtime.h"
cudaMemcpyToSymbol(const T &
# 606 "/usr/local/cuda/include/cuda_runtime.h"
symbol, const void *
# 607 "/usr/local/cuda/include/cuda_runtime.h"
src, size_t
# 608 "/usr/local/cuda/include/cuda_runtime.h"
count, size_t
# 609 "/usr/local/cuda/include/cuda_runtime.h"
offset = 0, cudaMemcpyKind
# 610 "/usr/local/cuda/include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 612 "/usr/local/cuda/include/cuda_runtime.h"
{
# 613 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind);
# 614 "/usr/local/cuda/include/cuda_runtime.h"
}
# 656 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 657 "/usr/local/cuda/include/cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
# 658 "/usr/local/cuda/include/cuda_runtime.h"
symbol, const void *
# 659 "/usr/local/cuda/include/cuda_runtime.h"
src, size_t
# 660 "/usr/local/cuda/include/cuda_runtime.h"
count, size_t
# 661 "/usr/local/cuda/include/cuda_runtime.h"
offset = 0, cudaMemcpyKind
# 662 "/usr/local/cuda/include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 663 "/usr/local/cuda/include/cuda_runtime.h"
stream = 0)
# 665 "/usr/local/cuda/include/cuda_runtime.h"
{
# 666 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream);
# 667 "/usr/local/cuda/include/cuda_runtime.h"
}
# 702 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 703 "/usr/local/cuda/include/cuda_runtime.h"
cudaMemcpyFromSymbol(void *
# 704 "/usr/local/cuda/include/cuda_runtime.h"
dst, const T &
# 705 "/usr/local/cuda/include/cuda_runtime.h"
symbol, size_t
# 706 "/usr/local/cuda/include/cuda_runtime.h"
count, size_t
# 707 "/usr/local/cuda/include/cuda_runtime.h"
offset = 0, cudaMemcpyKind
# 708 "/usr/local/cuda/include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 710 "/usr/local/cuda/include/cuda_runtime.h"
{
# 711 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind);
# 712 "/usr/local/cuda/include/cuda_runtime.h"
}
# 754 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 755 "/usr/local/cuda/include/cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
# 756 "/usr/local/cuda/include/cuda_runtime.h"
dst, const T &
# 757 "/usr/local/cuda/include/cuda_runtime.h"
symbol, size_t
# 758 "/usr/local/cuda/include/cuda_runtime.h"
count, size_t
# 759 "/usr/local/cuda/include/cuda_runtime.h"
offset = 0, cudaMemcpyKind
# 760 "/usr/local/cuda/include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 761 "/usr/local/cuda/include/cuda_runtime.h"
stream = 0)
# 763 "/usr/local/cuda/include/cuda_runtime.h"
{
# 764 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream);
# 765 "/usr/local/cuda/include/cuda_runtime.h"
}
# 787 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 788 "/usr/local/cuda/include/cuda_runtime.h"
cudaGetSymbolAddress(void **
# 789 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, const T &
# 790 "/usr/local/cuda/include/cuda_runtime.h"
symbol)
# 792 "/usr/local/cuda/include/cuda_runtime.h"
{
# 793 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol));
# 794 "/usr/local/cuda/include/cuda_runtime.h"
}
# 816 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 817 "/usr/local/cuda/include/cuda_runtime.h"
cudaGetSymbolSize(size_t *
# 818 "/usr/local/cuda/include/cuda_runtime.h"
size, const T &
# 819 "/usr/local/cuda/include/cuda_runtime.h"
symbol)
# 821 "/usr/local/cuda/include/cuda_runtime.h"
{
# 822 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol));
# 823 "/usr/local/cuda/include/cuda_runtime.h"
}
# 859 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 860 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTexture(size_t *
# 861 "/usr/local/cuda/include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 862 "/usr/local/cuda/include/cuda_runtime.h"
tex, const void *
# 863 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 864 "/usr/local/cuda/include/cuda_runtime.h"
desc, size_t
# 865 "/usr/local/cuda/include/cuda_runtime.h"
size = ((2147483647) * 2U) + 1U)
# 867 "/usr/local/cuda/include/cuda_runtime.h"
{
# 868 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
# 869 "/usr/local/cuda/include/cuda_runtime.h"
}
# 904 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 905 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTexture(size_t *
# 906 "/usr/local/cuda/include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 907 "/usr/local/cuda/include/cuda_runtime.h"
tex, const void *
# 908 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t
# 909 "/usr/local/cuda/include/cuda_runtime.h"
size = ((2147483647) * 2U) + 1U)
# 911 "/usr/local/cuda/include/cuda_runtime.h"
{
# 912 "/usr/local/cuda/include/cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size);
# 913 "/usr/local/cuda/include/cuda_runtime.h"
}
# 960 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 961 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 962 "/usr/local/cuda/include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 963 "/usr/local/cuda/include/cuda_runtime.h"
tex, const void *
# 964 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 965 "/usr/local/cuda/include/cuda_runtime.h"
desc, size_t
# 966 "/usr/local/cuda/include/cuda_runtime.h"
width, size_t
# 967 "/usr/local/cuda/include/cuda_runtime.h"
height, size_t
# 968 "/usr/local/cuda/include/cuda_runtime.h"
pitch)
# 970 "/usr/local/cuda/include/cuda_runtime.h"
{
# 971 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
# 972 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1018 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1019 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 1020 "/usr/local/cuda/include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 1021 "/usr/local/cuda/include/cuda_runtime.h"
tex, const void *
# 1022 "/usr/local/cuda/include/cuda_runtime.h"
devPtr, size_t
# 1023 "/usr/local/cuda/include/cuda_runtime.h"
width, size_t
# 1024 "/usr/local/cuda/include/cuda_runtime.h"
height, size_t
# 1025 "/usr/local/cuda/include/cuda_runtime.h"
pitch)
# 1027 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1028 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch);
# 1029 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1060 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1061 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 1062 "/usr/local/cuda/include/cuda_runtime.h"
tex, cudaArray_const_t
# 1063 "/usr/local/cuda/include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 1064 "/usr/local/cuda/include/cuda_runtime.h"
desc)
# 1066 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1067 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindTextureToArray(&tex, array, &desc);
# 1068 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1098 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1099 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 1100 "/usr/local/cuda/include/cuda_runtime.h"
tex, cudaArray_const_t
# 1101 "/usr/local/cuda/include/cuda_runtime.h"
array)
# 1103 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1104 "/usr/local/cuda/include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 1105 "/usr/local/cuda/include/cuda_runtime.h"
cudaError_t err = ::cudaGetChannelDesc(&desc, array);
# 1107 "/usr/local/cuda/include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err;
# 1108 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1139 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1140 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode> &
# 1141 "/usr/local/cuda/include/cuda_runtime.h"
tex, cudaMipmappedArray_const_t
# 1142 "/usr/local/cuda/include/cuda_runtime.h"
mipmappedArray, const cudaChannelFormatDesc &
# 1143 "/usr/local/cuda/include/cuda_runtime.h"
desc)
# 1145 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1146 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
# 1147 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1177 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1178 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode> &
# 1179 "/usr/local/cuda/include/cuda_runtime.h"
tex, cudaMipmappedArray_const_t
# 1180 "/usr/local/cuda/include/cuda_runtime.h"
mipmappedArray)
# 1182 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1183 "/usr/local/cuda/include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 1184 "/usr/local/cuda/include/cuda_runtime.h"
cudaArray_t levelArray;
# 1185 "/usr/local/cuda/include/cuda_runtime.h"
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
# 1187 "/usr/local/cuda/include/cuda_runtime.h"
if (err != (cudaSuccess)) {
# 1188 "/usr/local/cuda/include/cuda_runtime.h"
return err;
# 1189 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1190 "/usr/local/cuda/include/cuda_runtime.h"
err = ::cudaGetChannelDesc(&desc, levelArray);
# 1192 "/usr/local/cuda/include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
# 1193 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1216 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1217 "/usr/local/cuda/include/cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode> &
# 1218 "/usr/local/cuda/include/cuda_runtime.h"
tex)
# 1220 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1221 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaUnbindTexture(&tex);
# 1222 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1250 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t
# 1251 "/usr/local/cuda/include/cuda_runtime.h"
cudaGetTextureAlignmentOffset(size_t *
# 1252 "/usr/local/cuda/include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 1253 "/usr/local/cuda/include/cuda_runtime.h"
tex)
# 1255 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1256 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaGetTextureAlignmentOffset(offset, &tex);
# 1257 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1302 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 1303 "/usr/local/cuda/include/cuda_runtime.h"
cudaFuncSetCacheConfig(T *
# 1304 "/usr/local/cuda/include/cuda_runtime.h"
func, cudaFuncCache
# 1305 "/usr/local/cuda/include/cuda_runtime.h"
cacheConfig)
# 1307 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1308 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig);
# 1309 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1311 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 1312 "/usr/local/cuda/include/cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
# 1313 "/usr/local/cuda/include/cuda_runtime.h"
func, cudaSharedMemConfig
# 1314 "/usr/local/cuda/include/cuda_runtime.h"
config)
# 1316 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1317 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config);
# 1318 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1347 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t
# 1348 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1349 "/usr/local/cuda/include/cuda_runtime.h"
numBlocks, T
# 1350 "/usr/local/cuda/include/cuda_runtime.h"
func, int
# 1351 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, size_t
# 1352 "/usr/local/cuda/include/cuda_runtime.h"
dynamicSMemSize)
# 1353 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1354 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0);
# 1355 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1398 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t
# 1399 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1400 "/usr/local/cuda/include/cuda_runtime.h"
numBlocks, T
# 1401 "/usr/local/cuda/include/cuda_runtime.h"
func, int
# 1402 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, size_t
# 1403 "/usr/local/cuda/include/cuda_runtime.h"
dynamicSMemSize, unsigned
# 1404 "/usr/local/cuda/include/cuda_runtime.h"
flags)
# 1405 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1406 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags);
# 1407 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1412 "/usr/local/cuda/include/cuda_runtime.h"
class __cudaOccupancyB2DHelper {
# 1413 "/usr/local/cuda/include/cuda_runtime.h"
size_t n;
# 1415 "/usr/local/cuda/include/cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { }
# 1416 "/usr/local/cuda/include/cuda_runtime.h"
size_t operator()(int)
# 1417 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1418 "/usr/local/cuda/include/cuda_runtime.h"
return n;
# 1419 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1420 "/usr/local/cuda/include/cuda_runtime.h"
};
# 1467 "/usr/local/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t
# 1468 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1469 "/usr/local/cuda/include/cuda_runtime.h"
minGridSize, int *
# 1470 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, T
# 1471 "/usr/local/cuda/include/cuda_runtime.h"
func, UnaryFunction
# 1472 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeToDynamicSMemSize, int
# 1473 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = 0, unsigned
# 1474 "/usr/local/cuda/include/cuda_runtime.h"
flags = 0)
# 1475 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1476 "/usr/local/cuda/include/cuda_runtime.h"
cudaError_t status;
# 1479 "/usr/local/cuda/include/cuda_runtime.h"
int device;
# 1480 "/usr/local/cuda/include/cuda_runtime.h"
cudaFuncAttributes attr;
# 1483 "/usr/local/cuda/include/cuda_runtime.h"
int maxThreadsPerMultiProcessor;
# 1484 "/usr/local/cuda/include/cuda_runtime.h"
int warpSize;
# 1485 "/usr/local/cuda/include/cuda_runtime.h"
int devMaxThreadsPerBlock;
# 1486 "/usr/local/cuda/include/cuda_runtime.h"
int multiProcessorCount;
# 1487 "/usr/local/cuda/include/cuda_runtime.h"
int funcMaxThreadsPerBlock;
# 1488 "/usr/local/cuda/include/cuda_runtime.h"
int occupancyLimit;
# 1489 "/usr/local/cuda/include/cuda_runtime.h"
int granularity;
# 1492 "/usr/local/cuda/include/cuda_runtime.h"
int maxBlockSize = 0;
# 1493 "/usr/local/cuda/include/cuda_runtime.h"
int numBlocks = 0;
# 1494 "/usr/local/cuda/include/cuda_runtime.h"
int maxOccupancy = 0;
# 1497 "/usr/local/cuda/include/cuda_runtime.h"
int blockSizeToTryAligned;
# 1498 "/usr/local/cuda/include/cuda_runtime.h"
int blockSizeToTry;
# 1499 "/usr/local/cuda/include/cuda_runtime.h"
int blockSizeLimitAligned;
# 1500 "/usr/local/cuda/include/cuda_runtime.h"
int occupancyInBlocks;
# 1501 "/usr/local/cuda/include/cuda_runtime.h"
int occupancyInThreads;
# 1502 "/usr/local/cuda/include/cuda_runtime.h"
size_t dynamicSMemSize;
# 1508 "/usr/local/cuda/include/cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) {
# 1509 "/usr/local/cuda/include/cuda_runtime.h"
return cudaErrorInvalidValue;
# 1510 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1516 "/usr/local/cuda/include/cuda_runtime.h"
status = ::cudaGetDevice(&device);
# 1517 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1518 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1519 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1521 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device);
# 1525 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1526 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1527 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1529 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device);
# 1533 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1534 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1535 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1537 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device);
# 1541 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1542 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1543 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1545 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device);
# 1549 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1550 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1551 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1553 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func);
# 1554 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1555 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1556 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1558 "/usr/local/cuda/include/cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock);
# 1564 "/usr/local/cuda/include/cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor;
# 1565 "/usr/local/cuda/include/cuda_runtime.h"
granularity = warpSize;
# 1567 "/usr/local/cuda/include/cuda_runtime.h"
if (blockSizeLimit == 0) {
# 1568 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock;
# 1569 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1571 "/usr/local/cuda/include/cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) {
# 1572 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock;
# 1573 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1575 "/usr/local/cuda/include/cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) {
# 1576 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock;
# 1577 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1579 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity);
# 1581 "/usr/local/cuda/include/cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
# 1585 "/usr/local/cuda/include/cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) {
# 1586 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeToTry = blockSizeLimit;
# 1587 "/usr/local/cuda/include/cuda_runtime.h"
} else {
# 1588 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned;
# 1589 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1591 "/usr/local/cuda/include/cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);
# 1593 "/usr/local/cuda/include/cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags);
# 1600 "/usr/local/cuda/include/cuda_runtime.h"
if (status != (cudaSuccess)) {
# 1601 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1602 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1604 "/usr/local/cuda/include/cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks);
# 1606 "/usr/local/cuda/include/cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) {
# 1607 "/usr/local/cuda/include/cuda_runtime.h"
maxBlockSize = blockSizeToTry;
# 1608 "/usr/local/cuda/include/cuda_runtime.h"
numBlocks = occupancyInBlocks;
# 1609 "/usr/local/cuda/include/cuda_runtime.h"
maxOccupancy = occupancyInThreads;
# 1610 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1614 "/usr/local/cuda/include/cuda_runtime.h"
if (occupancyLimit == maxOccupancy) {
# 1615 "/usr/local/cuda/include/cuda_runtime.h"
break;
# 1616 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1617 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1625 "/usr/local/cuda/include/cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount);
# 1626 "/usr/local/cuda/include/cuda_runtime.h"
(*blockSize) = maxBlockSize;
# 1628 "/usr/local/cuda/include/cuda_runtime.h"
return status;
# 1629 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1662 "/usr/local/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t
# 1663 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1664 "/usr/local/cuda/include/cuda_runtime.h"
minGridSize, int *
# 1665 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, T
# 1666 "/usr/local/cuda/include/cuda_runtime.h"
func, UnaryFunction
# 1667 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeToDynamicSMemSize, int
# 1668 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = 0)
# 1669 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1670 "/usr/local/cuda/include/cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0);
# 1671 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1707 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 1708 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
# 1709 "/usr/local/cuda/include/cuda_runtime.h"
minGridSize, int *
# 1710 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, T
# 1711 "/usr/local/cuda/include/cuda_runtime.h"
func, size_t
# 1712 "/usr/local/cuda/include/cuda_runtime.h"
dynamicSMemSize = 0, int
# 1713 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = 0)
# 1714 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1715 "/usr/local/cuda/include/cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0);
# 1716 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1766 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 1767 "/usr/local/cuda/include/cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 1768 "/usr/local/cuda/include/cuda_runtime.h"
minGridSize, int *
# 1769 "/usr/local/cuda/include/cuda_runtime.h"
blockSize, T
# 1770 "/usr/local/cuda/include/cuda_runtime.h"
func, size_t
# 1771 "/usr/local/cuda/include/cuda_runtime.h"
dynamicSMemSize = 0, int
# 1772 "/usr/local/cuda/include/cuda_runtime.h"
blockSizeLimit = 0, unsigned
# 1773 "/usr/local/cuda/include/cuda_runtime.h"
flags = 0)
# 1774 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1775 "/usr/local/cuda/include/cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags);
# 1776 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1814 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t
# 1815 "/usr/local/cuda/include/cuda_runtime.h"
cudaLaunch(T *
# 1816 "/usr/local/cuda/include/cuda_runtime.h"
func)
# 1818 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1819 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaLaunch((const void *)func);
# 1820 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1851 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t
# 1852 "/usr/local/cuda/include/cuda_runtime.h"
cudaFuncGetAttributes(cudaFuncAttributes *
# 1853 "/usr/local/cuda/include/cuda_runtime.h"
attr, T *
# 1854 "/usr/local/cuda/include/cuda_runtime.h"
entry)
# 1856 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1857 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry);
# 1858 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1880 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim> static inline cudaError_t
# 1881 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1882 "/usr/local/cuda/include/cuda_runtime.h"
surf, cudaArray_const_t
# 1883 "/usr/local/cuda/include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 1884 "/usr/local/cuda/include/cuda_runtime.h"
desc)
# 1886 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1887 "/usr/local/cuda/include/cuda_runtime.h"
return ::cudaBindSurfaceToArray(&surf, array, &desc);
# 1888 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1909 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim> static inline cudaError_t
# 1910 "/usr/local/cuda/include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1911 "/usr/local/cuda/include/cuda_runtime.h"
surf, cudaArray_const_t
# 1912 "/usr/local/cuda/include/cuda_runtime.h"
array)
# 1914 "/usr/local/cuda/include/cuda_runtime.h"
{
# 1915 "/usr/local/cuda/include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 1916 "/usr/local/cuda/include/cuda_runtime.h"
cudaError_t err = ::cudaGetChannelDesc(&desc, array);
# 1918 "/usr/local/cuda/include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err;
# 1919 "/usr/local/cuda/include/cuda_runtime.h"
}
# 1930 "/usr/local/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/stdio.h" 3

# 29 "/usr/include/stdio.h" 3
extern "C" {
# 44 "/usr/include/stdio.h" 3
struct _IO_FILE;
# 48 "/usr/include/stdio.h" 3
typedef _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3
typedef _IO_FILE __FILE;
# 94 "/usr/include/wchar.h" 3
typedef
# 83 "/usr/include/wchar.h" 3
struct {
# 84 "/usr/include/wchar.h" 3
int __count;
# 86 "/usr/include/wchar.h" 3
union {
# 88 "/usr/include/wchar.h" 3
unsigned __wch;
# 92 "/usr/include/wchar.h" 3
char __wchb[4];
# 93 "/usr/include/wchar.h" 3
} __value;
# 94 "/usr/include/wchar.h" 3
} __mbstate_t;
# 25 "/usr/include/_G_config.h" 3
typedef
# 22 "/usr/include/_G_config.h" 3
struct {
# 23 "/usr/include/_G_config.h" 3
__off_t __pos;
# 24 "/usr/include/_G_config.h" 3
__mbstate_t __state;
# 25 "/usr/include/_G_config.h" 3
} _G_fpos_t;
# 30 "/usr/include/_G_config.h" 3
typedef
# 27 "/usr/include/_G_config.h" 3
struct {
# 28 "/usr/include/_G_config.h" 3
__off64_t __pos;
# 29 "/usr/include/_G_config.h" 3
__mbstate_t __state;
# 30 "/usr/include/_G_config.h" 3
} _G_fpos64_t;
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 144 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE;
# 150 "/usr/include/libio.h" 3
typedef void _IO_lock_t;
# 156 "/usr/include/libio.h" 3
struct _IO_marker {
# 157 "/usr/include/libio.h" 3
_IO_marker *_next;
# 158 "/usr/include/libio.h" 3
_IO_FILE *_sbuf;
# 162 "/usr/include/libio.h" 3
int _pos;
# 173 "/usr/include/libio.h" 3
};
# 176 "/usr/include/libio.h" 3
enum __codecvt_result {
# 178 "/usr/include/libio.h" 3
__codecvt_ok,
# 179 "/usr/include/libio.h" 3
__codecvt_partial,
# 180 "/usr/include/libio.h" 3
__codecvt_error,
# 181 "/usr/include/libio.h" 3
__codecvt_noconv
# 182 "/usr/include/libio.h" 3
};
# 241 "/usr/include/libio.h" 3
struct _IO_FILE {
# 242 "/usr/include/libio.h" 3
int _flags;
# 247 "/usr/include/libio.h" 3
char *_IO_read_ptr;
# 248 "/usr/include/libio.h" 3
char *_IO_read_end;
# 249 "/usr/include/libio.h" 3
char *_IO_read_base;
# 250 "/usr/include/libio.h" 3
char *_IO_write_base;
# 251 "/usr/include/libio.h" 3
char *_IO_write_ptr;
# 252 "/usr/include/libio.h" 3
char *_IO_write_end;
# 253 "/usr/include/libio.h" 3
char *_IO_buf_base;
# 254 "/usr/include/libio.h" 3
char *_IO_buf_end;
# 256 "/usr/include/libio.h" 3
char *_IO_save_base;
# 257 "/usr/include/libio.h" 3
char *_IO_backup_base;
# 258 "/usr/include/libio.h" 3
char *_IO_save_end;
# 260 "/usr/include/libio.h" 3
_IO_marker *_markers;
# 262 "/usr/include/libio.h" 3
_IO_FILE *_chain;
# 264 "/usr/include/libio.h" 3
int _fileno;
# 268 "/usr/include/libio.h" 3
int _flags2;
# 270 "/usr/include/libio.h" 3
__off_t _old_offset;
# 274 "/usr/include/libio.h" 3
unsigned short _cur_column;
# 275 "/usr/include/libio.h" 3
signed char _vtable_offset;
# 276 "/usr/include/libio.h" 3
char _shortbuf[1];
# 280 "/usr/include/libio.h" 3
_IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3
__off64_t _offset;
# 297 "/usr/include/libio.h" 3
void *__pad1;
# 298 "/usr/include/libio.h" 3
void *__pad2;
# 299 "/usr/include/libio.h" 3
void *__pad3;
# 300 "/usr/include/libio.h" 3
void *__pad4;
# 302 "/usr/include/libio.h" 3
size_t __pad5;
# 303 "/usr/include/libio.h" 3
int _mode;
# 305 "/usr/include/libio.h" 3
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)];
# 307 "/usr/include/libio.h" 3
};
# 313 "/usr/include/libio.h" 3
struct _IO_FILE_plus;
# 315 "/usr/include/libio.h" 3
extern _IO_FILE_plus _IO_2_1_stdin_;
# 316 "/usr/include/libio.h" 3
extern _IO_FILE_plus _IO_2_1_stdout_;
# 317 "/usr/include/libio.h" 3
extern _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3
typedef __ssize_t __io_read_fn(void * __cookie, char * __buf, size_t __nbytes);
# 341 "/usr/include/libio.h" 3
typedef __ssize_t __io_write_fn(void * __cookie, const char * __buf, size_t __n);
# 350 "/usr/include/libio.h" 3
typedef int __io_seek_fn(void * __cookie, __off64_t * __pos, int __w);
# 353 "/usr/include/libio.h" 3
typedef int __io_close_fn(void * __cookie);
# 358 "/usr/include/libio.h" 3
typedef __io_read_fn cookie_read_function_t;
# 359 "/usr/include/libio.h" 3
typedef __io_write_fn cookie_write_function_t;
# 360 "/usr/include/libio.h" 3
typedef __io_seek_fn cookie_seek_function_t;
# 361 "/usr/include/libio.h" 3
typedef __io_close_fn cookie_close_function_t;
# 370 "/usr/include/libio.h" 3
typedef
# 365 "/usr/include/libio.h" 3
struct {
# 366 "/usr/include/libio.h" 3
__io_read_fn *read;
# 367 "/usr/include/libio.h" 3
__io_write_fn *write;
# 368 "/usr/include/libio.h" 3
__io_seek_fn *seek;
# 369 "/usr/include/libio.h" 3
__io_close_fn *close;
# 370 "/usr/include/libio.h" 3
} _IO_cookie_io_functions_t;
# 371 "/usr/include/libio.h" 3
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
# 373 "/usr/include/libio.h" 3
struct _IO_cookie_file;
# 376 "/usr/include/libio.h" 3
extern void _IO_cookie_init(_IO_cookie_file * __cfile, int __read_write, void * __cookie, _IO_cookie_io_functions_t __fns);
# 382 "/usr/include/libio.h" 3
extern "C" {
# 385 "/usr/include/libio.h" 3
extern int __underflow(_IO_FILE *);
# 386 "/usr/include/libio.h" 3
extern int __uflow(_IO_FILE *);
# 387 "/usr/include/libio.h" 3
extern int __overflow(_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3
extern int _IO_getc(_IO_FILE * __fp);
# 430 "/usr/include/libio.h" 3
extern int _IO_putc(int __c, _IO_FILE * __fp);
# 431 "/usr/include/libio.h" 3
extern int _IO_feof(_IO_FILE * __fp) throw();
# 432 "/usr/include/libio.h" 3
extern int _IO_ferror(_IO_FILE * __fp) throw();
# 434 "/usr/include/libio.h" 3
extern int _IO_peekc_locked(_IO_FILE * __fp);
# 440 "/usr/include/libio.h" 3
extern void _IO_flockfile(_IO_FILE *) throw();
# 441 "/usr/include/libio.h" 3
extern void _IO_funlockfile(_IO_FILE *) throw();
# 442 "/usr/include/libio.h" 3
extern int _IO_ftrylockfile(_IO_FILE *) throw();
# 459 "/usr/include/libio.h" 3
extern int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__);
# 461 "/usr/include/libio.h" 3
extern int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list);
# 463 "/usr/include/libio.h" 3
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
# 464 "/usr/include/libio.h" 3
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
# 466 "/usr/include/libio.h" 3
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
# 467 "/usr/include/libio.h" 3
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
# 469 "/usr/include/libio.h" 3
extern void _IO_free_backup_area(_IO_FILE *) throw();
# 521 "/usr/include/libio.h" 3
}
# 79 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3
typedef _G_fpos_t fpos_t;
# 116 "/usr/include/stdio.h" 3
typedef _G_fpos64_t fpos64_t;
# 168 "/usr/include/stdio.h" 3
extern _IO_FILE *stdin;
# 169 "/usr/include/stdio.h" 3
extern _IO_FILE *stdout;
# 170 "/usr/include/stdio.h" 3
extern _IO_FILE *stderr;
# 178 "/usr/include/stdio.h" 3
extern int remove(const char * __filename) throw();
# 180 "/usr/include/stdio.h" 3
extern int rename(const char * __old, const char * __new) throw();
# 185 "/usr/include/stdio.h" 3
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw();
# 195 "/usr/include/stdio.h" 3
extern FILE *tmpfile();
# 205 "/usr/include/stdio.h" 3
extern FILE *tmpfile64();
# 209 "/usr/include/stdio.h" 3
extern char *tmpnam(char * __s) throw();
# 215 "/usr/include/stdio.h" 3
extern char *tmpnam_r(char * __s) throw();
# 227 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 228 "/usr/include/stdio.h" 3
 __attribute((__malloc__));
# 237 "/usr/include/stdio.h" 3
extern int fclose(FILE * __stream);
# 242 "/usr/include/stdio.h" 3
extern int fflush(FILE * __stream);
# 252 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream);
# 262 "/usr/include/stdio.h" 3
extern int fcloseall();
# 272 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes);
# 278 "/usr/include/stdio.h" 3
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream);
# 297 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes);
# 299 "/usr/include/stdio.h" 3
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream);
# 306 "/usr/include/stdio.h" 3
extern FILE *fdopen(int __fd, const char * __modes) throw();
# 312 "/usr/include/stdio.h" 3
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, _IO_cookie_io_functions_t __io_funcs) throw();
# 319 "/usr/include/stdio.h" 3
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) throw();
# 325 "/usr/include/stdio.h" 3
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) throw();
# 332 "/usr/include/stdio.h" 3
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw();
# 336 "/usr/include/stdio.h" 3
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) throw();
# 343 "/usr/include/stdio.h" 3
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) throw();
# 347 "/usr/include/stdio.h" 3
extern void setlinebuf(FILE * __stream) throw();
# 356 "/usr/include/stdio.h" 3
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...);
# 362 "/usr/include/stdio.h" 3
extern int printf(const char *__restrict__ __format, ...);
# 364 "/usr/include/stdio.h" 3
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw();
# 371 "/usr/include/stdio.h" 3
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg);
# 377 "/usr/include/stdio.h" 3
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg);
# 379 "/usr/include/stdio.h" 3
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw();
# 386 "/usr/include/stdio.h" 3
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 388 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 3, 4)));
# 390 "/usr/include/stdio.h" 3
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 392 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 3, 0)));
# 399 "/usr/include/stdio.h" 3
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 401 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 0)));
# 402 "/usr/include/stdio.h" 3
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 404 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 3)));
# 405 "/usr/include/stdio.h" 3
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 407 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 3)));
# 412 "/usr/include/stdio.h" 3
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 414 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 0)));
# 415 "/usr/include/stdio.h" 3
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 416 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...);
# 431 "/usr/include/stdio.h" 3
extern int scanf(const char *__restrict__ __format, ...);
# 433 "/usr/include/stdio.h" 3
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw();
# 471 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg)
# 473 "/usr/include/stdio.h" 3
 __attribute((__format__(__scanf__, 2, 0)));
# 479 "/usr/include/stdio.h" 3
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg)
# 480 "/usr/include/stdio.h" 3
 __attribute((__format__(__scanf__, 1, 0)));
# 483 "/usr/include/stdio.h" 3
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 485 "/usr/include/stdio.h" 3
 __attribute((__format__(__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream);
# 532 "/usr/include/stdio.h" 3
extern int getc(FILE * __stream);
# 538 "/usr/include/stdio.h" 3
extern int getchar();
# 550 "/usr/include/stdio.h" 3
extern int getc_unlocked(FILE * __stream);
# 551 "/usr/include/stdio.h" 3
extern int getchar_unlocked();
# 561 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream);
# 573 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream);
# 574 "/usr/include/stdio.h" 3
extern int putc(int __c, FILE * __stream);
# 580 "/usr/include/stdio.h" 3
extern int putchar(int __c);
# 594 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream);
# 602 "/usr/include/stdio.h" 3
extern int putc_unlocked(int __c, FILE * __stream);
# 603 "/usr/include/stdio.h" 3
extern int putchar_unlocked(int __c);
# 610 "/usr/include/stdio.h" 3
extern int getw(FILE * __stream);
# 613 "/usr/include/stdio.h" 3
extern int putw(int __w, FILE * __stream);
# 622 "/usr/include/stdio.h" 3
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream);
# 638 "/usr/include/stdio.h" 3
extern char *gets(char * __s) __attribute((__deprecated__));
# 649 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream);
# 665 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream);
# 668 "/usr/include/stdio.h" 3
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream);
# 678 "/usr/include/stdio.h" 3
extern __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream);
# 689 "/usr/include/stdio.h" 3
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream);
# 695 "/usr/include/stdio.h" 3
extern int puts(const char * __s);
# 702 "/usr/include/stdio.h" 3
extern int ungetc(int __c, FILE * __stream);
# 709 "/usr/include/stdio.h" 3
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream);
# 715 "/usr/include/stdio.h" 3
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s);
# 726 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream);
# 737 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream);
# 739 "/usr/include/stdio.h" 3
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream);
# 749 "/usr/include/stdio.h" 3
extern int fseek(FILE * __stream, long __off, int __whence);
# 754 "/usr/include/stdio.h" 3
extern long ftell(FILE * __stream);
# 759 "/usr/include/stdio.h" 3
extern void rewind(FILE * __stream);
# 773 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence);
# 778 "/usr/include/stdio.h" 3
extern __off_t ftello(FILE * __stream);
# 798 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos);
# 803 "/usr/include/stdio.h" 3
extern int fsetpos(FILE * __stream, const fpos_t * __pos);
# 818 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence);
# 819 "/usr/include/stdio.h" 3
extern __off64_t ftello64(FILE * __stream);
# 820 "/usr/include/stdio.h" 3
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos);
# 821 "/usr/include/stdio.h" 3
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos);
# 826 "/usr/include/stdio.h" 3
extern void clearerr(FILE * __stream) throw();
# 828 "/usr/include/stdio.h" 3
extern int feof(FILE * __stream) throw();
# 830 "/usr/include/stdio.h" 3
extern int ferror(FILE * __stream) throw();
# 835 "/usr/include/stdio.h" 3
extern void clearerr_unlocked(FILE * __stream) throw();
# 836 "/usr/include/stdio.h" 3
extern int feof_unlocked(FILE * __stream) throw();
# 837 "/usr/include/stdio.h" 3
extern int ferror_unlocked(FILE * __stream) throw();
# 846 "/usr/include/stdio.h" 3
extern void perror(const char * __s);
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr;
# 27 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern const char *const sys_errlist[];
# 30 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int _sys_nerr;
# 31 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern const char *const _sys_errlist[];
# 858 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw();
# 863 "/usr/include/stdio.h" 3
extern int fileno_unlocked(FILE * __stream) throw();
# 872 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes);
# 878 "/usr/include/stdio.h" 3
extern int pclose(FILE * __stream);
# 884 "/usr/include/stdio.h" 3
extern char *ctermid(char * __s) throw();
# 890 "/usr/include/stdio.h" 3
extern char *cuserid(char * __s);
# 895 "/usr/include/stdio.h" 3
struct obstack;
# 898 "/usr/include/stdio.h" 3
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 900 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 3)));
# 901 "/usr/include/stdio.h" 3
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 904 "/usr/include/stdio.h" 3
 __attribute((__format__(__printf__, 2, 0)));
# 912 "/usr/include/stdio.h" 3
extern void flockfile(FILE * __stream) throw();
# 916 "/usr/include/stdio.h" 3
extern int ftrylockfile(FILE * __stream) throw();
# 919 "/usr/include/stdio.h" 3
extern void funlockfile(FILE * __stream) throw();
# 942 "/usr/include/stdio.h" 3
}
# 30 "/usr/include/complex.h" 3
extern "C" {
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ cacos(double __complex__ __z) throw(); extern double __complex__ __cacos(double __complex__ __z) throw();
# 55 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ casin(double __complex__ __z) throw(); extern double __complex__ __casin(double __complex__ __z) throw();
# 57 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ catan(double __complex__ __z) throw(); extern double __complex__ __catan(double __complex__ __z) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ ccos(double __complex__ __z) throw(); extern double __complex__ __ccos(double __complex__ __z) throw();
# 62 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ csin(double __complex__ __z) throw(); extern double __complex__ __csin(double __complex__ __z) throw();
# 64 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ ctan(double __complex__ __z) throw(); extern double __complex__ __ctan(double __complex__ __z) throw();
# 70 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ cacosh(double __complex__ __z) throw(); extern double __complex__ __cacosh(double __complex__ __z) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ casinh(double __complex__ __z) throw(); extern double __complex__ __casinh(double __complex__ __z) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ catanh(double __complex__ __z) throw(); extern double __complex__ __catanh(double __complex__ __z) throw();
# 77 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ ccosh(double __complex__ __z) throw(); extern double __complex__ __ccosh(double __complex__ __z) throw();
# 79 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ csinh(double __complex__ __z) throw(); extern double __complex__ __csinh(double __complex__ __z) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ ctanh(double __complex__ __z) throw(); extern double __complex__ __ctanh(double __complex__ __z) throw();
# 87 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ cexp(double __complex__ __z) throw(); extern double __complex__ __cexp(double __complex__ __z) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ clog(double __complex__ __z) throw(); extern double __complex__ __clog(double __complex__ __z) throw();
# 95 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ clog10(double __complex__ __z) throw(); extern double __complex__ __clog10(double __complex__ __z) throw();
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ cpow(double __complex__ __x, double __complex__ __y) throw(); extern double __complex__ __cpow(double __complex__ __x, double __complex__ __y) throw();
# 104 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ csqrt(double __complex__ __z) throw(); extern double __complex__ __csqrt(double __complex__ __z) throw();
# 110 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double cabs(double __complex__ __z) throw(); extern double __cabs(double __complex__ __z) throw();
# 113 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double carg(double __complex__ __z) throw(); extern double __carg(double __complex__ __z) throw();
# 116 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ conj(double __complex__ __z) throw(); extern double __complex__ __conj(double __complex__ __z) throw();
# 119 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double __complex__ cproj(double __complex__ __z) throw(); extern double __complex__ __cproj(double __complex__ __z) throw();
# 125 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double cimag(double __complex__ __z) throw(); extern double __cimag(double __complex__ __z) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern double creal(double __complex__ __z) throw(); extern double __creal(double __complex__ __z) throw();
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ cacosf(float __complex__ __z) throw(); extern float __complex__ __cacosf(float __complex__ __z) throw();
# 55 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ casinf(float __complex__ __z) throw(); extern float __complex__ __casinf(float __complex__ __z) throw();
# 57 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ catanf(float __complex__ __z) throw(); extern float __complex__ __catanf(float __complex__ __z) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ ccosf(float __complex__ __z) throw(); extern float __complex__ __ccosf(float __complex__ __z) throw();
# 62 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ csinf(float __complex__ __z) throw(); extern float __complex__ __csinf(float __complex__ __z) throw();
# 64 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ ctanf(float __complex__ __z) throw(); extern float __complex__ __ctanf(float __complex__ __z) throw();
# 70 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ cacoshf(float __complex__ __z) throw(); extern float __complex__ __cacoshf(float __complex__ __z) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ casinhf(float __complex__ __z) throw(); extern float __complex__ __casinhf(float __complex__ __z) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ catanhf(float __complex__ __z) throw(); extern float __complex__ __catanhf(float __complex__ __z) throw();
# 77 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ ccoshf(float __complex__ __z) throw(); extern float __complex__ __ccoshf(float __complex__ __z) throw();
# 79 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ csinhf(float __complex__ __z) throw(); extern float __complex__ __csinhf(float __complex__ __z) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ ctanhf(float __complex__ __z) throw(); extern float __complex__ __ctanhf(float __complex__ __z) throw();
# 87 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ cexpf(float __complex__ __z) throw(); extern float __complex__ __cexpf(float __complex__ __z) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ clogf(float __complex__ __z) throw(); extern float __complex__ __clogf(float __complex__ __z) throw();
# 95 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ clog10f(float __complex__ __z) throw(); extern float __complex__ __clog10f(float __complex__ __z) throw();
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ cpowf(float __complex__ __x, float __complex__ __y) throw(); extern float __complex__ __cpowf(float __complex__ __x, float __complex__ __y) throw();
# 104 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ csqrtf(float __complex__ __z) throw(); extern float __complex__ __csqrtf(float __complex__ __z) throw();
# 110 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float cabsf(float __complex__ __z) throw(); extern float __cabsf(float __complex__ __z) throw();
# 113 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float cargf(float __complex__ __z) throw(); extern float __cargf(float __complex__ __z) throw();
# 116 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ conjf(float __complex__ __z) throw(); extern float __complex__ __conjf(float __complex__ __z) throw();
# 119 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float __complex__ cprojf(float __complex__ __z) throw(); extern float __complex__ __cprojf(float __complex__ __z) throw();
# 125 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float cimagf(float __complex__ __z) throw(); extern float __cimagf(float __complex__ __z) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern float crealf(float __complex__ __z) throw(); extern float __crealf(float __complex__ __z) throw();
# 53 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ cacosl(long double __complex__ __z) throw(); extern long double __complex__ __cacosl(long double __complex__ __z) throw();
# 55 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ casinl(long double __complex__ __z) throw(); extern long double __complex__ __casinl(long double __complex__ __z) throw();
# 57 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ catanl(long double __complex__ __z) throw(); extern long double __complex__ __catanl(long double __complex__ __z) throw();
# 60 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ ccosl(long double __complex__ __z) throw(); extern long double __complex__ __ccosl(long double __complex__ __z) throw();
# 62 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ csinl(long double __complex__ __z) throw(); extern long double __complex__ __csinl(long double __complex__ __z) throw();
# 64 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ ctanl(long double __complex__ __z) throw(); extern long double __complex__ __ctanl(long double __complex__ __z) throw();
# 70 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ cacoshl(long double __complex__ __z) throw(); extern long double __complex__ __cacoshl(long double __complex__ __z) throw();
# 72 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ casinhl(long double __complex__ __z) throw(); extern long double __complex__ __casinhl(long double __complex__ __z) throw();
# 74 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ catanhl(long double __complex__ __z) throw(); extern long double __complex__ __catanhl(long double __complex__ __z) throw();
# 77 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ ccoshl(long double __complex__ __z) throw(); extern long double __complex__ __ccoshl(long double __complex__ __z) throw();
# 79 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ csinhl(long double __complex__ __z) throw(); extern long double __complex__ __csinhl(long double __complex__ __z) throw();
# 81 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ ctanhl(long double __complex__ __z) throw(); extern long double __complex__ __ctanhl(long double __complex__ __z) throw();
# 87 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ cexpl(long double __complex__ __z) throw(); extern long double __complex__ __cexpl(long double __complex__ __z) throw();
# 90 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ clogl(long double __complex__ __z) throw(); extern long double __complex__ __clogl(long double __complex__ __z) throw();
# 95 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ clog10l(long double __complex__ __z) throw(); extern long double __complex__ __clog10l(long double __complex__ __z) throw();
# 101 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ cpowl(long double __complex__ __x, long double __complex__ __y) throw(); extern long double __complex__ __cpowl(long double __complex__ __x, long double __complex__ __y) throw();
# 104 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ csqrtl(long double __complex__ __z) throw(); extern long double __complex__ __csqrtl(long double __complex__ __z) throw();
# 110 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double cabsl(long double __complex__ __z) throw(); extern long double __cabsl(long double __complex__ __z) throw();
# 113 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double cargl(long double __complex__ __z) throw(); extern long double __cargl(long double __complex__ __z) throw();
# 116 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ conjl(long double __complex__ __z) throw(); extern long double __complex__ __conjl(long double __complex__ __z) throw();
# 119 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double __complex__ cprojl(long double __complex__ __z) throw(); extern long double __complex__ __cprojl(long double __complex__ __z) throw();
# 125 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double cimagl(long double __complex__ __z) throw(); extern long double __cimagl(long double __complex__ __z) throw();
# 128 "/usr/include/x86_64-linux-gnu/bits/cmathcalls.h" 3
extern long double creall(long double __complex__ __z) throw(); extern long double __creall(long double __complex__ __z) throw();
# 110 "/usr/include/complex.h" 3
}
# 48 "/usr/include/stdint.h" 3
typedef unsigned char uint8_t;
# 49 "/usr/include/stdint.h" 3
typedef unsigned short uint16_t;
# 51 "/usr/include/stdint.h" 3
typedef unsigned uint32_t;
# 55 "/usr/include/stdint.h" 3
typedef unsigned long uint64_t;
# 65 "/usr/include/stdint.h" 3
typedef signed char int_least8_t;
# 66 "/usr/include/stdint.h" 3
typedef short int_least16_t;
# 67 "/usr/include/stdint.h" 3
typedef int int_least32_t;
# 69 "/usr/include/stdint.h" 3
typedef long int_least64_t;
# 76 "/usr/include/stdint.h" 3
typedef unsigned char uint_least8_t;
# 77 "/usr/include/stdint.h" 3
typedef unsigned short uint_least16_t;
# 78 "/usr/include/stdint.h" 3
typedef unsigned uint_least32_t;
# 80 "/usr/include/stdint.h" 3
typedef unsigned long uint_least64_t;
# 90 "/usr/include/stdint.h" 3
typedef signed char int_fast8_t;
# 92 "/usr/include/stdint.h" 3
typedef long int_fast16_t;
# 93 "/usr/include/stdint.h" 3
typedef long int_fast32_t;
# 94 "/usr/include/stdint.h" 3
typedef long int_fast64_t;
# 103 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t;
# 105 "/usr/include/stdint.h" 3
typedef unsigned long uint_fast16_t;
# 106 "/usr/include/stdint.h" 3
typedef unsigned long uint_fast32_t;
# 107 "/usr/include/stdint.h" 3
typedef unsigned long uint_fast64_t;
# 119 "/usr/include/stdint.h" 3
typedef long intptr_t;
# 122 "/usr/include/stdint.h" 3
typedef unsigned long uintptr_t;
# 134 "/usr/include/stdint.h" 3
typedef long intmax_t;
# 135 "/usr/include/stdint.h" 3
typedef unsigned long uintmax_t;
# 67 "/usr/include/c++/5/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) {
# 69 "/usr/include/c++/5/bits/stl_relops.h" 3
namespace rel_ops {
# 85 "/usr/include/c++/5/bits/stl_relops.h" 3
template< class _Tp> inline bool
# 87 "/usr/include/c++/5/bits/stl_relops.h" 3
operator!=(const _Tp &__x, const _Tp &__y)
# 88 "/usr/include/c++/5/bits/stl_relops.h" 3
{ return !(__x == __y); }
# 98 "/usr/include/c++/5/bits/stl_relops.h" 3
template< class _Tp> inline bool
# 100 "/usr/include/c++/5/bits/stl_relops.h" 3
operator>(const _Tp &__x, const _Tp &__y)
# 101 "/usr/include/c++/5/bits/stl_relops.h" 3
{ return __y < __x; }
# 111 "/usr/include/c++/5/bits/stl_relops.h" 3
template< class _Tp> inline bool
# 113 "/usr/include/c++/5/bits/stl_relops.h" 3
operator<=(const _Tp &__x, const _Tp &__y)
# 114 "/usr/include/c++/5/bits/stl_relops.h" 3
{ return !(__y < __x); }
# 124 "/usr/include/c++/5/bits/stl_relops.h" 3
template< class _Tp> inline bool
# 126 "/usr/include/c++/5/bits/stl_relops.h" 3
operator>=(const _Tp &__x, const _Tp &__y)
# 127 "/usr/include/c++/5/bits/stl_relops.h" 3
{ return !(__x < __y); }
# 130 "/usr/include/c++/5/bits/stl_relops.h" 3
}
# 132 "/usr/include/c++/5/bits/stl_relops.h" 3
}
# 36 "/usr/include/c++/5/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) {
# 45 "/usr/include/c++/5/bits/move.h" 3
template< class _Tp> inline _Tp *
# 47 "/usr/include/c++/5/bits/move.h" 3
__addressof(_Tp &__r)
# 48 "/usr/include/c++/5/bits/move.h" 3
{
# 49 "/usr/include/c++/5/bits/move.h" 3
return reinterpret_cast< _Tp *>(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__r))));
# 51 "/usr/include/c++/5/bits/move.h" 3
}
# 54 "/usr/include/c++/5/bits/move.h" 3
}
# 159 "/usr/include/c++/5/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) {
# 174 "/usr/include/c++/5/bits/move.h" 3
template< class _Tp> inline void
# 176 "/usr/include/c++/5/bits/move.h" 3
swap(_Tp &__a, _Tp &__b)
# 181 "/usr/include/c++/5/bits/move.h" 3
{
# 185 "/usr/include/c++/5/bits/move.h" 3
_Tp __tmp = __a;
# 186 "/usr/include/c++/5/bits/move.h" 3
__a = __b;
# 187 "/usr/include/c++/5/bits/move.h" 3
__b = __tmp;
# 188 "/usr/include/c++/5/bits/move.h" 3
}
# 193 "/usr/include/c++/5/bits/move.h" 3
template< class _Tp, size_t _Nm> inline void
# 195 "/usr/include/c++/5/bits/move.h" 3
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
# 199 "/usr/include/c++/5/bits/move.h" 3
{
# 200 "/usr/include/c++/5/bits/move.h" 3
for (size_t __n = (0); __n < _Nm; ++__n) {
# 201 "/usr/include/c++/5/bits/move.h" 3
swap((__a)[__n], (__b)[__n]); }
# 202 "/usr/include/c++/5/bits/move.h" 3
}
# 206 "/usr/include/c++/5/bits/move.h" 3
}
# 65 "/usr/include/c++/5/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) {
# 95 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2>
# 96 "/usr/include/c++/5/bits/stl_pair.h" 3
struct pair {
# 98 "/usr/include/c++/5/bits/stl_pair.h" 3
typedef _T1 first_type;
# 99 "/usr/include/c++/5/bits/stl_pair.h" 3
typedef _T2 second_type;
# 101 "/usr/include/c++/5/bits/stl_pair.h" 3
_T1 first;
# 102 "/usr/include/c++/5/bits/stl_pair.h" 3
_T2 second;
# 108 "/usr/include/c++/5/bits/stl_pair.h" 3
pair() : first(), second()
# 109 "/usr/include/c++/5/bits/stl_pair.h" 3
{ }
# 112 "/usr/include/c++/5/bits/stl_pair.h" 3
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b)
# 113 "/usr/include/c++/5/bits/stl_pair.h" 3
{ }
# 117 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _U1, class _U2>
# 118 "/usr/include/c++/5/bits/stl_pair.h" 3
pair(const std::pair< _U1, _U2> &__p) : first((__p.first)), second((__p.second))
# 119 "/usr/include/c++/5/bits/stl_pair.h" 3
{ }
# 209 "/usr/include/c++/5/bits/stl_pair.h" 3
};
# 212 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 214 "/usr/include/c++/5/bits/stl_pair.h" 3
operator==(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 215 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); }
# 218 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 220 "/usr/include/c++/5/bits/stl_pair.h" 3
operator<(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 221 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second)));
# 222 "/usr/include/c++/5/bits/stl_pair.h" 3
}
# 225 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 227 "/usr/include/c++/5/bits/stl_pair.h" 3
operator!=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 228 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return !(__x == __y); }
# 231 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 233 "/usr/include/c++/5/bits/stl_pair.h" 3
operator>(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 234 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return __y < __x; }
# 237 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 239 "/usr/include/c++/5/bits/stl_pair.h" 3
operator<=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 240 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return !(__y < __x); }
# 243 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline bool
# 245 "/usr/include/c++/5/bits/stl_pair.h" 3
operator>=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 246 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return !(__x < __y); }
# 284 "/usr/include/c++/5/bits/stl_pair.h" 3
template< class _T1, class _T2> inline pair< _T1, _T2>
# 286 "/usr/include/c++/5/bits/stl_pair.h" 3
make_pair(_T1 __x, _T2 __y)
# 287 "/usr/include/c++/5/bits/stl_pair.h" 3
{ return pair< _T1, _T2> (__x, __y); }
# 293 "/usr/include/c++/5/bits/stl_pair.h" 3
}
# 42 "/usr/include/c++/5/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) {
# 48 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_bad_exception() __attribute((__noreturn__));
# 52 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_bad_alloc() __attribute((__noreturn__));
# 56 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_bad_cast() __attribute((__noreturn__));
# 59 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_bad_typeid() __attribute((__noreturn__));
# 63 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_logic_error(const char *) __attribute((__noreturn__));
# 66 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_domain_error(const char *) __attribute((__noreturn__));
# 69 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_invalid_argument(const char *) __attribute((__noreturn__));
# 72 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_length_error(const char *) __attribute((__noreturn__));
# 75 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_out_of_range(const char *) __attribute((__noreturn__));
# 78 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79 "/usr/include/c++/5/bits/functexcept.h" 3
 __attribute((__format__(__gnu_printf__, 1, 2)));
# 82 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_runtime_error(const char *) __attribute((__noreturn__));
# 85 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_range_error(const char *) __attribute((__noreturn__));
# 88 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_overflow_error(const char *) __attribute((__noreturn__));
# 91 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_underflow_error(const char *) __attribute((__noreturn__));
# 95 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_ios_failure(const char *) __attribute((__noreturn__));
# 98 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_system_error(int) __attribute((__noreturn__));
# 101 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_future_error(int) __attribute((__noreturn__));
# 105 "/usr/include/c++/5/bits/functexcept.h" 3
void __throw_bad_function_call() __attribute((__noreturn__));
# 108 "/usr/include/c++/5/bits/functexcept.h" 3
}
# 37 "/usr/include/c++/5/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 54 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value>
# 55 "/usr/include/c++/5/ext/numeric_traits.h" 3
struct __numeric_traits_integer {
# 58 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0));
# 59 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0)));
# 63 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const bool __is_signed = (((_Value)(-1)) < 0);
# 64 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0));
# 65 "/usr/include/c++/5/ext/numeric_traits.h" 3
};
# 67 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const _Value
# 68 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__min;
# 70 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const _Value
# 71 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__max;
# 73 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const bool
# 74 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__is_signed;
# 76 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const int
# 77 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__digits;
# 99 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value>
# 100 "/usr/include/c++/5/ext/numeric_traits.h" 3
struct __numeric_traits_floating {
# 103 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const int __max_digits10 = ((2) + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136)));
# 106 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const bool __is_signed = true;
# 107 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18));
# 108 "/usr/include/c++/5/ext/numeric_traits.h" 3
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932));
# 109 "/usr/include/c++/5/ext/numeric_traits.h" 3
};
# 111 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const int
# 112 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_digits10;
# 114 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const bool
# 115 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__is_signed;
# 117 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const int
# 118 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__digits10;
# 120 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value> const int
# 121 "/usr/include/c++/5/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_exponent10;
# 123 "/usr/include/c++/5/ext/numeric_traits.h" 3
template< class _Value>
# 124 "/usr/include/c++/5/ext/numeric_traits.h" 3
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type {
# 128 "/usr/include/c++/5/ext/numeric_traits.h" 3
};
# 131 "/usr/include/c++/5/ext/numeric_traits.h" 3
}
# 70 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) {
# 89 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { };
# 92 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct output_iterator_tag { };
# 95 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct forward_iterator_tag : public input_iterator_tag { };
# 99 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct bidirectional_iterator_tag : public forward_iterator_tag { };
# 103 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class
# 117 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
_Pointer = _Tp *, class _Reference = _Tp &>
# 118 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct iterator {
# 121 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Category iterator_category;
# 123 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 125 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Distance difference_type;
# 127 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Pointer pointer;
# 129 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Reference reference;
# 130 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 165 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Iterator>
# 166 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct iterator_traits {
# 168 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_category iterator_category;
# 169 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::value_type value_type;
# 170 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::difference_type difference_type;
# 171 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::pointer pointer;
# 172 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::reference reference;
# 173 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 177 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 178 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct iterator_traits< _Tp *> {
# 180 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 181 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 182 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 183 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Tp *pointer;
# 184 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Tp &reference;
# 185 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 188 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 189 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct iterator_traits< const _Tp *> {
# 191 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 192 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 193 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 194 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef const _Tp *pointer;
# 195 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef const _Tp &reference;
# 196 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 202 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Iter> inline typename iterator_traits< _Iter> ::iterator_category
# 204 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
__iterator_category(const _Iter &)
# 205 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
{ return typename iterator_traits< _Iter> ::iterator_category(); }
# 211 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Iterator, bool _HasBase>
# 212 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct _Iter_base {
# 214 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef _Iterator iterator_type;
# 215 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
static iterator_type _S_base(_Iterator __it)
# 216 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
{ return __it; }
# 217 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 219 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
template< class _Iterator>
# 220 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
struct _Iter_base< _Iterator, true> {
# 222 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_type iterator_type;
# 223 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
static iterator_type _S_base(_Iterator __it)
# 224 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
{ return (__it.base()); }
# 225 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
};
# 236 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
}
# 46 "/usr/include/c++/5/debug/debug.h" 3
namespace std {
# 48 "/usr/include/c++/5/debug/debug.h" 3
namespace __debug { }
# 49 "/usr/include/c++/5/debug/debug.h" 3
}
# 54 "/usr/include/c++/5/debug/debug.h" 3
namespace __gnu_debug {
# 56 "/usr/include/c++/5/debug/debug.h" 3
using namespace std::__debug;
# 57 "/usr/include/c++/5/debug/debug.h" 3
}
# 67 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) {
# 71 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type
# 73 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)
# 75 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 79 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
typename iterator_traits< _InputIterator> ::difference_type __n = (0);
# 80 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
while (__first != __last)
# 81 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 82 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
++__first;
# 83 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
++__n;
# 84 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 85 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
return __n;
# 86 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 88 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _RandomAccessIterator> inline typename iterator_traits< _RandomAccessIterator> ::difference_type
# 90 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
# 92 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 96 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
return __last - __first;
# 97 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 112 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type
# 114 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
distance(_InputIterator __first, _InputIterator __last)
# 115 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 117 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
return std::__distance(__first, __last, std::__iterator_category(__first));
# 119 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 121 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void
# 123 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag)
# 124 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 127 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
;
# 128 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
while (__n--) {
# 129 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
++__i; }
# 130 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 132 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _BidirectionalIterator, class _Distance> inline void
# 134 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag)
# 136 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 140 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
if (__n > 0) {
# 141 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
while (__n--) {
# 142 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
++__i; } } else {
# 144 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
while (__n++) {
# 145 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
--__i; } }
# 146 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 148 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _RandomAccessIterator, class _Distance> inline void
# 150 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag)
# 152 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 156 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
__i += __n;
# 157 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 171 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void
# 173 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
advance(_InputIterator &__i, _Distance __n)
# 174 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
{
# 176 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
typename iterator_traits< _InputIterator> ::difference_type __d = __n;
# 177 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
std::__advance(__i, __d, std::__iterator_category(__i));
# 178 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 203 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/include/c++/5/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) {
# 96 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator>
# 97 "/usr/include/c++/5/bits/stl_iterator.h" 3
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference> {
# 105 "/usr/include/c++/5/bits/stl_iterator.h" 3
protected: _Iterator current;
# 107 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef iterator_traits< _Iterator> __traits_type;
# 110 "/usr/include/c++/5/bits/stl_iterator.h" 3
public: typedef _Iterator iterator_type;
# 111 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::difference_type difference_type;
# 112 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::pointer pointer;
# 113 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::reference reference;
# 121 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator() : current() { }
# 127 "/usr/include/c++/5/bits/stl_iterator.h" 3
explicit reverse_iterator(iterator_type __x) : current(__x) { }
# 132 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator(const reverse_iterator &__x) : current(__x.current)
# 133 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 139 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iter>
# 140 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator(const ::std::reverse_iterator< _Iter> &__x) : current((__x.base()))
# 141 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 147 "/usr/include/c++/5/bits/stl_iterator.h" 3
iterator_type base() const
# 148 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return current; }
# 161 "/usr/include/c++/5/bits/stl_iterator.h" 3
reference operator*() const
# 162 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 163 "/usr/include/c++/5/bits/stl_iterator.h" 3
_Iterator __tmp = current;
# 164 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *(--__tmp);
# 165 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 173 "/usr/include/c++/5/bits/stl_iterator.h" 3
pointer operator->() const
# 174 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return &operator*(); }
# 182 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator &operator++()
# 183 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 184 "/usr/include/c++/5/bits/stl_iterator.h" 3
--(current);
# 185 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 186 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 194 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator operator++(int)
# 195 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 196 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator __tmp = *this;
# 197 "/usr/include/c++/5/bits/stl_iterator.h" 3
--(current);
# 198 "/usr/include/c++/5/bits/stl_iterator.h" 3
return __tmp;
# 199 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 207 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator &operator--()
# 208 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 209 "/usr/include/c++/5/bits/stl_iterator.h" 3
++(current);
# 210 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 211 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 219 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator operator--(int)
# 220 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 221 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator __tmp = *this;
# 222 "/usr/include/c++/5/bits/stl_iterator.h" 3
++(current);
# 223 "/usr/include/c++/5/bits/stl_iterator.h" 3
return __tmp;
# 224 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 232 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator operator+(difference_type __n) const
# 233 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((reverse_iterator)((current) - __n)); }
# 242 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator &operator+=(difference_type __n)
# 243 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 244 "/usr/include/c++/5/bits/stl_iterator.h" 3
(current) -= __n;
# 245 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 246 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 254 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator operator-(difference_type __n) const
# 255 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((reverse_iterator)((current) + __n)); }
# 264 "/usr/include/c++/5/bits/stl_iterator.h" 3
reverse_iterator &operator-=(difference_type __n)
# 265 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 266 "/usr/include/c++/5/bits/stl_iterator.h" 3
(current) += __n;
# 267 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 268 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 276 "/usr/include/c++/5/bits/stl_iterator.h" 3
reference operator[](difference_type __n) const
# 277 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *((*this) + __n); }
# 278 "/usr/include/c++/5/bits/stl_iterator.h" 3
};
# 290 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 292 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator==(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 293 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 294 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__x.base()) == (__y.base()); }
# 296 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 298 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 299 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 300 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__y.base()) < (__x.base()); }
# 302 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 304 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator!=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 305 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 306 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__x == __y); }
# 308 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 310 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 311 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 312 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return __y < __x; }
# 314 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 316 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 317 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 318 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__y < __x); }
# 320 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline bool
# 322 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 323 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 324 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__x < __y); }
# 326 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline typename reverse_iterator< _Iterator> ::difference_type
# 328 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator-(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 329 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 330 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__y.base()) - (__x.base()); }
# 332 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator> inline reverse_iterator< _Iterator>
# 334 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator> &
# 335 "/usr/include/c++/5/bits/stl_iterator.h" 3
__x)
# 336 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((reverse_iterator< _Iterator> )((__x.base()) - __n)); }
# 340 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 342 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator==(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 343 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 344 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__x.base()) == (__y.base()); }
# 346 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 348 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 349 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 350 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__y.base()) < (__x.base()); }
# 352 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 354 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator!=(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 355 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 356 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__x == __y); }
# 358 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 360 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 361 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 362 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return __y < __x; }
# 364 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 366 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<=(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 367 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 368 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__y < __x); }
# 370 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline bool
# 372 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>=(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 373 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 374 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return !(__x < __y); }
# 376 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline typename reverse_iterator< _IteratorL> ::difference_type
# 385 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator-(const reverse_iterator< _IteratorL> &__x, const reverse_iterator< _IteratorR> &
# 386 "/usr/include/c++/5/bits/stl_iterator.h" 3
__y)
# 388 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__y.base()) - (__x.base()); }
# 414 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container>
# 415 "/usr/include/c++/5/bits/stl_iterator.h" 3
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 419 "/usr/include/c++/5/bits/stl_iterator.h" 3
protected: _Container *container;
# 423 "/usr/include/c++/5/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 427 "/usr/include/c++/5/bits/stl_iterator.h" 3
explicit back_insert_iterator(_Container &__x) : container((&__x)) { }
# 442 "/usr/include/c++/5/bits/stl_iterator.h" 3
back_insert_iterator &operator=(typename _Container::const_reference __value)
# 443 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 444 "/usr/include/c++/5/bits/stl_iterator.h" 3
((container)->push_back(__value));
# 445 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 446 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 465 "/usr/include/c++/5/bits/stl_iterator.h" 3
back_insert_iterator &operator*()
# 466 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 470 "/usr/include/c++/5/bits/stl_iterator.h" 3
back_insert_iterator &operator++()
# 471 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 475 "/usr/include/c++/5/bits/stl_iterator.h" 3
back_insert_iterator operator++(int)
# 476 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 477 "/usr/include/c++/5/bits/stl_iterator.h" 3
};
# 490 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>
# 492 "/usr/include/c++/5/bits/stl_iterator.h" 3
back_inserter(_Container &__x)
# 493 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((back_insert_iterator< _Container> )(__x)); }
# 505 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container>
# 506 "/usr/include/c++/5/bits/stl_iterator.h" 3
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 510 "/usr/include/c++/5/bits/stl_iterator.h" 3
protected: _Container *container;
# 514 "/usr/include/c++/5/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 517 "/usr/include/c++/5/bits/stl_iterator.h" 3
explicit front_insert_iterator(_Container &__x) : container((&__x)) { }
# 532 "/usr/include/c++/5/bits/stl_iterator.h" 3
front_insert_iterator &operator=(typename _Container::const_reference __value)
# 533 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 534 "/usr/include/c++/5/bits/stl_iterator.h" 3
((container)->push_front(__value));
# 535 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 536 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 555 "/usr/include/c++/5/bits/stl_iterator.h" 3
front_insert_iterator &operator*()
# 556 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 560 "/usr/include/c++/5/bits/stl_iterator.h" 3
front_insert_iterator &operator++()
# 561 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 565 "/usr/include/c++/5/bits/stl_iterator.h" 3
front_insert_iterator operator++(int)
# 566 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 567 "/usr/include/c++/5/bits/stl_iterator.h" 3
};
# 580 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>
# 582 "/usr/include/c++/5/bits/stl_iterator.h" 3
front_inserter(_Container &__x)
# 583 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((front_insert_iterator< _Container> )(__x)); }
# 599 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container>
# 600 "/usr/include/c++/5/bits/stl_iterator.h" 3
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 604 "/usr/include/c++/5/bits/stl_iterator.h" 3
protected: _Container *container;
# 605 "/usr/include/c++/5/bits/stl_iterator.h" 3
typename _Container::iterator iter;
# 609 "/usr/include/c++/5/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 615 "/usr/include/c++/5/bits/stl_iterator.h" 3
insert_iterator(_Container &__x, typename _Container::iterator __i) : container((&__x)), iter(__i)
# 616 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 643 "/usr/include/c++/5/bits/stl_iterator.h" 3
insert_iterator &operator=(typename _Container::const_reference __value)
# 644 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 645 "/usr/include/c++/5/bits/stl_iterator.h" 3
(iter) = ((container)->insert(iter, __value));
# 646 "/usr/include/c++/5/bits/stl_iterator.h" 3
++(iter);
# 647 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 648 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 669 "/usr/include/c++/5/bits/stl_iterator.h" 3
insert_iterator &operator*()
# 670 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 674 "/usr/include/c++/5/bits/stl_iterator.h" 3
insert_iterator &operator++()
# 675 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 679 "/usr/include/c++/5/bits/stl_iterator.h" 3
insert_iterator &operator++(int)
# 680 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *this; }
# 681 "/usr/include/c++/5/bits/stl_iterator.h" 3
};
# 694 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Container, class _Iterator> inline insert_iterator< _Container>
# 696 "/usr/include/c++/5/bits/stl_iterator.h" 3
inserter(_Container &__x, _Iterator __i)
# 697 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 698 "/usr/include/c++/5/bits/stl_iterator.h" 3
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i);
# 700 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 705 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 707 "/usr/include/c++/5/bits/stl_iterator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 718 "/usr/include/c++/5/bits/stl_iterator.h" 3
using std::iterator_traits;
# 719 "/usr/include/c++/5/bits/stl_iterator.h" 3
using std::iterator;
# 720 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container>
# 721 "/usr/include/c++/5/bits/stl_iterator.h" 3
class __normal_iterator {
# 724 "/usr/include/c++/5/bits/stl_iterator.h" 3
protected: _Iterator _M_current;
# 726 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef std::iterator_traits< _Iterator> __traits_type;
# 729 "/usr/include/c++/5/bits/stl_iterator.h" 3
public: typedef _Iterator iterator_type;
# 730 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category;
# 731 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::value_type value_type;
# 732 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type;
# 733 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::reference reference;
# 734 "/usr/include/c++/5/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::pointer pointer;
# 736 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator() : _M_current(_Iterator())
# 737 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 740 "/usr/include/c++/5/bits/stl_iterator.h" 3
explicit __normal_iterator(const _Iterator &__i) : _M_current(__i)
# 741 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 744 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iter>
# 745 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator(const __gnu_cxx::__normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type> &
# 748 "/usr/include/c++/5/bits/stl_iterator.h" 3
__i) : _M_current((__i.base()))
# 749 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ }
# 753 "/usr/include/c++/5/bits/stl_iterator.h" 3
reference operator*() const
# 754 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return *(_M_current); }
# 757 "/usr/include/c++/5/bits/stl_iterator.h" 3
pointer operator->() const
# 758 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return _M_current; }
# 761 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator &operator++()
# 762 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 763 "/usr/include/c++/5/bits/stl_iterator.h" 3
++(_M_current);
# 764 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 765 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 768 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator operator++(int)
# 769 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((__normal_iterator)((_M_current)++)); }
# 773 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator &operator--()
# 774 "/usr/include/c++/5/bits/stl_iterator.h" 3
{
# 775 "/usr/include/c++/5/bits/stl_iterator.h" 3
--(_M_current);
# 776 "/usr/include/c++/5/bits/stl_iterator.h" 3
return *this;
# 777 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 780 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator operator--(int)
# 781 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((__normal_iterator)((_M_current)--)); }
# 785 "/usr/include/c++/5/bits/stl_iterator.h" 3
reference operator[](difference_type __n) const
# 786 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (_M_current)[__n]; }
# 789 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator &operator+=(difference_type __n)
# 790 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ (_M_current) += __n; return *this; }
# 793 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator operator+(difference_type __n) const
# 794 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((__normal_iterator)((_M_current) + __n)); }
# 797 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator &operator-=(difference_type __n)
# 798 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ (_M_current) -= __n; return *this; }
# 801 "/usr/include/c++/5/bits/stl_iterator.h" 3
__normal_iterator operator-(difference_type __n) const
# 802 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((__normal_iterator)((_M_current) - __n)); }
# 805 "/usr/include/c++/5/bits/stl_iterator.h" 3
const _Iterator &base() const
# 806 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return _M_current; }
# 807 "/usr/include/c++/5/bits/stl_iterator.h" 3
};
# 818 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 820 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 821 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 823 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) == (__rhs.base()); }
# 825 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 827 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 828 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 830 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) == (__rhs.base()); }
# 832 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 834 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 835 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 837 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) != (__rhs.base()); }
# 839 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 841 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 842 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 844 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) != (__rhs.base()); }
# 847 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 849 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 850 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 852 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) < (__rhs.base()); }
# 854 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 856 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 857 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 859 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) < (__rhs.base()); }
# 861 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 863 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 864 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 866 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) > (__rhs.base()); }
# 868 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 870 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 871 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 873 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) > (__rhs.base()); }
# 875 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 877 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 878 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 880 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) <= (__rhs.base()); }
# 882 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 884 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 885 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 887 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) <= (__rhs.base()); }
# 889 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool
# 891 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 892 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 894 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) >= (__rhs.base()); }
# 896 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline bool
# 898 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 899 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 901 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) >= (__rhs.base()); }
# 907 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline typename __normal_iterator< _IteratorL, _Container> ::difference_type
# 916 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator-(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 917 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 919 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) - (__rhs.base()); }
# 921 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type
# 923 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator-(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 924 "/usr/include/c++/5/bits/stl_iterator.h" 3
__rhs)
# 926 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return (__lhs.base()) - (__rhs.base()); }
# 928 "/usr/include/c++/5/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>
# 930 "/usr/include/c++/5/bits/stl_iterator.h" 3
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type
# 931 "/usr/include/c++/5/bits/stl_iterator.h" 3
__n, const __normal_iterator< _Iterator, _Container> &__i)
# 933 "/usr/include/c++/5/bits/stl_iterator.h" 3
{ return ((__normal_iterator< _Iterator, _Container> )((__i.base()) + __n)); }
# 936 "/usr/include/c++/5/bits/stl_iterator.h" 3
}
# 33 "/usr/include/c++/5/bits/predefined_ops.h" 3
namespace __gnu_cxx {
# 35 "/usr/include/c++/5/bits/predefined_ops.h" 3
namespace __ops {
# 37 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_less_iter {
# 39 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator1, class _Iterator2> bool
# 42 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator1 __it1, _Iterator2 __it2) const
# 43 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it1) < (*__it2); }
# 44 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 47 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_less_iter __iter_less_iter()
# 48 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_less_iter(); }
# 50 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_less_val {
# 52 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator, class _Value> bool
# 54 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it, _Value &__val) const
# 55 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it) < __val; }
# 56 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 59 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_less_val __iter_less_val()
# 60 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_less_val(); }
# 63 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_less_val __iter_comp_val(_Iter_less_iter)
# 64 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_less_val(); }
# 66 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Val_less_iter {
# 68 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Value, class _Iterator> bool
# 70 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Value &__val, _Iterator __it) const
# 71 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return __val < (*__it); }
# 72 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 75 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Val_less_iter __val_less_iter()
# 76 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Val_less_iter(); }
# 79 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Val_less_iter __val_comp_iter(_Iter_less_iter)
# 80 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Val_less_iter(); }
# 82 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_equal_to_iter {
# 84 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator1, class _Iterator2> bool
# 86 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator1 __it1, _Iterator2 __it2) const
# 87 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it1) == (*__it2); }
# 88 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 91 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_equal_to_iter __iter_equal_to_iter()
# 92 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_equal_to_iter(); }
# 94 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_equal_to_val {
# 96 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator, class _Value> bool
# 98 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it, _Value &__val) const
# 99 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it) == __val; }
# 100 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 103 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_equal_to_val __iter_equal_to_val()
# 104 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_equal_to_val(); }
# 107 "/usr/include/c++/5/bits/predefined_ops.h" 3
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter)
# 108 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_equal_to_val(); }
# 110 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare>
# 111 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_comp_iter {
# 113 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Compare _M_comp;
# 115 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_comp_iter(_Compare __comp) : _M_comp(__comp)
# 117 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 119 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator1, class _Iterator2> bool
# 122 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator1 __it1, _Iterator2 __it2)
# 123 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_comp)(*__it1, *__it2); }
# 124 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 126 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare> inline _Iter_comp_iter< _Compare>
# 129 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_iter(_Compare __comp)
# 130 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_comp_iter< _Compare> )(__comp)); }
# 132 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare>
# 133 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_comp_val {
# 135 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Compare _M_comp;
# 137 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_comp_val(_Compare __comp) : _M_comp(__comp)
# 139 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 141 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator, class _Value> bool
# 143 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it, _Value &__val)
# 144 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_comp)(*__it, __val); }
# 145 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 147 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare> inline _Iter_comp_val< _Compare>
# 149 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_val(_Compare __comp)
# 150 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_comp_val< _Compare> )(__comp)); }
# 152 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare> inline _Iter_comp_val< _Compare>
# 154 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_val(_Iter_comp_iter< _Compare> __comp)
# 155 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_comp_val< _Compare> )((__comp._M_comp))); }
# 157 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare>
# 158 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Val_comp_iter {
# 160 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Compare _M_comp;
# 162 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Val_comp_iter(_Compare __comp) : _M_comp(__comp)
# 164 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 166 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Value, class _Iterator> bool
# 168 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Value &__val, _Iterator __it)
# 169 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_comp)(__val, *__it); }
# 170 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 172 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare> inline _Val_comp_iter< _Compare>
# 174 "/usr/include/c++/5/bits/predefined_ops.h" 3
__val_comp_iter(_Compare __comp)
# 175 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Val_comp_iter< _Compare> )(__comp)); }
# 177 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare> inline _Val_comp_iter< _Compare>
# 179 "/usr/include/c++/5/bits/predefined_ops.h" 3
__val_comp_iter(_Iter_comp_iter< _Compare> __comp)
# 180 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Val_comp_iter< _Compare> )((__comp._M_comp))); }
# 182 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Value>
# 183 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_equals_val {
# 185 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Value &_M_value;
# 187 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_equals_val(_Value &__value) : _M_value(__value)
# 189 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 191 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator> bool
# 193 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it)
# 194 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it) == (_M_value); }
# 195 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 197 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Value> inline _Iter_equals_val< _Value>
# 199 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_equals_val(_Value &__val)
# 200 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_equals_val< _Value> )(__val)); }
# 202 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator1>
# 203 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_equals_iter {
# 205 "/usr/include/c++/5/bits/predefined_ops.h" 3
typename std::iterator_traits< _Iterator1> ::reference _M_ref;
# 207 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_equals_iter(_Iterator1 __it1) : _M_ref(*__it1)
# 209 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 211 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator2> bool
# 213 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator2 __it2)
# 214 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (*__it2) == (_M_ref); }
# 215 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 217 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator> inline _Iter_equals_iter< _Iterator>
# 219 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
# 220 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_equals_iter< _Iterator> )(__it)); }
# 222 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Predicate>
# 223 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_pred {
# 225 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Predicate _M_pred;
# 227 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_pred(_Predicate __pred) : _M_pred(__pred)
# 229 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 231 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator> bool
# 233 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it)
# 234 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_pred)(*__it); }
# 235 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 237 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Predicate> inline _Iter_pred< _Predicate>
# 239 "/usr/include/c++/5/bits/predefined_ops.h" 3
__pred_iter(_Predicate __pred)
# 240 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_pred< _Predicate> )(__pred)); }
# 242 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare, class _Value>
# 243 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_comp_to_val {
# 245 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Compare _M_comp;
# 246 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Value &_M_value;
# 248 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(__comp), _M_value(__value)
# 250 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 252 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator> bool
# 254 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it)
# 255 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_comp)(*__it, _M_value); }
# 256 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 258 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>
# 260 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_val(_Compare __comp, _Value &__val)
# 261 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_comp_to_val< _Compare, _Value> (__comp, __val); }
# 263 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare, class _Iterator1>
# 264 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_comp_to_iter {
# 266 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Compare _M_comp;
# 267 "/usr/include/c++/5/bits/predefined_ops.h" 3
typename std::iterator_traits< _Iterator1> ::reference _M_ref;
# 269 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(__comp), _M_ref(*__it1)
# 271 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 273 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator2> bool
# 275 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator2 __it2)
# 276 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return (bool)(_M_comp)(*__it2, _M_ref); }
# 277 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 279 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>
# 281 "/usr/include/c++/5/bits/predefined_ops.h" 3
__iter_comp_iter(_Iter_comp_iter< _Compare> __comp, _Iterator __it)
# 282 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return _Iter_comp_to_iter< _Compare, _Iterator> ((__comp._M_comp), __it); }
# 284 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Predicate>
# 285 "/usr/include/c++/5/bits/predefined_ops.h" 3
struct _Iter_negate {
# 287 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Predicate _M_pred;
# 289 "/usr/include/c++/5/bits/predefined_ops.h" 3
_Iter_negate(_Predicate __pred) : _M_pred(__pred)
# 291 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ }
# 293 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Iterator> bool
# 295 "/usr/include/c++/5/bits/predefined_ops.h" 3
operator()(_Iterator __it)
# 296 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return !((bool)(_M_pred)(*__it)); }
# 297 "/usr/include/c++/5/bits/predefined_ops.h" 3
};
# 299 "/usr/include/c++/5/bits/predefined_ops.h" 3
template< class _Predicate> inline _Iter_negate< _Predicate>
# 301 "/usr/include/c++/5/bits/predefined_ops.h" 3
__negate(_Iter_pred< _Predicate> __pred)
# 302 "/usr/include/c++/5/bits/predefined_ops.h" 3
{ return ((_Iter_negate< _Predicate> )((__pred._M_pred))); }
# 304 "/usr/include/c++/5/bits/predefined_ops.h" 3
}
# 305 "/usr/include/c++/5/bits/predefined_ops.h" 3
}
# 73 "/usr/include/c++/5/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) {
# 81 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _BoolType>
# 82 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __iter_swap {
# 84 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> static void
# 86 "/usr/include/c++/5/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
# 87 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 89 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1;
# 90 "/usr/include/c++/5/bits/stl_algobase.h" 3
_ValueType1 __tmp = *__a;
# 91 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__a) = (*__b);
# 92 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__b) = __tmp;
# 93 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 94 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 97 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __iter_swap< true> {
# 99 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> static void
# 101 "/usr/include/c++/5/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
# 102 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 103 "/usr/include/c++/5/bits/stl_algobase.h" 3
swap(*__a, *__b);
# 104 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 105 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 118 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void
# 120 "/usr/include/c++/5/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
# 121 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 130 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1;
# 132 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator2> ::value_type _ValueType2;
# 140 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::reference _ReferenceType1;
# 142 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator2> ::reference _ReferenceType2;
# 143 "/usr/include/c++/5/bits/stl_algobase.h" 3
std::__iter_swap< __are_same< typename iterator_traits< _ForwardIterator1> ::value_type, typename iterator_traits< _ForwardIterator2> ::value_type> ::__value && __are_same< typename iterator_traits< _ForwardIterator1> ::value_type &, typename iterator_traits< _ForwardIterator1> ::reference> ::__value && __are_same< typename iterator_traits< _ForwardIterator2> ::value_type &, typename iterator_traits< _ForwardIterator2> ::reference> ::__value> ::iter_swap(__a, __b);
# 150 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 164 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2
# 166 "/usr/include/c++/5/bits/stl_algobase.h" 3
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 167 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2)
# 168 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 174 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 176 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 177 "/usr/include/c++/5/bits/stl_algobase.h" 3
std::iter_swap(__first1, __first2); }
# 178 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __first2;
# 179 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 192 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> inline const _Tp &
# 195 "/usr/include/c++/5/bits/stl_algobase.h" 3
min(const _Tp &__a, const _Tp &__b)
# 196 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 200 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__b < __a) {
# 201 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __b; }
# 202 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __a;
# 203 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 216 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> inline const _Tp &
# 219 "/usr/include/c++/5/bits/stl_algobase.h" 3
max(const _Tp &__a, const _Tp &__b)
# 220 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 224 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__a < __b) {
# 225 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __b; }
# 226 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __a;
# 227 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 240 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> inline const _Tp &
# 243 "/usr/include/c++/5/bits/stl_algobase.h" 3
min(const _Tp &__a, const _Tp &__b, _Compare __comp)
# 244 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 246 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__comp(__b, __a)) {
# 247 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __b; }
# 248 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __a;
# 249 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 262 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> inline const _Tp &
# 265 "/usr/include/c++/5/bits/stl_algobase.h" 3
max(const _Tp &__a, const _Tp &__b, _Compare __comp)
# 266 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 268 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__comp(__a, __b)) {
# 269 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __b; }
# 270 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __a;
# 271 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 275 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Iterator>
# 276 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct _Niter_base : public _Iter_base< _Iterator, __is_normal_iterator< _Iterator> ::__value> {
# 278 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 280 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Iterator> inline typename _Niter_base< _Iterator> ::iterator_type
# 282 "/usr/include/c++/5/bits/stl_algobase.h" 3
__niter_base(_Iterator __it)
# 283 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return std::_Niter_base< _Iterator> ::_S_base(__it); }
# 286 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Iterator>
# 287 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct _Miter_base : public _Iter_base< _Iterator, __is_move_iterator< _Iterator> ::__value> {
# 289 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 291 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Iterator> inline typename _Miter_base< _Iterator> ::iterator_type
# 293 "/usr/include/c++/5/bits/stl_algobase.h" 3
__miter_base(_Iterator __it)
# 294 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return std::_Miter_base< _Iterator> ::_S_base(__it); }
# 302 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool , bool , class >
# 303 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __copy_move {
# 305 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II, class _OI> static _OI
# 307 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_m(_II __first, _II __last, _OI __result)
# 308 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 309 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first != __last; (++__result), (++__first)) {
# 310 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__result) = (*__first); }
# 311 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result;
# 312 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 313 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 331 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag> {
# 333 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II, class _OI> static _OI
# 335 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_m(_II __first, _II __last, _OI __result)
# 336 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 337 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::difference_type _Distance;
# 338 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (_Distance __n = __last - __first; __n > 0; --__n)
# 339 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 340 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__result) = (*__first);
# 341 "/usr/include/c++/5/bits/stl_algobase.h" 3
++__first;
# 342 "/usr/include/c++/5/bits/stl_algobase.h" 3
++__result;
# 343 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 344 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result;
# 345 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 346 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 368 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove>
# 369 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __copy_move< _IsMove, true, random_access_iterator_tag> {
# 371 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> static _Tp *
# 373 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result)
# 374 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 382 "/usr/include/c++/5/bits/stl_algobase.h" 3
const ptrdiff_t _Num = __last - __first;
# 383 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (_Num) {
# 384 "/usr/include/c++/5/bits/stl_algobase.h" 3
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }
# 385 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result + _Num;
# 386 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 387 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 389 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _II, class _OI> inline _OI
# 391 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_a(_II __first, _II __last, _OI __result)
# 392 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 393 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::value_type _ValueTypeI;
# 394 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO;
# 395 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::iterator_category _Category;
# 396 "/usr/include/c++/5/bits/stl_algobase.h" 3
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value);
# 401 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result);
# 403 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 407 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _CharT> struct char_traits;
# 410 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _CharT, class _Traits> class istreambuf_iterator;
# 413 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _CharT, class _Traits> class ostreambuf_iterator;
# 416 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > );
# 422 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > );
# 428 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *);
# 434 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _II, class _OI> inline _OI
# 436 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_a2(_II __first, _II __last, _OI __result)
# 437 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 438 "/usr/include/c++/5/bits/stl_algobase.h" 3
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result));
# 441 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 460 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI
# 462 "/usr/include/c++/5/bits/stl_algobase.h" 3
copy(_II __first, _II __last, _OI __result)
# 463 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 468 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 470 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result);
# 473 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 512 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool , bool , class >
# 513 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __copy_move_backward {
# 515 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> static _BI2
# 517 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
# 518 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 519 "/usr/include/c++/5/bits/stl_algobase.h" 3
while (__first != __last) {
# 520 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*(--__result)) = (*(--__last)); }
# 521 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result;
# 522 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 523 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 541 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag> {
# 543 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> static _BI2
# 545 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
# 546 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 547 "/usr/include/c++/5/bits/stl_algobase.h" 3
typename iterator_traits< _BI1> ::difference_type __n;
# 548 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (__n = (__last - __first); __n > 0; --__n) {
# 549 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*(--__result)) = (*(--__last)); }
# 550 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result;
# 551 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 552 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 570 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove>
# 571 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag> {
# 573 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> static _Tp *
# 575 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result)
# 576 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 584 "/usr/include/c++/5/bits/stl_algobase.h" 3
const ptrdiff_t _Num = __last - __first;
# 585 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (_Num) {
# 586 "/usr/include/c++/5/bits/stl_algobase.h" 3
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }
# 587 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result - _Num;
# 588 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 589 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 591 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _BI1, class _BI2> inline _BI2
# 593 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
# 594 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 595 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI1> ::value_type _ValueType1;
# 596 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI2> ::value_type _ValueType2;
# 597 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI1> ::iterator_category _Category;
# 598 "/usr/include/c++/5/bits/stl_algobase.h" 3
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value);
# 603 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result);
# 607 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 609 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _IsMove, class _BI1, class _BI2> inline _BI2
# 611 "/usr/include/c++/5/bits/stl_algobase.h" 3
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
# 612 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 613 "/usr/include/c++/5/bits/stl_algobase.h" 3
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result));
# 616 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 636 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2
# 638 "/usr/include/c++/5/bits/stl_algobase.h" 3
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
# 639 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 646 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 648 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result);
# 651 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 694 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type
# 697 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 698 "/usr/include/c++/5/bits/stl_algobase.h" 3
__value)
# 699 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 700 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first != __last; ++__first) {
# 701 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__first) = __value; }
# 702 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 704 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type
# 707 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 708 "/usr/include/c++/5/bits/stl_algobase.h" 3
__value)
# 709 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 710 "/usr/include/c++/5/bits/stl_algobase.h" 3
const _Tp __tmp = __value;
# 711 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first != __last; ++__first) {
# 712 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__first) = __tmp; }
# 713 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 716 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type
# 719 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c)
# 720 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 721 "/usr/include/c++/5/bits/stl_algobase.h" 3
const _Tp __tmp = __c;
# 722 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (const size_t __len = __last - __first) {
# 723 "/usr/include/c++/5/bits/stl_algobase.h" 3
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }
# 724 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 738 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void
# 740 "/usr/include/c++/5/bits/stl_algobase.h" 3
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)
# 741 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 745 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 747 "/usr/include/c++/5/bits/stl_algobase.h" 3
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value);
# 749 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 751 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type
# 754 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value)
# 755 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 756 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) {
# 758 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__first) = __value; }
# 759 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __first;
# 760 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 762 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type
# 765 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value)
# 766 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 767 "/usr/include/c++/5/bits/stl_algobase.h" 3
const _Tp __tmp = __value;
# 768 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) {
# 770 "/usr/include/c++/5/bits/stl_algobase.h" 3
(*__first) = __tmp; }
# 771 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __first;
# 772 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 774 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type
# 777 "/usr/include/c++/5/bits/stl_algobase.h" 3
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c)
# 778 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 779 "/usr/include/c++/5/bits/stl_algobase.h" 3
std::__fill_a(__first, __first + __n, __c);
# 780 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __first + __n;
# 781 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 798 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI
# 800 "/usr/include/c++/5/bits/stl_algobase.h" 3
fill_n(_OI __first, _Size __n, const _Tp &__value)
# 801 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 805 "/usr/include/c++/5/bits/stl_algobase.h" 3
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value);
# 806 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 808 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _BoolType>
# 809 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __equal {
# 811 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> static bool
# 813 "/usr/include/c++/5/bits/stl_algobase.h" 3
equal(_II1 __first1, _II1 __last1, _II2 __first2)
# 814 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 815 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 816 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (!((*__first1) == (*__first2))) {
# 817 "/usr/include/c++/5/bits/stl_algobase.h" 3
return false; } }
# 818 "/usr/include/c++/5/bits/stl_algobase.h" 3
return true;
# 819 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 820 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 823 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __equal< true> {
# 825 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp> static bool
# 827 "/usr/include/c++/5/bits/stl_algobase.h" 3
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2)
# 828 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 829 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (const size_t __len = __last1 - __first1) {
# 830 "/usr/include/c++/5/bits/stl_algobase.h" 3
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }
# 831 "/usr/include/c++/5/bits/stl_algobase.h" 3
return true;
# 832 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 833 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 835 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool
# 837 "/usr/include/c++/5/bits/stl_algobase.h" 3
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
# 838 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 839 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II1> ::value_type _ValueType1;
# 840 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II2> ::value_type _ValueType2;
# 841 "/usr/include/c++/5/bits/stl_algobase.h" 3
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value);
# 847 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__equal< __simple> ::equal(__first1, __last1, __first2);
# 848 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 850 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class , class >
# 851 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __lc_rai {
# 853 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> static _II1
# 855 "/usr/include/c++/5/bits/stl_algobase.h" 3
__newlast1(_II1, _II1 __last1, _II2, _II2)
# 856 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return __last1; }
# 858 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II> static bool
# 860 "/usr/include/c++/5/bits/stl_algobase.h" 3
__cnd2(_II __first, _II __last)
# 861 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return __first != __last; }
# 862 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 865 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag> {
# 867 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _RAI1, class _RAI2> static _RAI1
# 869 "/usr/include/c++/5/bits/stl_algobase.h" 3
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2
# 870 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _RAI2 __last2)
# 871 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 873 "/usr/include/c++/5/bits/stl_algobase.h" 3
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1;
# 875 "/usr/include/c++/5/bits/stl_algobase.h" 3
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2;
# 876 "/usr/include/c++/5/bits/stl_algobase.h" 3
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1;
# 877 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 879 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _RAI> static bool
# 881 "/usr/include/c++/5/bits/stl_algobase.h" 3
__cnd2(_RAI, _RAI)
# 882 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return true; }
# 883 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 885 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> bool
# 887 "/usr/include/c++/5/bits/stl_algobase.h" 3
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2
# 888 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _II2 __last2, _Compare
# 889 "/usr/include/c++/5/bits/stl_algobase.h" 3
__comp)
# 890 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 891 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II1> ::iterator_category _Category1;
# 892 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II2> ::iterator_category _Category2;
# 893 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category> __rai_type;
# 895 "/usr/include/c++/5/bits/stl_algobase.h" 3
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
# 896 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), (++__first2))
# 898 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 899 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__comp(__first1, __first2)) {
# 900 "/usr/include/c++/5/bits/stl_algobase.h" 3
return true; }
# 901 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__comp(__first2, __first1)) {
# 902 "/usr/include/c++/5/bits/stl_algobase.h" 3
return false; }
# 903 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 904 "/usr/include/c++/5/bits/stl_algobase.h" 3
return (__first1 == __last1) && (__first2 != __last2);
# 905 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 907 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _BoolType>
# 908 "/usr/include/c++/5/bits/stl_algobase.h" 3
struct __lexicographical_compare {
# 910 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2);
# 912 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 914 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< bool _BoolType>
# 915 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> bool
# 918 "/usr/include/c++/5/bits/stl_algobase.h" 3
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
# 919 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 920 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter());
# 923 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 926 "/usr/include/c++/5/bits/stl_algobase.h" 3
template<> struct __lexicographical_compare< true> {
# 928 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _Tp, class _Up> static bool
# 930 "/usr/include/c++/5/bits/stl_algobase.h" 3
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 931 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, const _Up *__last2)
# 932 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 933 "/usr/include/c++/5/bits/stl_algobase.h" 3
const size_t __len1 = __last1 - __first1;
# 934 "/usr/include/c++/5/bits/stl_algobase.h" 3
const size_t __len2 = __last2 - __first2;
# 935 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (const size_t __len = std::min(__len1, __len2)) {
# 936 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (int __result = __builtin_memcmp(__first1, __first2, __len)) {
# 937 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __result < 0; } }
# 938 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __len1 < __len2;
# 939 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 940 "/usr/include/c++/5/bits/stl_algobase.h" 3
};
# 942 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool
# 944 "/usr/include/c++/5/bits/stl_algobase.h" 3
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2
# 945 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _II2 __last2)
# 946 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 947 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II1> ::value_type _ValueType1;
# 948 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II2> ::value_type _ValueType2;
# 949 "/usr/include/c++/5/bits/stl_algobase.h" 3
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value);
# 956 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2);
# 958 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 960 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator
# 962 "/usr/include/c++/5/bits/stl_algobase.h" 3
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 963 "/usr/include/c++/5/bits/stl_algobase.h" 3
__val, _Compare __comp)
# 964 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 966 "/usr/include/c++/5/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 968 "/usr/include/c++/5/bits/stl_algobase.h" 3
_DistanceType __len = std::distance(__first, __last);
# 970 "/usr/include/c++/5/bits/stl_algobase.h" 3
while (__len > 0)
# 971 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 972 "/usr/include/c++/5/bits/stl_algobase.h" 3
_DistanceType __half = __len >> 1;
# 973 "/usr/include/c++/5/bits/stl_algobase.h" 3
_ForwardIterator __middle = __first;
# 974 "/usr/include/c++/5/bits/stl_algobase.h" 3
std::advance(__middle, __half);
# 975 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (__comp(__middle, __val))
# 976 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 977 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first = __middle;
# 978 "/usr/include/c++/5/bits/stl_algobase.h" 3
++__first;
# 979 "/usr/include/c++/5/bits/stl_algobase.h" 3
__len = ((__len - __half) - 1);
# 980 "/usr/include/c++/5/bits/stl_algobase.h" 3
} else {
# 982 "/usr/include/c++/5/bits/stl_algobase.h" 3
__len = __half; }
# 983 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 984 "/usr/include/c++/5/bits/stl_algobase.h" 3
return __first;
# 985 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 998 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator
# 1000 "/usr/include/c++/5/bits/stl_algobase.h" 3
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1001 "/usr/include/c++/5/bits/stl_algobase.h" 3
__val)
# 1002 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1007 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1009 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val());
# 1011 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1016 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline int __lg(int __n)
# 1017 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); }
# 1020 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline unsigned __lg(unsigned __n)
# 1021 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); }
# 1024 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline long __lg(long __n)
# 1025 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); }
# 1028 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline unsigned long __lg(unsigned long __n)
# 1029 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); }
# 1032 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline long long __lg(long long __n)
# 1033 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); }
# 1036 "/usr/include/c++/5/bits/stl_algobase.h" 3
inline unsigned long long __lg(unsigned long long __n)
# 1037 "/usr/include/c++/5/bits/stl_algobase.h" 3
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); }
# 1055 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool
# 1057 "/usr/include/c++/5/bits/stl_algobase.h" 3
equal(_II1 __first1, _II1 __last1, _II2 __first2)
# 1058 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1065 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1067 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2));
# 1070 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1087 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool
# 1089 "/usr/include/c++/5/bits/stl_algobase.h" 3
equal(_IIter1 __first1, _IIter1 __last1, _IIter2
# 1090 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _BinaryPredicate __binary_pred)
# 1091 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1095 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1097 "/usr/include/c++/5/bits/stl_algobase.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 1098 "/usr/include/c++/5/bits/stl_algobase.h" 3
if (!((bool)__binary_pred(*__first1, *__first2))) {
# 1099 "/usr/include/c++/5/bits/stl_algobase.h" 3
return false; } }
# 1100 "/usr/include/c++/5/bits/stl_algobase.h" 3
return true;
# 1101 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1215 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool
# 1217 "/usr/include/c++/5/bits/stl_algobase.h" 3
lexicographical_compare(_II1 __first1, _II1 __last1, _II2
# 1218 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _II2 __last2)
# 1219 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1229 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1230 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1232 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2));
# 1236 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1251 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool
# 1253 "/usr/include/c++/5/bits/stl_algobase.h" 3
lexicographical_compare(_II1 __first1, _II1 __last1, _II2
# 1254 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _II2 __last2, _Compare __comp)
# 1255 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1259 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1260 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1262 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 1265 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1267 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 1268 "/usr/include/c++/5/bits/stl_algobase.h" 3
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>
# 1270 "/usr/include/c++/5/bits/stl_algobase.h" 3
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 1271 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _BinaryPredicate __binary_pred)
# 1272 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1273 "/usr/include/c++/5/bits/stl_algobase.h" 3
while ((__first1 != __last1) && __binary_pred(__first1, __first2))
# 1274 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1275 "/usr/include/c++/5/bits/stl_algobase.h" 3
++__first1;
# 1276 "/usr/include/c++/5/bits/stl_algobase.h" 3
++__first2;
# 1277 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1278 "/usr/include/c++/5/bits/stl_algobase.h" 3
return pair< _InputIterator1, _InputIterator2> (__first1, __first2);
# 1279 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1294 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>
# 1296 "/usr/include/c++/5/bits/stl_algobase.h" 3
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 1297 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2)
# 1298 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1305 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1307 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter());
# 1309 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1327 "/usr/include/c++/5/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 1328 "/usr/include/c++/5/bits/stl_algobase.h" 3
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>
# 1330 "/usr/include/c++/5/bits/stl_algobase.h" 3
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 1331 "/usr/include/c++/5/bits/stl_algobase.h" 3
__first2, _BinaryPredicate __binary_pred)
# 1332 "/usr/include/c++/5/bits/stl_algobase.h" 3
{
# 1336 "/usr/include/c++/5/bits/stl_algobase.h" 3
;
# 1338 "/usr/include/c++/5/bits/stl_algobase.h" 3
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
# 1340 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 1428 "/usr/include/c++/5/bits/stl_algobase.h" 3
}
# 42 "/usr/include/c++/5/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) {
# 203 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &);
# 207 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare);
# 211 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter);
# 215 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2);
# 232 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline pair< _FIter, _FIter> equal_range(_FIter, _FIter, const _Tp &);
# 236 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter> equal_range(_FIter, _FIter, const _Tp &, _Compare);
# 240 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &);
# 244 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &);
# 250 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2);
# 254 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 271 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2);
# 275 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
# 279 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter);
# 283 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 334 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2);
# 338 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &);
# 342 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare);
# 346 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void make_heap(_RAIter, _RAIter);
# 350 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare);
# 354 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp> inline const _Tp &max(const _Tp &, const _Tp &);
# 359 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp, class _Compare> inline const _Tp &max(const _Tp &, const _Tp &, _Compare);
# 367 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp> inline const _Tp &min(const _Tp &, const _Tp &);
# 372 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp, class _Compare> inline const _Tp &min(const _Tp &, const _Tp &, _Compare);
# 433 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter> inline bool next_permutation(_BIter, _BIter);
# 437 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare);
# 450 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);
# 454 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 471 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter);
# 475 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare);
# 479 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter> inline bool prev_permutation(_BIter, _BIter);
# 483 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare);
# 487 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void push_heap(_RAIter, _RAIter);
# 491 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare);
# 497 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &);
# 501 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate);
# 505 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &);
# 509 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate);
# 515 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &);
# 519 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &);
# 525 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter> inline void reverse(_BIter, _BIter);
# 529 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter);
# 533 "/usr/include/c++/5/bits/algorithmfwd.h" 3
inline namespace _V2 {
# 535 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter);
# 538 "/usr/include/c++/5/bits/algorithmfwd.h" 3
}
# 540 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 557 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter);
# 561 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare);
# 565 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate);
# 569 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp> inline void swap(_Tp &, _Tp &);
# 578 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _Tp, size_t _Nm> inline void swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]);
# 586 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2);
# 592 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter> inline _FIter unique(_FIter, _FIter);
# 596 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate);
# 602 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &);
# 606 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare);
# 614 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter);
# 618 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate);
# 622 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &);
# 626 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate);
# 630 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2);
# 634 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 638 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &);
# 642 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);
# 646 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 650 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate);
# 654 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct);
# 658 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator);
# 662 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator);
# 666 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);
# 670 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
# 674 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter> inline _FIter max_element(_FIter, _FIter);
# 679 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Compare> inline _FIter max_element(_FIter, _FIter, _Compare);
# 684 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
# 688 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 689 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_Compare> inline _OIter
# 688 "/usr/include/c++/5/bits/algorithmfwd.h" 3
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
# 693 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter> inline _FIter min_element(_FIter, _FIter);
# 698 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Compare> inline _FIter min_element(_FIter, _FIter, _Compare);
# 703 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2);
# 707 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 711 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter);
# 715 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare);
# 719 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter);
# 723 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare);
# 727 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate);
# 731 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter);
# 735 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &);
# 744 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &);
# 748 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &);
# 752 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2);
# 756 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 760 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &);
# 764 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _FIter, class _Size, class _Tp, class
# 765 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_BinaryPredicate> inline _FIter
# 764 "/usr/include/c++/5/bits/algorithmfwd.h" 3
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate);
# 769 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
# 773 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 774 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_Compare> inline _OIter
# 773 "/usr/include/c++/5/bits/algorithmfwd.h" 3
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
# 778 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
# 782 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 783 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_Compare> inline _OIter
# 782 "/usr/include/c++/5/bits/algorithmfwd.h" 3
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
# 787 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
# 791 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 792 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_Compare> inline _OIter
# 791 "/usr/include/c++/5/bits/algorithmfwd.h" 3
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
# 797 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
# 801 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 802 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_Compare> inline _OIter
# 801 "/usr/include/c++/5/bits/algorithmfwd.h" 3
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
# 806 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void sort(_RAIter, _RAIter);
# 810 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare);
# 814 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter);
# 818 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare);
# 822 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation);
# 826 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter1, class _IIter2, class _OIter, class
# 827 "/usr/include/c++/5/bits/algorithmfwd.h" 3
_BinaryOperation> _OIter
# 826 "/usr/include/c++/5/bits/algorithmfwd.h" 3
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);
# 831 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter);
# 835 "/usr/include/c++/5/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);
# 840 "/usr/include/c++/5/bits/algorithmfwd.h" 3
}
# 62 "/usr/include/c++/5/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) {
# 71 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Distance, class
# 72 "/usr/include/c++/5/bits/stl_heap.h" 3
_Compare> _Distance
# 74 "/usr/include/c++/5/bits/stl_heap.h" 3
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare
# 75 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 76 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 77 "/usr/include/c++/5/bits/stl_heap.h" 3
_Distance __parent = (0);
# 78 "/usr/include/c++/5/bits/stl_heap.h" 3
for (_Distance __child = (1); __child < __n; ++__child)
# 79 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 80 "/usr/include/c++/5/bits/stl_heap.h" 3
if (__comp(__first + __parent, __first + __child)) {
# 81 "/usr/include/c++/5/bits/stl_heap.h" 3
return __child; }
# 82 "/usr/include/c++/5/bits/stl_heap.h" 3
if ((__child & 1) == 0) {
# 83 "/usr/include/c++/5/bits/stl_heap.h" 3
++__parent; }
# 84 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 85 "/usr/include/c++/5/bits/stl_heap.h" 3
return __n;
# 86 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 90 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Distance> inline bool
# 92 "/usr/include/c++/5/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _Distance __n)
# 93 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 94 "/usr/include/c++/5/bits/stl_heap.h" 3
return std::__is_heap_until(__first, __n, __gnu_cxx::__ops::__iter_less_iter()) == __n;
# 96 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 98 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare, class
# 99 "/usr/include/c++/5/bits/stl_heap.h" 3
_Distance> inline bool
# 101 "/usr/include/c++/5/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
# 102 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 103 "/usr/include/c++/5/bits/stl_heap.h" 3
return std::__is_heap_until(__first, __n, __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
# 105 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 107 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline bool
# 109 "/usr/include/c++/5/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 110 "/usr/include/c++/5/bits/stl_heap.h" 3
{ return std::__is_heap(__first, std::distance(__first, __last)); }
# 112 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline bool
# 114 "/usr/include/c++/5/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 115 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 116 "/usr/include/c++/5/bits/stl_heap.h" 3
{ return std::__is_heap(__first, __comp, std::distance(__first, __last)); }
# 121 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Distance, class _Tp, class
# 122 "/usr/include/c++/5/bits/stl_heap.h" 3
_Compare> void
# 124 "/usr/include/c++/5/bits/stl_heap.h" 3
__push_heap(_RandomAccessIterator __first, _Distance
# 125 "/usr/include/c++/5/bits/stl_heap.h" 3
__holeIndex, _Distance __topIndex, _Tp __value, _Compare
# 126 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 127 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 128 "/usr/include/c++/5/bits/stl_heap.h" 3
_Distance __parent = (__holeIndex - 1) / 2;
# 129 "/usr/include/c++/5/bits/stl_heap.h" 3
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value))
# 130 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 131 "/usr/include/c++/5/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = (*(__first + __parent));
# 132 "/usr/include/c++/5/bits/stl_heap.h" 3
__holeIndex = __parent;
# 133 "/usr/include/c++/5/bits/stl_heap.h" 3
__parent = ((__holeIndex - 1) / 2);
# 134 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 135 "/usr/include/c++/5/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = __value;
# 136 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 148 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void
# 150 "/usr/include/c++/5/bits/stl_heap.h" 3
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 151 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 153 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 155 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 161 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 162 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 164 "/usr/include/c++/5/bits/stl_heap.h" 3
_ValueType __value = *(__last - 1);
# 165 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, __value, __gnu_cxx::__ops::__iter_less_val());
# 168 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 182 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 184 "/usr/include/c++/5/bits/stl_heap.h" 3
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 185 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 186 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 188 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 190 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 195 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 196 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 198 "/usr/include/c++/5/bits/stl_heap.h" 3
_ValueType __value = *(__last - 1);
# 199 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, __value, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 202 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 204 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Distance, class
# 205 "/usr/include/c++/5/bits/stl_heap.h" 3
_Tp, class _Compare> void
# 207 "/usr/include/c++/5/bits/stl_heap.h" 3
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance
# 208 "/usr/include/c++/5/bits/stl_heap.h" 3
__len, _Tp __value, _Compare __comp)
# 209 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 210 "/usr/include/c++/5/bits/stl_heap.h" 3
const _Distance __topIndex = __holeIndex;
# 211 "/usr/include/c++/5/bits/stl_heap.h" 3
_Distance __secondChild = __holeIndex;
# 212 "/usr/include/c++/5/bits/stl_heap.h" 3
while (__secondChild < ((__len - 1) / 2))
# 213 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 214 "/usr/include/c++/5/bits/stl_heap.h" 3
__secondChild = (2 * (__secondChild + 1));
# 215 "/usr/include/c++/5/bits/stl_heap.h" 3
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) {
# 217 "/usr/include/c++/5/bits/stl_heap.h" 3
__secondChild--; }
# 218 "/usr/include/c++/5/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = (*(__first + __secondChild));
# 219 "/usr/include/c++/5/bits/stl_heap.h" 3
__holeIndex = __secondChild;
# 220 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 221 "/usr/include/c++/5/bits/stl_heap.h" 3
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2)))
# 222 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 223 "/usr/include/c++/5/bits/stl_heap.h" 3
__secondChild = (2 * (__secondChild + 1));
# 224 "/usr/include/c++/5/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = (*(__first + (__secondChild - 1)));
# 226 "/usr/include/c++/5/bits/stl_heap.h" 3
__holeIndex = (__secondChild - 1);
# 227 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 228 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__push_heap(__first, __holeIndex, __topIndex, __value, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 231 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 233 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 235 "/usr/include/c++/5/bits/stl_heap.h" 3
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator
# 236 "/usr/include/c++/5/bits/stl_heap.h" 3
__result, _Compare __comp)
# 237 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 239 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 241 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 243 "/usr/include/c++/5/bits/stl_heap.h" 3
_ValueType __value = *__result;
# 244 "/usr/include/c++/5/bits/stl_heap.h" 3
(*__result) = (*__first);
# 245 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), __value, __comp);
# 248 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 261 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void
# 263 "/usr/include/c++/5/bits/stl_heap.h" 3
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 264 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 266 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 272 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 273 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 274 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 276 "/usr/include/c++/5/bits/stl_heap.h" 3
if ((__last - __first) > 1)
# 277 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 278 "/usr/include/c++/5/bits/stl_heap.h" 3
--__last;
# 279 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__pop_heap(__first, __last, __last, __gnu_cxx::__ops::__iter_less_iter());
# 281 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 282 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 295 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 297 "/usr/include/c++/5/bits/stl_heap.h" 3
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator
# 298 "/usr/include/c++/5/bits/stl_heap.h" 3
__last, _Compare __comp)
# 299 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 303 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 304 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 305 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 307 "/usr/include/c++/5/bits/stl_heap.h" 3
if ((__last - __first) > 1)
# 308 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 309 "/usr/include/c++/5/bits/stl_heap.h" 3
--__last;
# 310 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__pop_heap(__first, __last, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 312 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 313 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 315 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 317 "/usr/include/c++/5/bits/stl_heap.h" 3
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 318 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 319 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 321 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 323 "/usr/include/c++/5/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 325 "/usr/include/c++/5/bits/stl_heap.h" 3
if ((__last - __first) < 2) {
# 326 "/usr/include/c++/5/bits/stl_heap.h" 3
return; }
# 328 "/usr/include/c++/5/bits/stl_heap.h" 3
const _DistanceType __len = __last - __first;
# 329 "/usr/include/c++/5/bits/stl_heap.h" 3
_DistanceType __parent = (__len - 2) / 2;
# 330 "/usr/include/c++/5/bits/stl_heap.h" 3
while (true)
# 331 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 332 "/usr/include/c++/5/bits/stl_heap.h" 3
_ValueType __value = *(__first + __parent);
# 333 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__adjust_heap(__first, __parent, __len, __value, __comp);
# 335 "/usr/include/c++/5/bits/stl_heap.h" 3
if (__parent == 0) {
# 336 "/usr/include/c++/5/bits/stl_heap.h" 3
return; }
# 337 "/usr/include/c++/5/bits/stl_heap.h" 3
__parent--;
# 338 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 339 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 349 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void
# 351 "/usr/include/c++/5/bits/stl_heap.h" 3
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 352 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 358 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 360 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__make_heap(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 362 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 374 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 376 "/usr/include/c++/5/bits/stl_heap.h" 3
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 377 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 378 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 382 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 384 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__make_heap(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 386 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 388 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 390 "/usr/include/c++/5/bits/stl_heap.h" 3
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 391 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 392 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 393 "/usr/include/c++/5/bits/stl_heap.h" 3
while ((__last - __first) > 1)
# 394 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 395 "/usr/include/c++/5/bits/stl_heap.h" 3
--__last;
# 396 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__pop_heap(__first, __last, __last, __comp);
# 397 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 398 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 408 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void
# 410 "/usr/include/c++/5/bits/stl_heap.h" 3
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 411 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 417 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 418 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 420 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__sort_heap(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 422 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 434 "/usr/include/c++/5/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 436 "/usr/include/c++/5/bits/stl_heap.h" 3
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 437 "/usr/include/c++/5/bits/stl_heap.h" 3
__comp)
# 438 "/usr/include/c++/5/bits/stl_heap.h" 3
{
# 442 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 443 "/usr/include/c++/5/bits/stl_heap.h" 3
;
# 445 "/usr/include/c++/5/bits/stl_heap.h" 3
std::__sort_heap(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 447 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 530 "/usr/include/c++/5/bits/stl_heap.h" 3
}
# 35 "/usr/include/c++/5/exception" 3
#pragma GCC visibility push ( default )
# 40 "/usr/include/c++/5/exception" 3
extern "C++" {
# 42 "/usr/include/c++/5/exception" 3
namespace std {
# 60 "/usr/include/c++/5/exception" 3
class exception {
# 63 "/usr/include/c++/5/exception" 3
public: exception() throw() { }
# 64 "/usr/include/c++/5/exception" 3
virtual ~exception() throw();
# 68 "/usr/include/c++/5/exception" 3
virtual const char *what() const throw();
# 69 "/usr/include/c++/5/exception" 3
};
# 73 "/usr/include/c++/5/exception" 3
class bad_exception : public exception {
# 76 "/usr/include/c++/5/exception" 3
public: bad_exception() throw() { }
# 80 "/usr/include/c++/5/exception" 3
virtual ~bad_exception() throw();
# 83 "/usr/include/c++/5/exception" 3
virtual const char *what() const throw();
# 84 "/usr/include/c++/5/exception" 3
};
# 87 "/usr/include/c++/5/exception" 3
typedef void (*terminate_handler)(void);
# 90 "/usr/include/c++/5/exception" 3
typedef void (*unexpected_handler)(void);
# 93 "/usr/include/c++/5/exception" 3
terminate_handler set_terminate(terminate_handler) throw();
# 102 "/usr/include/c++/5/exception" 3
void terminate() throw() __attribute((__noreturn__));
# 105 "/usr/include/c++/5/exception" 3
unexpected_handler set_unexpected(unexpected_handler) throw();
# 114 "/usr/include/c++/5/exception" 3
void unexpected() __attribute((__noreturn__));
# 127 "/usr/include/c++/5/exception" 3
bool uncaught_exception() throw() __attribute((__pure__));
# 130 "/usr/include/c++/5/exception" 3
}
# 132 "/usr/include/c++/5/exception" 3
namespace __gnu_cxx {
# 152 "/usr/include/c++/5/exception" 3
void __verbose_terminate_handler();
# 155 "/usr/include/c++/5/exception" 3
}
# 157 "/usr/include/c++/5/exception" 3
}
# 159 "/usr/include/c++/5/exception" 3
#pragma GCC visibility pop
# 42 "/usr/include/c++/5/new" 3
#pragma GCC visibility push ( default )
# 44 "/usr/include/c++/5/new" 3
extern "C++" {
# 46 "/usr/include/c++/5/new" 3
namespace std {
# 54 "/usr/include/c++/5/new" 3
class bad_alloc : public exception {
# 57 "/usr/include/c++/5/new" 3
public: bad_alloc() throw() { }
# 61 "/usr/include/c++/5/new" 3
virtual ~bad_alloc() throw();
# 64 "/usr/include/c++/5/new" 3
virtual const char *what() const throw();
# 65 "/usr/include/c++/5/new" 3
};
# 82 "/usr/include/c++/5/new" 3
struct nothrow_t { };
# 84 "/usr/include/c++/5/new" 3
extern const nothrow_t nothrow;
# 88 "/usr/include/c++/5/new" 3
typedef void (*new_handler)(void);
# 92 "/usr/include/c++/5/new" 3
new_handler set_new_handler(new_handler) throw();
# 98 "/usr/include/c++/5/new" 3
}
# 111 "/usr/include/c++/5/new" 3
void *operator new(std::size_t) throw(std::bad_alloc)
# 112 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 113 "/usr/include/c++/5/new" 3
void *operator new[](std::size_t) throw(std::bad_alloc)
# 114 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 115 "/usr/include/c++/5/new" 3
void operator delete(void *) throw()
# 116 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 117 "/usr/include/c++/5/new" 3
void operator delete[](void *) throw()
# 118 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 119 "/usr/include/c++/5/new" 3
void *operator new(std::size_t, const std::nothrow_t &) throw()
# 120 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 121 "/usr/include/c++/5/new" 3
void *operator new[](std::size_t, const std::nothrow_t &) throw()
# 122 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 123 "/usr/include/c++/5/new" 3
void operator delete(void *, const std::nothrow_t &) throw()
# 124 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 125 "/usr/include/c++/5/new" 3
void operator delete[](void *, const std::nothrow_t &) throw()
# 126 "/usr/include/c++/5/new" 3
 __attribute((__externally_visible__));
# 129 "/usr/include/c++/5/new" 3
inline void *operator new(std::size_t, void *__p) throw()
# 130 "/usr/include/c++/5/new" 3
{ return __p; }
# 131 "/usr/include/c++/5/new" 3
inline void *operator new[](std::size_t, void *__p) throw()
# 132 "/usr/include/c++/5/new" 3
{ return __p; }
# 135 "/usr/include/c++/5/new" 3
inline void operator delete(void *, void *) throw() { }
# 136 "/usr/include/c++/5/new" 3
inline void operator delete[](void *, void *) throw() { }
# 138 "/usr/include/c++/5/new" 3
}
# 140 "/usr/include/c++/5/new" 3
#pragma GCC visibility pop
# 40 "/usr/include/c++/5/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 44 "/usr/include/c++/5/ext/new_allocator.h" 3
using std::size_t;
# 45 "/usr/include/c++/5/ext/new_allocator.h" 3
using std::ptrdiff_t;
# 57 "/usr/include/c++/5/ext/new_allocator.h" 3
template< class _Tp>
# 58 "/usr/include/c++/5/ext/new_allocator.h" 3
class new_allocator {
# 61 "/usr/include/c++/5/ext/new_allocator.h" 3
public: typedef std::size_t size_type;
# 62 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef std::ptrdiff_t difference_type;
# 63 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef _Tp *pointer;
# 64 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef const _Tp *const_pointer;
# 65 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef _Tp &reference;
# 66 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef const _Tp &const_reference;
# 67 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef _Tp value_type;
# 69 "/usr/include/c++/5/ext/new_allocator.h" 3
template< class _Tp1>
# 70 "/usr/include/c++/5/ext/new_allocator.h" 3
struct rebind {
# 71 "/usr/include/c++/5/ext/new_allocator.h" 3
typedef __gnu_cxx::new_allocator< _Tp1> other; };
# 79 "/usr/include/c++/5/ext/new_allocator.h" 3
new_allocator() throw() { }
# 81 "/usr/include/c++/5/ext/new_allocator.h" 3
new_allocator(const new_allocator &) throw() { }
# 83 "/usr/include/c++/5/ext/new_allocator.h" 3
template< class _Tp1>
# 84 "/usr/include/c++/5/ext/new_allocator.h" 3
new_allocator(const __gnu_cxx::new_allocator< _Tp1> &) throw() { }
# 86 "/usr/include/c++/5/ext/new_allocator.h" 3
~new_allocator() throw() { }
# 89 "/usr/include/c++/5/ext/new_allocator.h" 3
pointer address(reference __x) const
# 90 "/usr/include/c++/5/ext/new_allocator.h" 3
{ return std::__addressof(__x); }
# 93 "/usr/include/c++/5/ext/new_allocator.h" 3
const_pointer address(const_reference __x) const
# 94 "/usr/include/c++/5/ext/new_allocator.h" 3
{ return std::__addressof(__x); }
# 99 "/usr/include/c++/5/ext/new_allocator.h" 3
pointer allocate(size_type __n, const void * = 0)
# 100 "/usr/include/c++/5/ext/new_allocator.h" 3
{
# 101 "/usr/include/c++/5/ext/new_allocator.h" 3
if (__n > this->max_size()) {
# 102 "/usr/include/c++/5/ext/new_allocator.h" 3
std::__throw_bad_alloc(); }
# 104 "/usr/include/c++/5/ext/new_allocator.h" 3
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp)));
# 105 "/usr/include/c++/5/ext/new_allocator.h" 3
}
# 109 "/usr/include/c++/5/ext/new_allocator.h" 3
void deallocate(pointer __p, size_type)
# 110 "/usr/include/c++/5/ext/new_allocator.h" 3
{ ::operator delete(__p); }
# 113 "/usr/include/c++/5/ext/new_allocator.h" 3
size_type max_size() const throw()
# 114 "/usr/include/c++/5/ext/new_allocator.h" 3
{ return ((std::size_t)(-1)) / sizeof(_Tp); }
# 129 "/usr/include/c++/5/ext/new_allocator.h" 3
void construct(pointer __p, const _Tp &__val)
# 130 "/usr/include/c++/5/ext/new_allocator.h" 3
{ ::new ((void *)__p) (_Tp)(__val); }
# 133 "/usr/include/c++/5/ext/new_allocator.h" 3
void destroy(pointer __p) { (__p->~_Tp()); }
# 135 "/usr/include/c++/5/ext/new_allocator.h" 3
};
# 137 "/usr/include/c++/5/ext/new_allocator.h" 3
template< class _Tp> inline bool
# 139 "/usr/include/c++/5/ext/new_allocator.h" 3
operator==(const new_allocator< _Tp> &, const new_allocator< _Tp> &)
# 140 "/usr/include/c++/5/ext/new_allocator.h" 3
{ return true; }
# 142 "/usr/include/c++/5/ext/new_allocator.h" 3
template< class _Tp> inline bool
# 144 "/usr/include/c++/5/ext/new_allocator.h" 3
operator!=(const new_allocator< _Tp> &, const new_allocator< _Tp> &)
# 145 "/usr/include/c++/5/ext/new_allocator.h" 3
{ return false; }
# 148 "/usr/include/c++/5/ext/new_allocator.h" 3
}
# 50 "/usr/include/c++/5/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) {
# 63 "/usr/include/c++/5/bits/memoryfwd.h" 3
template< class > class allocator;
# 67 "/usr/include/c++/5/bits/memoryfwd.h" 3
template<> class allocator< void> ;
# 70 "/usr/include/c++/5/bits/memoryfwd.h" 3
template< class , class > struct uses_allocator;
# 76 "/usr/include/c++/5/bits/memoryfwd.h" 3
}
# 52 "/usr/include/c++/5/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) {
# 63 "/usr/include/c++/5/bits/allocator.h" 3
template<> class allocator< void> {
# 66 "/usr/include/c++/5/bits/allocator.h" 3
public: typedef size_t size_type;
# 67 "/usr/include/c++/5/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 68 "/usr/include/c++/5/bits/allocator.h" 3
typedef void *pointer;
# 69 "/usr/include/c++/5/bits/allocator.h" 3
typedef const void *const_pointer;
# 70 "/usr/include/c++/5/bits/allocator.h" 3
typedef void value_type;
# 72 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp1>
# 73 "/usr/include/c++/5/bits/allocator.h" 3
struct rebind {
# 74 "/usr/include/c++/5/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 81 "/usr/include/c++/5/bits/allocator.h" 3
};
# 91 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp>
# 92 "/usr/include/c++/5/bits/allocator.h" 3
class allocator : public __gnu_cxx::new_allocator< _Tp> {
# 95 "/usr/include/c++/5/bits/allocator.h" 3
public: typedef ::std::size_t size_type;
# 96 "/usr/include/c++/5/bits/allocator.h" 3
typedef ::std::ptrdiff_t difference_type;
# 97 "/usr/include/c++/5/bits/allocator.h" 3
typedef _Tp *pointer;
# 98 "/usr/include/c++/5/bits/allocator.h" 3
typedef const _Tp *const_pointer;
# 99 "/usr/include/c++/5/bits/allocator.h" 3
typedef _Tp &reference;
# 100 "/usr/include/c++/5/bits/allocator.h" 3
typedef const _Tp &const_reference;
# 101 "/usr/include/c++/5/bits/allocator.h" 3
typedef _Tp value_type;
# 103 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp1>
# 104 "/usr/include/c++/5/bits/allocator.h" 3
struct rebind {
# 105 "/usr/include/c++/5/bits/allocator.h" 3
typedef ::std::allocator< _Tp1> other; };
# 113 "/usr/include/c++/5/bits/allocator.h" 3
allocator() throw() { }
# 115 "/usr/include/c++/5/bits/allocator.h" 3
allocator(const allocator &__a) throw() : ::__gnu_cxx::new_allocator< _Tp> (__a)
# 116 "/usr/include/c++/5/bits/allocator.h" 3
{ }
# 118 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp1>
# 119 "/usr/include/c++/5/bits/allocator.h" 3
allocator(const ::std::allocator< _Tp1> &) throw() { }
# 121 "/usr/include/c++/5/bits/allocator.h" 3
~allocator() throw() { }
# 124 "/usr/include/c++/5/bits/allocator.h" 3
};
# 126 "/usr/include/c++/5/bits/allocator.h" 3
template< class _T1, class _T2> inline bool
# 128 "/usr/include/c++/5/bits/allocator.h" 3
operator==(const allocator< _T1> &, const allocator< _T2> &) throw()
# 130 "/usr/include/c++/5/bits/allocator.h" 3
{ return true; }
# 132 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp> inline bool
# 134 "/usr/include/c++/5/bits/allocator.h" 3
operator==(const allocator< _Tp> &, const allocator< _Tp> &) throw()
# 136 "/usr/include/c++/5/bits/allocator.h" 3
{ return true; }
# 138 "/usr/include/c++/5/bits/allocator.h" 3
template< class _T1, class _T2> inline bool
# 140 "/usr/include/c++/5/bits/allocator.h" 3
operator!=(const allocator< _T1> &, const allocator< _T2> &) throw()
# 142 "/usr/include/c++/5/bits/allocator.h" 3
{ return false; }
# 144 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Tp> inline bool
# 146 "/usr/include/c++/5/bits/allocator.h" 3
operator!=(const allocator< _Tp> &, const allocator< _Tp> &) throw()
# 148 "/usr/include/c++/5/bits/allocator.h" 3
{ return false; }
# 155 "/usr/include/c++/5/bits/allocator.h" 3
extern template class allocator< char> ;
# 156 "/usr/include/c++/5/bits/allocator.h" 3
extern template class allocator< wchar_t> ;
# 163 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Alloc, bool = __is_empty(_Alloc)>
# 164 "/usr/include/c++/5/bits/allocator.h" 3
struct __alloc_swap {
# 165 "/usr/include/c++/5/bits/allocator.h" 3
static void _S_do_it(_Alloc &, _Alloc &) { } };
# 167 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Alloc>
# 168 "/usr/include/c++/5/bits/allocator.h" 3
struct __alloc_swap< _Alloc, false> {
# 171 "/usr/include/c++/5/bits/allocator.h" 3
static void _S_do_it(_Alloc &__one, _Alloc &__two)
# 172 "/usr/include/c++/5/bits/allocator.h" 3
{
# 174 "/usr/include/c++/5/bits/allocator.h" 3
if (__one != __two) {
# 175 "/usr/include/c++/5/bits/allocator.h" 3
swap(__one, __two); }
# 176 "/usr/include/c++/5/bits/allocator.h" 3
}
# 177 "/usr/include/c++/5/bits/allocator.h" 3
};
# 180 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Alloc, bool = __is_empty(_Alloc)>
# 181 "/usr/include/c++/5/bits/allocator.h" 3
struct __alloc_neq {
# 184 "/usr/include/c++/5/bits/allocator.h" 3
static bool _S_do_it(const _Alloc &, const _Alloc &)
# 185 "/usr/include/c++/5/bits/allocator.h" 3
{ return false; }
# 186 "/usr/include/c++/5/bits/allocator.h" 3
};
# 188 "/usr/include/c++/5/bits/allocator.h" 3
template< class _Alloc>
# 189 "/usr/include/c++/5/bits/allocator.h" 3
struct __alloc_neq< _Alloc, false> {
# 192 "/usr/include/c++/5/bits/allocator.h" 3
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two)
# 193 "/usr/include/c++/5/bits/allocator.h" 3
{ return __one != __two; }
# 194 "/usr/include/c++/5/bits/allocator.h" 3
};
# 227 "/usr/include/c++/5/bits/allocator.h" 3
}
# 41 "/usr/include/c++/5/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) {
# 94 "/usr/include/c++/5/ext/alloc_traits.h" 3
template< class _Alloc>
# 95 "/usr/include/c++/5/ext/alloc_traits.h" 3
struct __alloc_traits {
# 100 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef _Alloc allocator_type;
# 172 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::pointer pointer;
# 173 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::const_pointer const_pointer;
# 174 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::value_type value_type;
# 175 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::reference reference;
# 176 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::const_reference const_reference;
# 177 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::size_type size_type;
# 178 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::difference_type difference_type;
# 181 "/usr/include/c++/5/ext/alloc_traits.h" 3
static pointer allocate(_Alloc &__a, size_type __n)
# 182 "/usr/include/c++/5/ext/alloc_traits.h" 3
{ return (__a.allocate(__n)); }
# 184 "/usr/include/c++/5/ext/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n)
# 185 "/usr/include/c++/5/ext/alloc_traits.h" 3
{ (__a.deallocate(__p, __n)); }
# 187 "/usr/include/c++/5/ext/alloc_traits.h" 3
template< class _Tp> static void
# 188 "/usr/include/c++/5/ext/alloc_traits.h" 3
construct(_Alloc &__a, pointer __p, const _Tp &__arg)
# 189 "/usr/include/c++/5/ext/alloc_traits.h" 3
{ (__a.construct(__p, __arg)); }
# 191 "/usr/include/c++/5/ext/alloc_traits.h" 3
static void destroy(_Alloc &__a, pointer __p)
# 192 "/usr/include/c++/5/ext/alloc_traits.h" 3
{ (__a.destroy(__p)); }
# 194 "/usr/include/c++/5/ext/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a)
# 195 "/usr/include/c++/5/ext/alloc_traits.h" 3
{ return (__a.max_size()); }
# 197 "/usr/include/c++/5/ext/alloc_traits.h" 3
static const _Alloc &_S_select_on_copy(const _Alloc &__a) { return __a; }
# 199 "/usr/include/c++/5/ext/alloc_traits.h" 3
static void _S_on_swap(_Alloc &__a, _Alloc &__b)
# 200 "/usr/include/c++/5/ext/alloc_traits.h" 3
{
# 203 "/usr/include/c++/5/ext/alloc_traits.h" 3
std::__alloc_swap< _Alloc> ::_S_do_it(__a, __b);
# 204 "/usr/include/c++/5/ext/alloc_traits.h" 3
}
# 206 "/usr/include/c++/5/ext/alloc_traits.h" 3
template< class _Tp>
# 207 "/usr/include/c++/5/ext/alloc_traits.h" 3
struct rebind {
# 208 "/usr/include/c++/5/ext/alloc_traits.h" 3
typedef typename _Alloc::template rebind< _Tp> ::other other; };
# 210 "/usr/include/c++/5/ext/alloc_traits.h" 3
};
# 213 "/usr/include/c++/5/ext/alloc_traits.h" 3
}
# 63 "/usr/include/c++/5/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) {
# 77 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _T1, class _T2> inline void
# 79 "/usr/include/c++/5/bits/stl_construct.h" 3
_Construct(_T1 *__p, const _T2 &__value)
# 80 "/usr/include/c++/5/bits/stl_construct.h" 3
{
# 83 "/usr/include/c++/5/bits/stl_construct.h" 3
::new (static_cast< void *>(__p)) (_T1)(__value);
# 84 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 90 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _Tp> inline void
# 92 "/usr/include/c++/5/bits/stl_construct.h" 3
_Destroy(_Tp *__pointer)
# 93 "/usr/include/c++/5/bits/stl_construct.h" 3
{ (__pointer->~_Tp()); }
# 95 "/usr/include/c++/5/bits/stl_construct.h" 3
template< bool >
# 96 "/usr/include/c++/5/bits/stl_construct.h" 3
struct _Destroy_aux {
# 98 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _ForwardIterator> static void
# 100 "/usr/include/c++/5/bits/stl_construct.h" 3
__destroy(_ForwardIterator __first, _ForwardIterator __last)
# 101 "/usr/include/c++/5/bits/stl_construct.h" 3
{
# 102 "/usr/include/c++/5/bits/stl_construct.h" 3
for (; __first != __last; ++__first) {
# 103 "/usr/include/c++/5/bits/stl_construct.h" 3
std::_Destroy(std::__addressof(*__first)); }
# 104 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 105 "/usr/include/c++/5/bits/stl_construct.h" 3
};
# 108 "/usr/include/c++/5/bits/stl_construct.h" 3
template<> struct _Destroy_aux< true> {
# 110 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _ForwardIterator> static void
# 112 "/usr/include/c++/5/bits/stl_construct.h" 3
__destroy(_ForwardIterator, _ForwardIterator) { }
# 113 "/usr/include/c++/5/bits/stl_construct.h" 3
};
# 120 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _ForwardIterator> inline void
# 122 "/usr/include/c++/5/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last)
# 123 "/usr/include/c++/5/bits/stl_construct.h" 3
{
# 125 "/usr/include/c++/5/bits/stl_construct.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type;
# 126 "/usr/include/c++/5/bits/stl_construct.h" 3
std::_Destroy_aux< __has_trivial_destructor(typename iterator_traits< _ForwardIterator> ::value_type)> ::__destroy(__first, __last);
# 128 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 136 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _ForwardIterator, class _Allocator> void
# 138 "/usr/include/c++/5/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 139 "/usr/include/c++/5/bits/stl_construct.h" 3
__alloc)
# 140 "/usr/include/c++/5/bits/stl_construct.h" 3
{
# 141 "/usr/include/c++/5/bits/stl_construct.h" 3
typedef __gnu_cxx::__alloc_traits< _Allocator> __traits;
# 142 "/usr/include/c++/5/bits/stl_construct.h" 3
for (; __first != __last; ++__first) {
# 143 "/usr/include/c++/5/bits/stl_construct.h" 3
__traits::destroy(__alloc, std::__addressof(*__first)); }
# 144 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 146 "/usr/include/c++/5/bits/stl_construct.h" 3
template< class _ForwardIterator, class _Tp> inline void
# 148 "/usr/include/c++/5/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp> &)
# 150 "/usr/include/c++/5/bits/stl_construct.h" 3
{
# 151 "/usr/include/c++/5/bits/stl_construct.h" 3
_Destroy(__first, __last);
# 152 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 155 "/usr/include/c++/5/bits/stl_construct.h" 3
}
# 62 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) {
# 83 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _Tp> pair< _Tp *, long>
# 85 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
get_temporary_buffer(ptrdiff_t __len)
# 86 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 87 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits_integer< long> ::__max / sizeof(_Tp));
# 89 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
if (__len > __max) {
# 90 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__len = __max; }
# 92 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
while (__len > (0))
# 93 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 94 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow));
# 96 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
if (__tmp != 0) {
# 97 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
return pair< _Tp *, long> (__tmp, __len); }
# 98 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__len /= (2);
# 99 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 100 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
return pair< _Tp *, long> (static_cast< _Tp *>(0), 0);
# 101 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 110 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _Tp> inline void
# 112 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
return_temporary_buffer(_Tp *__p)
# 113 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{ ::operator delete(__p, std::nothrow); }
# 121 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _ForwardIterator, class _Tp>
# 122 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
class _Temporary_buffer {
# 128 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
public: typedef _Tp value_type;
# 129 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
typedef value_type *pointer;
# 130 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
typedef pointer iterator;
# 131 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
typedef ptrdiff_t size_type;
# 134 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
protected: size_type _M_original_len;
# 135 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
size_type _M_len;
# 136 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
pointer _M_buffer;
# 141 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
public: size_type size() const
# 142 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{ return _M_len; }
# 146 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
size_type requested_size() const
# 147 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{ return _M_original_len; }
# 151 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
iterator begin()
# 152 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{ return _M_buffer; }
# 156 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
iterator end()
# 157 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{ return (_M_buffer) + (_M_len); }
# 163 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);
# 165 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
~_Temporary_buffer()
# 166 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 167 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len));
# 168 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::return_temporary_buffer(_M_buffer);
# 169 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 173 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
private: _Temporary_buffer(const _Temporary_buffer &);
# 176 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
void operator=(const _Temporary_buffer &);
# 177 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
};
# 180 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< bool >
# 181 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
struct __uninitialized_construct_buf_dispatch {
# 183 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> static void
# 185 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator
# 186 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__seed)
# 187 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 188 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
if (__first == __last) {
# 189 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
return; }
# 191 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
_Pointer __cur = __first;
# 192 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
try
# 193 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 194 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::_Construct(std::__addressof(*__first), *__seed);
# 196 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
_Pointer __prev = __cur;
# 197 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
++__cur;
# 198 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
for (; __cur != __last; (++__cur), (++__prev)) {
# 199 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::_Construct(std::__addressof(*__cur), *__prev); }
# 201 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
(*__seed) = (*__prev);
# 202 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 203 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
catch (...)
# 204 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 205 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::_Destroy(__first, __cur);
# 206 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
throw;
# 207 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 208 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 209 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
};
# 212 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template<> struct __uninitialized_construct_buf_dispatch< true> {
# 214 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> static void
# 216 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__ucr(_Pointer, _Pointer, _ForwardIterator) { }
# 217 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
};
# 229 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> inline void
# 231 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator
# 232 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
__seed)
# 233 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 235 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
typedef typename iterator_traits< _Pointer> ::value_type _ValueType;
# 237 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::__uninitialized_construct_buf_dispatch< __has_trivial_constructor(typename iterator_traits< _Pointer> ::value_type)> ::__ucr(__first, __last, __seed);
# 240 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 242 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
template< class _ForwardIterator, class _Tp>
# 244 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) : _M_original_len(std::distance(__first, __last)), _M_len((0)), _M_buffer((0))
# 247 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 248 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
try
# 249 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 250 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
pair< _Tp *, long> __p(std::get_temporary_buffer< value_type> (_M_original_len));
# 252 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
(_M_buffer) = (__p.first);
# 253 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
(_M_len) = (__p.second);
# 254 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
if (_M_buffer) {
# 255 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::__uninitialized_construct_buf(_M_buffer, (_M_buffer) + (_M_len), __first); }
# 257 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 258 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
catch (...)
# 259 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
{
# 260 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
std::return_temporary_buffer(_M_buffer);
# 261 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
(_M_buffer) = 0;
# 262 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
(_M_len) = (0);
# 263 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
throw;
# 264 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 265 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 268 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
}
# 71 "/usr/include/c++/5/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) {
# 76 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _Iterator, class _Compare> void
# 78 "/usr/include/c++/5/bits/stl_algo.h" 3
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator
# 79 "/usr/include/c++/5/bits/stl_algo.h" 3
__c, _Compare __comp)
# 80 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 81 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__a, __b))
# 82 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 83 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__b, __c)) {
# 84 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __b); } else {
# 85 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__a, __c)) {
# 86 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __c); } else {
# 88 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __a); } }
# 89 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 90 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__a, __c)) {
# 91 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __a); } else {
# 92 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__b, __c)) {
# 93 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __c); } else {
# 95 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__result, __b); } } }
# 96 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 99 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator
# 101 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_if(_InputIterator __first, _InputIterator __last, _Predicate
# 102 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, input_iterator_tag)
# 103 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 104 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first != __last) && (!__pred(__first))) {
# 105 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first; }
# 106 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 107 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 110 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator
# 112 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate
# 113 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, random_access_iterator_tag)
# 114 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 116 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2;
# 118 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __trip_count > 0; --__trip_count)
# 119 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 120 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 121 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 122 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 124 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 125 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 126 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 128 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 129 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 130 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 132 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 133 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 134 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 135 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 137 "/usr/include/c++/5/bits/stl_algo.h" 3
switch (__last - __first)
# 138 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 139 "/usr/include/c++/5/bits/stl_algo.h" 3
case 3:
# 140 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 141 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 142 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 143 "/usr/include/c++/5/bits/stl_algo.h" 3
case 2:
# 144 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 145 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 146 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 147 "/usr/include/c++/5/bits/stl_algo.h" 3
case 1:
# 148 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 149 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 150 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 151 "/usr/include/c++/5/bits/stl_algo.h" 3
case 0:
# 152 "/usr/include/c++/5/bits/stl_algo.h" 3
default:
# 153 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last;
# 154 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 155 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 157 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _Iterator, class _Predicate> inline _Iterator
# 159 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
# 160 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 161 "/usr/include/c++/5/bits/stl_algo.h" 3
return __find_if(__first, __last, __pred, std::__iterator_category(__first));
# 163 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 166 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator
# 168 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate
# 169 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 170 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 171 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first));
# 174 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 179 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator
# 181 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred)
# 182 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 183 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __len; (--__len), (++__first)) {
# 184 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__pred(__first)) {
# 185 "/usr/include/c++/5/bits/stl_algo.h" 3
break; } }
# 186 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 187 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 202 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class
# 203 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator1
# 205 "/usr/include/c++/5/bits/stl_algo.h" 3
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 206 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, _BinaryPredicate
# 207 "/usr/include/c++/5/bits/stl_algo.h" 3
__predicate)
# 208 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 210 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__first1 == __last1) || (__first2 == __last2)) {
# 211 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first1; }
# 214 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator2 __p1(__first2);
# 215 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((++__p1) == __last2) {
# 216 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }
# 220 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator2 __p;
# 221 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator1 __current = __first1;
# 223 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; ;)
# 224 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 225 "/usr/include/c++/5/bits/stl_algo.h" 3
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
# 229 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 230 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1; }
# 232 "/usr/include/c++/5/bits/stl_algo.h" 3
__p = __p1;
# 233 "/usr/include/c++/5/bits/stl_algo.h" 3
__current = __first1;
# 234 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((++__current) == __last1) {
# 235 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1; }
# 237 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__predicate(__current, __p))
# 238 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 239 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((++__p) == __last2) {
# 240 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first1; }
# 241 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((++__current) == __last1) {
# 242 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1; }
# 243 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 244 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 245 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 246 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first1;
# 247 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 254 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class
# 255 "/usr/include/c++/5/bits/stl_algo.h" 3
_UnaryPredicate> _ForwardIterator
# 257 "/usr/include/c++/5/bits/stl_algo.h" 3
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 258 "/usr/include/c++/5/bits/stl_algo.h" 3
__count, _UnaryPredicate __unary_pred, forward_iterator_tag)
# 260 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 261 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = std::__find_if(__first, __last, __unary_pred);
# 262 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first != __last)
# 263 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 265 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count;
# 266 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __i = __first;
# 267 "/usr/include/c++/5/bits/stl_algo.h" 3
++__i;
# 268 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__i != __last) && (__n != 1) && __unary_pred(__i))
# 269 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 270 "/usr/include/c++/5/bits/stl_algo.h" 3
++__i;
# 271 "/usr/include/c++/5/bits/stl_algo.h" 3
--__n;
# 272 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 273 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__n == 1) {
# 274 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 275 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i == __last) {
# 276 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; }
# 277 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = std::__find_if(++__i, __last, __unary_pred);
# 278 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 279 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last;
# 280 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 286 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIter, class _Integer, class
# 287 "/usr/include/c++/5/bits/stl_algo.h" 3
_UnaryPredicate> _RandomAccessIter
# 289 "/usr/include/c++/5/bits/stl_algo.h" 3
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer
# 290 "/usr/include/c++/5/bits/stl_algo.h" 3
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag)
# 292 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 294 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType;
# 296 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __tailSize = __last - __first;
# 297 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __remainder = __count;
# 299 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__remainder <= __tailSize)
# 300 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 301 "/usr/include/c++/5/bits/stl_algo.h" 3
__first += __remainder;
# 302 "/usr/include/c++/5/bits/stl_algo.h" 3
__tailSize -= __remainder;
# 305 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIter __backTrack = __first;
# 306 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__unary_pred(--__backTrack))
# 307 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 308 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((--__remainder) == 0) {
# 309 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first - __count; }
# 310 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 311 "/usr/include/c++/5/bits/stl_algo.h" 3
__remainder = ((__count + 1) - (__first - __backTrack));
# 312 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 313 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last;
# 314 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 316 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class
# 317 "/usr/include/c++/5/bits/stl_algo.h" 3
_UnaryPredicate> _ForwardIterator
# 319 "/usr/include/c++/5/bits/stl_algo.h" 3
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 320 "/usr/include/c++/5/bits/stl_algo.h" 3
__count, _UnaryPredicate
# 321 "/usr/include/c++/5/bits/stl_algo.h" 3
__unary_pred)
# 322 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 323 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__count <= 0) {
# 324 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 326 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__count == 1) {
# 327 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_if(__first, __last, __unary_pred); }
# 329 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first));
# 331 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 334 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class
# 335 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator1
# 337 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 338 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate
# 340 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 341 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 342 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 343 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1; }
# 345 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator1 __result = __last1;
# 346 "/usr/include/c++/5/bits/stl_algo.h" 3
while (1)
# 347 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 348 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp);
# 350 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__new_result == __last1) {
# 351 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result; } else
# 353 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 354 "/usr/include/c++/5/bits/stl_algo.h" 3
__result = __new_result;
# 355 "/usr/include/c++/5/bits/stl_algo.h" 3
__first1 = __new_result;
# 356 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 357 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 358 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 359 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 362 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 363 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _BidirectionalIterator1
# 365 "/usr/include/c++/5/bits/stl_algo.h" 3
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 366 "/usr/include/c++/5/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 367 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 368 "/usr/include/c++/5/bits/stl_algo.h" 3
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate
# 370 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 371 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 378 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator1> _RevIterator1;
# 379 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator2> _RevIterator2;
# 381 "/usr/include/c++/5/bits/stl_algo.h" 3
_RevIterator1 __rlast1(__first1);
# 382 "/usr/include/c++/5/bits/stl_algo.h" 3
_RevIterator2 __rlast2(__first2);
# 383 "/usr/include/c++/5/bits/stl_algo.h" 3
_RevIterator1 __rresult = std::__search(((_RevIterator1)(__last1)), __rlast1, ((_RevIterator2)(__last2)), __rlast2, __comp);
# 387 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__rresult == __rlast1) {
# 388 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1; } else
# 390 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 391 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator1 __result = (__rresult.base());
# 392 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__result, -std::distance(__first2, __last2));
# 393 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 394 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 395 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 423 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1
# 425 "/usr/include/c++/5/bits/stl_algo.h" 3
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 426 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2)
# 427 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 434 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 435 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 437 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter());
# 441 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 471 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class
# 472 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> inline _ForwardIterator1
# 474 "/usr/include/c++/5/bits/stl_algo.h" 3
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 475 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, _BinaryPredicate
# 476 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 477 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 484 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 485 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 487 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 491 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 636 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 637 "/usr/include/c++/5/bits/stl_algo.h" 3
_Predicate> _OutputIterator
# 639 "/usr/include/c++/5/bits/stl_algo.h" 3
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 640 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Predicate __pred)
# 641 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 642 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 643 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__pred(__first))
# 644 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 645 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first);
# 646 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 647 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 648 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 649 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 665 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator
# 667 "/usr/include/c++/5/bits/stl_algo.h" 3
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 668 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, const _Tp &__value)
# 669 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 676 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 678 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value));
# 680 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 697 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 698 "/usr/include/c++/5/bits/stl_algo.h" 3
_Predicate> inline _OutputIterator
# 700 "/usr/include/c++/5/bits/stl_algo.h" 3
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 701 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Predicate __pred)
# 702 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 709 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 711 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred));
# 713 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 855 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator
# 857 "/usr/include/c++/5/bits/stl_algo.h" 3
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 858 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 859 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 860 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = std::__find_if(__first, __last, __pred);
# 861 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 862 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 863 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __result = __first;
# 864 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 865 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 866 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__pred(__first))
# 867 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 868 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first);
# 869 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 870 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 871 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 872 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 891 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator
# 893 "/usr/include/c++/5/bits/stl_algo.h" 3
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 894 "/usr/include/c++/5/bits/stl_algo.h" 3
__value)
# 895 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 901 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 903 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value));
# 905 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 924 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator
# 926 "/usr/include/c++/5/bits/stl_algo.h" 3
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 927 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 928 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 934 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 936 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
# 938 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 940 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator
# 942 "/usr/include/c++/5/bits/stl_algo.h" 3
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 943 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 944 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 945 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 946 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; }
# 947 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __next = __first;
# 948 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__next) != __last)
# 949 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 950 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__binary_pred(__first, __next)) {
# 951 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 952 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = __next;
# 953 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 954 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last;
# 955 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 957 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator
# 959 "/usr/include/c++/5/bits/stl_algo.h" 3
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 960 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 961 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 963 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = std::__adjacent_find(__first, __last, __binary_pred);
# 964 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 965 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; }
# 968 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __dest = __first;
# 969 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 970 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__first) != __last) {
# 971 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__binary_pred(__dest, __first)) {
# 972 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(++__dest)) = (*__first); } }
# 973 "/usr/include/c++/5/bits/stl_algo.h" 3
return ++__dest;
# 974 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 990 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator
# 992 "/usr/include/c++/5/bits/stl_algo.h" 3
unique(_ForwardIterator __first, _ForwardIterator __last)
# 993 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 999 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1001 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter());
# 1003 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1020 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator
# 1022 "/usr/include/c++/5/bits/stl_algo.h" 3
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 1023 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 1024 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1031 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1033 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
# 1035 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1043 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator, class
# 1044 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _OutputIterator
# 1046 "/usr/include/c++/5/bits/stl_algo.h" 3
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator
# 1047 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag)
# 1049 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1055 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __next = __first;
# 1056 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first);
# 1057 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__next) != __last) {
# 1058 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__binary_pred(__first, __next))
# 1059 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1060 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = __next;
# 1061 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(++__result)) = (*__first);
# 1062 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 1063 "/usr/include/c++/5/bits/stl_algo.h" 3
return ++__result;
# 1064 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1072 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 1073 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _OutputIterator
# 1075 "/usr/include/c++/5/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1076 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag)
# 1078 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1084 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _InputIterator> ::value_type __value = *__first;
# 1086 "/usr/include/c++/5/bits/stl_algo.h" 3
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
# 1088 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = __value;
# 1089 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__first) != __last) {
# 1090 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__rebound_pred(__first, __value))
# 1091 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1092 "/usr/include/c++/5/bits/stl_algo.h" 3
__value = (*__first);
# 1093 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(++__result)) = __value;
# 1094 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 1095 "/usr/include/c++/5/bits/stl_algo.h" 3
return ++__result;
# 1096 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1104 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class
# 1105 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator
# 1107 "/usr/include/c++/5/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 1108 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag)
# 1110 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1115 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first);
# 1116 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__first) != __last) {
# 1117 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!__binary_pred(__result, __first)) {
# 1118 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(++__result)) = (*__first); } }
# 1119 "/usr/include/c++/5/bits/stl_algo.h" 3
return ++__result;
# 1120 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1127 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> void
# 1129 "/usr/include/c++/5/bits/stl_algo.h" 3
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
# 1131 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1132 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true) {
# 1133 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__first == __last) || (__first == (--__last))) {
# 1134 "/usr/include/c++/5/bits/stl_algo.h" 3
return; } else
# 1136 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1137 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1138 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1139 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 1140 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1147 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> void
# 1149 "/usr/include/c++/5/bits/stl_algo.h" 3
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
# 1151 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1152 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 1153 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 1154 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last;
# 1155 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first < __last)
# 1156 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1157 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1158 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1159 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last;
# 1160 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1161 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1175 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void
# 1177 "/usr/include/c++/5/bits/stl_algo.h" 3
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
# 1178 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1182 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1183 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__first, __last, std::__iterator_category(__first));
# 1184 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1202 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator
# 1204 "/usr/include/c++/5/bits/stl_algo.h" 3
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator
# 1205 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 1206 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1212 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1214 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first != __last)
# 1215 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1216 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last;
# 1217 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__last);
# 1218 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 1219 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1220 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 1221 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1227 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _EuclideanRingElement> _EuclideanRingElement
# 1229 "/usr/include/c++/5/bits/stl_algo.h" 3
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
# 1230 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1231 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__n != 0)
# 1232 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1233 "/usr/include/c++/5/bits/stl_algo.h" 3
_EuclideanRingElement __t = __m % __n;
# 1234 "/usr/include/c++/5/bits/stl_algo.h" 3
__m = __n;
# 1235 "/usr/include/c++/5/bits/stl_algo.h" 3
__n = __t;
# 1236 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1237 "/usr/include/c++/5/bits/stl_algo.h" 3
return __m;
# 1238 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1240 "/usr/include/c++/5/bits/stl_algo.h" 3
inline namespace _V2 {
# 1244 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> _ForwardIterator
# 1246 "/usr/include/c++/5/bits/stl_algo.h" 3
__rotate(_ForwardIterator __first, _ForwardIterator
# 1247 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _ForwardIterator
# 1248 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, forward_iterator_tag)
# 1250 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1251 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle) {
# 1252 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; } else {
# 1253 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__last == __middle) {
# 1254 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } }
# 1256 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __first2 = __middle;
# 1257 "/usr/include/c++/5/bits/stl_algo.h" 3
do
# 1258 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1259 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __first2);
# 1260 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1261 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 1262 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle) {
# 1263 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle = __first2; }
# 1264 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1265 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first2 != __last);
# 1267 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __ret = __first;
# 1269 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2 = __middle;
# 1271 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first2 != __last)
# 1272 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1273 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __first2);
# 1274 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1275 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 1276 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle) {
# 1277 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle = __first2; } else {
# 1278 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first2 == __last) {
# 1279 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2 = __middle; } }
# 1280 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1281 "/usr/include/c++/5/bits/stl_algo.h" 3
return __ret;
# 1282 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1285 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> _BidirectionalIterator
# 1287 "/usr/include/c++/5/bits/stl_algo.h" 3
__rotate(_BidirectionalIterator __first, _BidirectionalIterator
# 1288 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 1289 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, bidirectional_iterator_tag)
# 1291 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1296 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle) {
# 1297 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; } else {
# 1298 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__last == __middle) {
# 1299 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } }
# 1301 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__first, __middle, bidirectional_iterator_tag());
# 1302 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__middle, __last, bidirectional_iterator_tag());
# 1304 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first != __middle) && (__middle != __last))
# 1305 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1306 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, --__last);
# 1307 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1308 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1310 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle)
# 1311 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1312 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__middle, __last, bidirectional_iterator_tag());
# 1313 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last;
# 1314 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 1316 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1317 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__first, __middle, bidirectional_iterator_tag());
# 1318 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 1319 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1320 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1323 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> _RandomAccessIterator
# 1325 "/usr/include/c++/5/bits/stl_algo.h" 3
__rotate(_RandomAccessIterator __first, _RandomAccessIterator
# 1326 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 1327 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, random_access_iterator_tag)
# 1329 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1334 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __middle) {
# 1335 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; } else {
# 1336 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__last == __middle) {
# 1337 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } }
# 1340 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 1342 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 1344 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __n = __last - __first;
# 1345 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __k = __middle - __first;
# 1347 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__k == (__n - __k))
# 1348 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1349 "/usr/include/c++/5/bits/stl_algo.h" 3
std::swap_ranges(__first, __middle, __middle);
# 1350 "/usr/include/c++/5/bits/stl_algo.h" 3
return __middle;
# 1351 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1353 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __p = __first;
# 1354 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __ret = __first + (__last - __middle);
# 1356 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; ;)
# 1357 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1358 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__k < (__n - __k))
# 1359 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1360 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__is_pod(_ValueType) && (__k == 1))
# 1361 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1362 "/usr/include/c++/5/bits/stl_algo.h" 3
_ValueType __t = *__p;
# 1363 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy(__p + 1, __p + __n, __p);
# 1364 "/usr/include/c++/5/bits/stl_algo.h" 3
(*((__p + __n) - 1)) = __t;
# 1365 "/usr/include/c++/5/bits/stl_algo.h" 3
return __ret;
# 1366 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1367 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __q = __p + __k;
# 1368 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_Distance __i = (0); __i < (__n - __k); ++__i)
# 1369 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1370 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__p, __q);
# 1371 "/usr/include/c++/5/bits/stl_algo.h" 3
++__p;
# 1372 "/usr/include/c++/5/bits/stl_algo.h" 3
++__q;
# 1373 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1374 "/usr/include/c++/5/bits/stl_algo.h" 3
__n %= __k;
# 1375 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__n == 0) {
# 1376 "/usr/include/c++/5/bits/stl_algo.h" 3
return __ret; }
# 1377 "/usr/include/c++/5/bits/stl_algo.h" 3
std::swap(__n, __k);
# 1378 "/usr/include/c++/5/bits/stl_algo.h" 3
__k = (__n - __k);
# 1379 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 1381 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1382 "/usr/include/c++/5/bits/stl_algo.h" 3
__k = (__n - __k);
# 1383 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__is_pod(_ValueType) && (__k == 1))
# 1384 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1385 "/usr/include/c++/5/bits/stl_algo.h" 3
_ValueType __t = *((__p + __n) - 1);
# 1386 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy_backward(__p, (__p + __n) - 1, __p + __n);
# 1387 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__p) = __t;
# 1388 "/usr/include/c++/5/bits/stl_algo.h" 3
return __ret;
# 1389 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1390 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __q = __p + __n;
# 1391 "/usr/include/c++/5/bits/stl_algo.h" 3
__p = (__q - __k);
# 1392 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_Distance __i = (0); __i < (__n - __k); ++__i)
# 1393 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1394 "/usr/include/c++/5/bits/stl_algo.h" 3
--__p;
# 1395 "/usr/include/c++/5/bits/stl_algo.h" 3
--__q;
# 1396 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__p, __q);
# 1397 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1398 "/usr/include/c++/5/bits/stl_algo.h" 3
__n %= __k;
# 1399 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__n == 0) {
# 1400 "/usr/include/c++/5/bits/stl_algo.h" 3
return __ret; }
# 1401 "/usr/include/c++/5/bits/stl_algo.h" 3
std::swap(__n, __k);
# 1402 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1403 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1404 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1429 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator
# 1431 "/usr/include/c++/5/bits/stl_algo.h" 3
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator
# 1432 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 1433 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1437 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1438 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1440 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first));
# 1442 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1444 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1466 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator
# 1468 "/usr/include/c++/5/bits/stl_algo.h" 3
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator
# 1469 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _OutputIterator __result)
# 1470 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1475 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1476 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1478 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first, __middle, std::copy(__middle, __last, __result));
# 1480 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1483 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator
# 1485 "/usr/include/c++/5/bits/stl_algo.h" 3
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1486 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, forward_iterator_tag)
# 1487 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1488 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 1489 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 1491 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__pred(*__first)) {
# 1492 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((++__first) == __last) {
# 1493 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } }
# 1495 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __next = __first;
# 1497 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__next) != __last) {
# 1498 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(*__next))
# 1499 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1500 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __next);
# 1501 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1502 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 1504 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 1505 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1508 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator
# 1510 "/usr/include/c++/5/bits/stl_algo.h" 3
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate
# 1511 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, bidirectional_iterator_tag)
# 1512 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1513 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true)
# 1514 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1515 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true) {
# 1516 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 1517 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } else {
# 1518 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 1519 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first; } else {
# 1521 "/usr/include/c++/5/bits/stl_algo.h" 3
break; } } }
# 1522 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last;
# 1523 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true) {
# 1524 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 1525 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; } else {
# 1526 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!((bool)__pred(*__last))) {
# 1527 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last; } else {
# 1529 "/usr/include/c++/5/bits/stl_algo.h" 3
break; } } }
# 1530 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1531 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1532 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1533 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1543 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Pointer, class _Predicate, class
# 1544 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance> _ForwardIterator
# 1546 "/usr/include/c++/5/bits/stl_algo.h" 3
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator
# 1547 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Predicate
# 1548 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, _Distance __len, _Pointer
# 1549 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer, _Distance
# 1550 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer_size)
# 1551 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1552 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len == 1) {
# 1553 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 1555 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len <= __buffer_size)
# 1556 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1557 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __result1 = __first;
# 1558 "/usr/include/c++/5/bits/stl_algo.h" 3
_Pointer __result2 = __buffer;
# 1563 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result2) = (*__first);
# 1564 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result2;
# 1565 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1566 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 1567 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first))
# 1568 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1569 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result1) = (*__first);
# 1570 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result1;
# 1571 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 1573 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1574 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result2) = (*__first);
# 1575 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result2;
# 1576 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 1578 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy(__buffer, __result2, __result1);
# 1579 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result1;
# 1580 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1582 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __middle = __first;
# 1583 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__middle, __len / 2);
# 1584 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size);
# 1591 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __right_len = __len - (__len / 2);
# 1592 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred);
# 1595 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__right_len) {
# 1596 "/usr/include/c++/5/bits/stl_algo.h" 3
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }
# 1601 "/usr/include/c++/5/bits/stl_algo.h" 3
std::rotate(__left_split, __middle, __right_split);
# 1602 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__left_split, std::distance(__middle, __right_split));
# 1603 "/usr/include/c++/5/bits/stl_algo.h" 3
return __left_split;
# 1604 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1606 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator
# 1608 "/usr/include/c++/5/bits/stl_algo.h" 3
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1609 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 1610 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1611 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = std::__find_if_not(__first, __last, __pred);
# 1613 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 1614 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 1617 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 1619 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 1621 "/usr/include/c++/5/bits/stl_algo.h" 3
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type> __buf(__first, __last);
# 1622 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)(__buf.requested_size()), (__buf.begin()), (_DistanceType)(__buf.size()));
# 1627 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1646 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator
# 1648 "/usr/include/c++/5/bits/stl_algo.h" 3
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1649 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 1650 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1656 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1658 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
# 1660 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1663 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 1665 "/usr/include/c++/5/bits/stl_algo.h" 3
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator
# 1666 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 1667 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 1668 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1669 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__make_heap(__first, __middle, __comp);
# 1670 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) {
# 1671 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__i, __first)) {
# 1672 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__pop_heap(__first, __middle, __i, __comp); } }
# 1673 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1677 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class
# 1678 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _RandomAccessIterator
# 1680 "/usr/include/c++/5/bits/stl_algo.h" 3
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator
# 1681 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_first, _RandomAccessIterator
# 1682 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_last, _Compare
# 1683 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1684 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1686 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType;
# 1687 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef iterator_traits< _RandomAccessIterator> _RItTraits;
# 1688 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 1690 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__result_first == __result_last) {
# 1691 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result_last; }
# 1692 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __result_real_last = __result_first;
# 1693 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first != __last) && (__result_real_last != __result_last))
# 1694 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1695 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result_real_last) = (*__first);
# 1696 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result_real_last;
# 1697 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1698 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1700 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__make_heap(__result_first, __result_real_last, __comp);
# 1701 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__first != __last)
# 1702 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1703 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first, __result_first)) {
# 1704 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }
# 1708 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1709 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1710 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__sort_heap(__result_first, __result_real_last, __comp);
# 1711 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result_real_last;
# 1712 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1732 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator
# 1734 "/usr/include/c++/5/bits/stl_algo.h" 3
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator
# 1735 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_first, _RandomAccessIterator
# 1736 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_last)
# 1737 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1739 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType;
# 1741 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType;
# 1743 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 1752 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1753 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1755 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter());
# 1758 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1780 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class
# 1781 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> inline _RandomAccessIterator
# 1783 "/usr/include/c++/5/bits/stl_algo.h" 3
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator
# 1784 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_first, _RandomAccessIterator
# 1785 "/usr/include/c++/5/bits/stl_algo.h" 3
__result_last, _Compare
# 1786 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1787 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1789 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType;
# 1791 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType;
# 1793 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 1805 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1806 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 1808 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 1811 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1814 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 1816 "/usr/include/c++/5/bits/stl_algo.h" 3
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare
# 1817 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1818 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1820 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _RandomAccessIterator> ::value_type __val = *__last;
# 1821 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __next = __last;
# 1822 "/usr/include/c++/5/bits/stl_algo.h" 3
--__next;
# 1823 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__comp(__val, __next))
# 1824 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1825 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__last) = (*__next);
# 1826 "/usr/include/c++/5/bits/stl_algo.h" 3
__last = __next;
# 1827 "/usr/include/c++/5/bits/stl_algo.h" 3
--__next;
# 1828 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1829 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__last) = __val;
# 1830 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1833 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 1835 "/usr/include/c++/5/bits/stl_algo.h" 3
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 1836 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 1837 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1838 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) { return; }
# 1840 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
# 1841 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1842 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__i, __first))
# 1843 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1845 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _RandomAccessIterator> ::value_type __val = *__i;
# 1846 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy_backward(__first, __i, __i + 1);
# 1847 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__first) = __val;
# 1848 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 1850 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }
# 1852 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1853 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1856 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 1858 "/usr/include/c++/5/bits/stl_algo.h" 3
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 1859 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 1860 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1861 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) {
# 1862 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }
# 1864 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1870 "/usr/include/c++/5/bits/stl_algo.h" 3
enum { _S_threshold = 16};
# 1873 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 1875 "/usr/include/c++/5/bits/stl_algo.h" 3
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 1876 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 1877 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1878 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__last - __first) > ((int)_S_threshold))
# 1879 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1880 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp);
# 1881 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp);
# 1883 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 1885 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp); }
# 1886 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1889 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator
# 1891 "/usr/include/c++/5/bits/stl_algo.h" 3
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator
# 1892 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _RandomAccessIterator
# 1893 "/usr/include/c++/5/bits/stl_algo.h" 3
__pivot, _Compare __comp)
# 1894 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1895 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true)
# 1896 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1897 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__comp(__first, __pivot)) {
# 1898 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first; }
# 1899 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last;
# 1900 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__comp(__pivot, __last)) {
# 1901 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last; }
# 1902 "/usr/include/c++/5/bits/stl_algo.h" 3
if (!(__first < __last)) {
# 1903 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 1904 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1905 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 1906 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1907 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1910 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator
# 1912 "/usr/include/c++/5/bits/stl_algo.h" 3
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator
# 1913 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 1914 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1915 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __mid = __first + ((__last - __first) / 2);
# 1916 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp);
# 1918 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__unguarded_partition(__first + 1, __last, __first, __comp);
# 1919 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1921 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 1923 "/usr/include/c++/5/bits/stl_algo.h" 3
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 1924 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 1925 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare
# 1926 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1927 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1928 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__heap_select(__first, __middle, __last, __comp);
# 1929 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__sort_heap(__first, __middle, __comp);
# 1930 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1933 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Size, class _Compare> void
# 1935 "/usr/include/c++/5/bits/stl_algo.h" 3
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator
# 1936 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Size
# 1937 "/usr/include/c++/5/bits/stl_algo.h" 3
__depth_limit, _Compare __comp)
# 1938 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1939 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__last - __first) > ((int)_S_threshold))
# 1940 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1941 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__depth_limit == 0)
# 1942 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1943 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__partial_sort(__first, __last, __last, __comp);
# 1944 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 1945 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1946 "/usr/include/c++/5/bits/stl_algo.h" 3
--__depth_limit;
# 1947 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp);
# 1949 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__introsort_loop(__cut, __last, __depth_limit, __comp);
# 1950 "/usr/include/c++/5/bits/stl_algo.h" 3
__last = __cut;
# 1951 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1952 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1956 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 1958 "/usr/include/c++/5/bits/stl_algo.h" 3
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 1959 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1960 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1961 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first != __last)
# 1962 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1963 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp);
# 1966 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__final_insertion_sort(__first, __last, __comp);
# 1967 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1968 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1970 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Size, class _Compare> void
# 1972 "/usr/include/c++/5/bits/stl_algo.h" 3
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator
# 1973 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Size __depth_limit, _Compare
# 1974 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 1975 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1976 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__last - __first) > 3)
# 1977 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1978 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__depth_limit == 0)
# 1979 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 1980 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__heap_select(__first, __nth + 1, __last, __comp);
# 1982 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __nth);
# 1983 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 1984 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1985 "/usr/include/c++/5/bits/stl_algo.h" 3
--__depth_limit;
# 1986 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp);
# 1988 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__cut <= __nth) {
# 1989 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = __cut; } else {
# 1991 "/usr/include/c++/5/bits/stl_algo.h" 3
__last = __cut; }
# 1992 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 1993 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 1994 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2016 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator
# 2018 "/usr/include/c++/5/bits/stl_algo.h" 3
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2019 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2020 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2022 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2029 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2031 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 2033 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2035 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator
# 2037 "/usr/include/c++/5/bits/stl_algo.h" 3
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2038 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2039 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2041 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2043 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __len = std::distance(__first, __last);
# 2045 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__len > 0)
# 2046 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2047 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __half = __len >> 1;
# 2048 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __middle = __first;
# 2049 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2050 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__val, __middle)) {
# 2051 "/usr/include/c++/5/bits/stl_algo.h" 3
__len = __half; } else
# 2053 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2054 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = __middle;
# 2055 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 2056 "/usr/include/c++/5/bits/stl_algo.h" 3
__len = ((__len - __half) - 1);
# 2057 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2058 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2059 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 2060 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2073 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator
# 2075 "/usr/include/c++/5/bits/stl_algo.h" 3
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2076 "/usr/include/c++/5/bits/stl_algo.h" 3
__val)
# 2077 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2079 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2084 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2086 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter());
# 2088 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2105 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator
# 2107 "/usr/include/c++/5/bits/stl_algo.h" 3
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2108 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2109 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2111 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2118 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2120 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp));
# 2122 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2124 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class
# 2125 "/usr/include/c++/5/bits/stl_algo.h" 3
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>
# 2127 "/usr/include/c++/5/bits/stl_algo.h" 3
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2128 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _CompareItTp
# 2129 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp_it_val, _CompareTpIt __comp_val_it)
# 2130 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2132 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2134 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __len = std::distance(__first, __last);
# 2136 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__len > 0)
# 2137 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2138 "/usr/include/c++/5/bits/stl_algo.h" 3
_DistanceType __half = __len >> 1;
# 2139 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __middle = __first;
# 2140 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2141 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp_it_val(__middle, __val))
# 2142 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2143 "/usr/include/c++/5/bits/stl_algo.h" 3
__first = __middle;
# 2144 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first;
# 2145 "/usr/include/c++/5/bits/stl_algo.h" 3
__len = ((__len - __half) - 1);
# 2146 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2147 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp_val_it(__val, __middle)) {
# 2148 "/usr/include/c++/5/bits/stl_algo.h" 3
__len = __half; } else
# 2150 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2151 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val);
# 2153 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__first, __len);
# 2154 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
# 2156 "/usr/include/c++/5/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__left, __right);
# 2157 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 2158 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2159 "/usr/include/c++/5/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__first, __first);
# 2160 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2179 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>
# 2181 "/usr/include/c++/5/bits/stl_algo.h" 3
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2182 "/usr/include/c++/5/bits/stl_algo.h" 3
__val)
# 2183 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2185 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2191 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2192 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2194 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter());
# 2197 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2216 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>
# 2218 "/usr/include/c++/5/bits/stl_algo.h" 3
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2219 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2220 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2222 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2231 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2233 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2235 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp));
# 2238 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2252 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> bool
# 2254 "/usr/include/c++/5/bits/stl_algo.h" 3
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2255 "/usr/include/c++/5/bits/stl_algo.h" 3
__val)
# 2256 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2258 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2263 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2264 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2266 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val());
# 2269 "/usr/include/c++/5/bits/stl_algo.h" 3
return (__i != __last) && (!(__val < (*__i)));
# 2270 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2287 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> bool
# 2289 "/usr/include/c++/5/bits/stl_algo.h" 3
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2290 "/usr/include/c++/5/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2291 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2293 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2300 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2302 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2304 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 2307 "/usr/include/c++/5/bits/stl_algo.h" 3
return (__i != __last) && (!((bool)__comp(__val, *__i)));
# 2308 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2313 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 2314 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> void
# 2316 "/usr/include/c++/5/bits/stl_algo.h" 3
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 2317 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 2318 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 2319 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2320 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 2321 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2322 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1))
# 2323 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2324 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first2);
# 2325 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 2326 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2328 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2329 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 2330 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 2331 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2332 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 2333 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2334 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first1 != __last1) {
# 2335 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy(__first1, __last1, __result); }
# 2336 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2339 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 2340 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator3, class _Compare> void
# 2342 "/usr/include/c++/5/bits/stl_algo.h" 3
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 2343 "/usr/include/c++/5/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 2344 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 2345 "/usr/include/c++/5/bits/stl_algo.h" 3
__last2, _BidirectionalIterator3
# 2346 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare
# 2347 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2348 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2349 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first1 == __last1)
# 2350 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2351 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy_backward(__first2, __last2, __result);
# 2352 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 2353 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2354 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 2355 "/usr/include/c++/5/bits/stl_algo.h" 3
return; } }
# 2357 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last1;
# 2358 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last2;
# 2359 "/usr/include/c++/5/bits/stl_algo.h" 3
while (true)
# 2360 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2361 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__last2, __last1))
# 2362 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2363 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(--__result)) = (*__last1);
# 2364 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first1 == __last1)
# 2365 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2366 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy_backward(__first2, ++__last2, __result);
# 2367 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 2368 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2369 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last1;
# 2370 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2372 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2373 "/usr/include/c++/5/bits/stl_algo.h" 3
(*(--__result)) = (*__last2);
# 2374 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 2375 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 2376 "/usr/include/c++/5/bits/stl_algo.h" 3
--__last2;
# 2377 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2378 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2379 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2382 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 2383 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance> _BidirectionalIterator1
# 2385 "/usr/include/c++/5/bits/stl_algo.h" 3
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1
# 2386 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator1
# 2387 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Distance
# 2388 "/usr/include/c++/5/bits/stl_algo.h" 3
__len1, _Distance __len2, _BidirectionalIterator2
# 2389 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer, _Distance
# 2390 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer_size)
# 2391 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2392 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator2 __buffer_end;
# 2393 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__len1 > __len2) && (__len2 <= __buffer_size))
# 2394 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2395 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len2)
# 2396 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2397 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer_end = std::copy(__middle, __last, __buffer);
# 2398 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy_backward(__first, __middle, __last);
# 2399 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__buffer, __buffer_end, __first);
# 2400 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2402 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 2403 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2404 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len1 <= __buffer_size)
# 2405 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2406 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len1)
# 2407 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2408 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer_end = std::copy(__first, __middle, __buffer);
# 2409 "/usr/include/c++/5/bits/stl_algo.h" 3
std::copy(__middle, __last, __first);
# 2410 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy_backward(__buffer, __buffer_end, __last);
# 2411 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2413 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last; }
# 2414 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2416 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2417 "/usr/include/c++/5/bits/stl_algo.h" 3
std::rotate(__first, __middle, __last);
# 2418 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__first, std::distance(__middle, __last));
# 2419 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 2420 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 2421 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2424 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Distance, class
# 2425 "/usr/include/c++/5/bits/stl_algo.h" 3
_Pointer, class _Compare> void
# 2427 "/usr/include/c++/5/bits/stl_algo.h" 3
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator
# 2428 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2429 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Distance
# 2430 "/usr/include/c++/5/bits/stl_algo.h" 3
__len1, _Distance __len2, _Pointer
# 2431 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size, _Compare
# 2432 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2433 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2434 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__len1 <= __len2) && (__len1 <= __buffer_size))
# 2435 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2436 "/usr/include/c++/5/bits/stl_algo.h" 3
_Pointer __buffer_end = std::copy(__first, __middle, __buffer);
# 2437 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp);
# 2439 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 2440 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len2 <= __buffer_size)
# 2441 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2442 "/usr/include/c++/5/bits/stl_algo.h" 3
_Pointer __buffer_end = std::copy(__middle, __last, __buffer);
# 2443 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp);
# 2445 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2447 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2448 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __first_cut = __first;
# 2449 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __second_cut = __middle;
# 2450 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __len11 = (0);
# 2451 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __len22 = (0);
# 2452 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len1 > __len2)
# 2453 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2454 "/usr/include/c++/5/bits/stl_algo.h" 3
__len11 = (__len1 / 2);
# 2455 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 2456 "/usr/include/c++/5/bits/stl_algo.h" 3
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 2459 "/usr/include/c++/5/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 2460 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2462 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2463 "/usr/include/c++/5/bits/stl_algo.h" 3
__len22 = (__len2 / 2);
# 2464 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 2465 "/usr/include/c++/5/bits/stl_algo.h" 3
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp));
# 2468 "/usr/include/c++/5/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 2469 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2471 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size);
# 2475 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp);
# 2477 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp);
# 2481 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 2482 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2485 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Distance, class
# 2486 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> void
# 2488 "/usr/include/c++/5/bits/stl_algo.h" 3
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator
# 2489 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2490 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Distance
# 2491 "/usr/include/c++/5/bits/stl_algo.h" 3
__len1, _Distance __len2, _Compare
# 2492 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2493 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2494 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__len1 == 0) || (__len2 == 0)) {
# 2495 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 2497 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__len1 + __len2) == 2)
# 2498 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2499 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__middle, __first)) {
# 2500 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__first, __middle); }
# 2501 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 2502 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2504 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __first_cut = __first;
# 2505 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __second_cut = __middle;
# 2506 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __len11 = (0);
# 2507 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __len22 = (0);
# 2508 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len1 > __len2)
# 2509 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2510 "/usr/include/c++/5/bits/stl_algo.h" 3
__len11 = (__len1 / 2);
# 2511 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 2512 "/usr/include/c++/5/bits/stl_algo.h" 3
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp));
# 2515 "/usr/include/c++/5/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 2516 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2518 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2519 "/usr/include/c++/5/bits/stl_algo.h" 3
__len22 = (__len2 / 2);
# 2520 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 2521 "/usr/include/c++/5/bits/stl_algo.h" 3
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp));
# 2524 "/usr/include/c++/5/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 2525 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2527 "/usr/include/c++/5/bits/stl_algo.h" 3
std::rotate(__first_cut, __middle, __second_cut);
# 2528 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __new_middle = __first_cut;
# 2529 "/usr/include/c++/5/bits/stl_algo.h" 3
std::advance(__new_middle, std::distance(__middle, __second_cut));
# 2530 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp);
# 2532 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp);
# 2534 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2536 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> void
# 2538 "/usr/include/c++/5/bits/stl_algo.h" 3
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator
# 2539 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2540 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare
# 2541 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2542 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2544 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType;
# 2546 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType;
# 2548 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__first == __middle) || (__middle == __last)) {
# 2549 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 2551 "/usr/include/c++/5/bits/stl_algo.h" 3
const _DistanceType __len1 = std::distance(__first, __middle);
# 2552 "/usr/include/c++/5/bits/stl_algo.h" 3
const _DistanceType __len2 = std::distance(__middle, __last);
# 2554 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type> _TmpBuf;
# 2555 "/usr/include/c++/5/bits/stl_algo.h" 3
_TmpBuf __buf(__first, __last);
# 2557 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__buf.begin()) == 0) {
# 2558 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else {
# 2561 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }
# 2564 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2584 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void
# 2586 "/usr/include/c++/5/bits/stl_algo.h" 3
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator
# 2587 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2588 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 2589 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2595 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2596 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2598 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter());
# 2600 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2624 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline void
# 2626 "/usr/include/c++/5/bits/stl_algo.h" 3
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator
# 2627 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2628 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare
# 2629 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2630 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2637 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2638 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2640 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 2642 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2646 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 2647 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _OutputIterator
# 2649 "/usr/include/c++/5/bits/stl_algo.h" 3
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator
# 2650 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator __last2, _OutputIterator
# 2651 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 2652 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2653 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 2654 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2655 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1))
# 2656 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2657 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first2);
# 2658 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 2659 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2661 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2662 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 2663 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 2664 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2665 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 2666 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2667 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 2670 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2672 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class
# 2673 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance, class _Compare> void
# 2675 "/usr/include/c++/5/bits/stl_algo.h" 3
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1
# 2676 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _RandomAccessIterator2
# 2677 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Distance __step_size, _Compare
# 2678 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2679 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2680 "/usr/include/c++/5/bits/stl_algo.h" 3
const _Distance __two_step = 2 * __step_size;
# 2682 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__last - __first) >= __two_step)
# 2683 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2684 "/usr/include/c++/5/bits/stl_algo.h" 3
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp);
# 2688 "/usr/include/c++/5/bits/stl_algo.h" 3
__first += __two_step;
# 2689 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2690 "/usr/include/c++/5/bits/stl_algo.h" 3
__step_size = std::min((_Distance)(__last - __first), __step_size);
# 2692 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp);
# 2694 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2696 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Distance, class
# 2697 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> void
# 2699 "/usr/include/c++/5/bits/stl_algo.h" 3
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2700 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Distance
# 2701 "/usr/include/c++/5/bits/stl_algo.h" 3
__chunk_size, _Compare __comp)
# 2702 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2703 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__last - __first) >= __chunk_size)
# 2704 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2705 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + __chunk_size, __comp);
# 2706 "/usr/include/c++/5/bits/stl_algo.h" 3
__first += __chunk_size;
# 2707 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2708 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 2709 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2711 "/usr/include/c++/5/bits/stl_algo.h" 3
enum { _S_chunk_size = 7};
# 2713 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Pointer, class _Compare> void
# 2715 "/usr/include/c++/5/bits/stl_algo.h" 3
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator
# 2716 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Pointer
# 2717 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer, _Compare __comp)
# 2718 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2720 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 2722 "/usr/include/c++/5/bits/stl_algo.h" 3
const _Distance __len = __last - __first;
# 2723 "/usr/include/c++/5/bits/stl_algo.h" 3
const _Pointer __buffer_last = __buffer + __len;
# 2725 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance __step_size = (_S_chunk_size);
# 2726 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
# 2728 "/usr/include/c++/5/bits/stl_algo.h" 3
while (__step_size < __len)
# 2729 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2730 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp);
# 2732 "/usr/include/c++/5/bits/stl_algo.h" 3
__step_size *= 2;
# 2733 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp);
# 2735 "/usr/include/c++/5/bits/stl_algo.h" 3
__step_size *= 2;
# 2736 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2737 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2739 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Pointer, class
# 2740 "/usr/include/c++/5/bits/stl_algo.h" 3
_Distance, class _Compare> void
# 2742 "/usr/include/c++/5/bits/stl_algo.h" 3
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator
# 2743 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Pointer
# 2744 "/usr/include/c++/5/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size, _Compare
# 2745 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2746 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2747 "/usr/include/c++/5/bits/stl_algo.h" 3
const _Distance __len = ((__last - __first) + 1) / 2;
# 2748 "/usr/include/c++/5/bits/stl_algo.h" 3
const _RandomAccessIterator __middle = __first + __len;
# 2749 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__len > __buffer_size)
# 2750 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2751 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp);
# 2753 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp);
# 2755 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 2757 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2758 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
# 2759 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
# 2760 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2761 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp);
# 2766 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2769 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> void
# 2771 "/usr/include/c++/5/bits/stl_algo.h" 3
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2772 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2773 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2774 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__last - __first) < 15)
# 2775 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2776 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 2777 "/usr/include/c++/5/bits/stl_algo.h" 3
return;
# 2778 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2779 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __middle = __first + ((__last - __first) / 2);
# 2780 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __middle, __comp);
# 2781 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__inplace_stable_sort(__middle, __last, __comp);
# 2782 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp);
# 2786 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2795 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 2796 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> bool
# 2798 "/usr/include/c++/5/bits/stl_algo.h" 3
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 2799 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _Compare
# 2800 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2801 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2802 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 2803 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1)) {
# 2804 "/usr/include/c++/5/bits/stl_algo.h" 3
return false; } else {
# 2805 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first1, __first2)) {
# 2806 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1; } else {
# 2808 "/usr/include/c++/5/bits/stl_algo.h" 3
(++__first1), (++__first2); } } }
# 2810 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first2 == __last2;
# 2811 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2831 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2> inline bool
# 2833 "/usr/include/c++/5/bits/stl_algo.h" 3
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 2834 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2)
# 2835 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2845 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2846 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2848 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter());
# 2850 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2873 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 2874 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> inline bool
# 2876 "/usr/include/c++/5/bits/stl_algo.h" 3
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 2877 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _Compare
# 2878 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 2879 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2889 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2890 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2892 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 2894 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2906 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool
# 2908 "/usr/include/c++/5/bits/stl_algo.h" 3
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 2909 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2910 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2911 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 2912 "/usr/include/c++/5/bits/stl_algo.h" 3
return false; }
# 2913 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __i = __first;
# 2914 "/usr/include/c++/5/bits/stl_algo.h" 3
++__i;
# 2915 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i == __last) {
# 2916 "/usr/include/c++/5/bits/stl_algo.h" 3
return false; }
# 2917 "/usr/include/c++/5/bits/stl_algo.h" 3
__i = __last;
# 2918 "/usr/include/c++/5/bits/stl_algo.h" 3
--__i;
# 2920 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; ;)
# 2921 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2922 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __ii = __i;
# 2923 "/usr/include/c++/5/bits/stl_algo.h" 3
--__i;
# 2924 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__i, __ii))
# 2925 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2926 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __j = __last;
# 2927 "/usr/include/c++/5/bits/stl_algo.h" 3
while (!__comp(__i, --__j))
# 2928 "/usr/include/c++/5/bits/stl_algo.h" 3
{ }
# 2929 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 2930 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__ii, __last, std::__iterator_category(__first));
# 2932 "/usr/include/c++/5/bits/stl_algo.h" 3
return true;
# 2933 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2934 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i == __first)
# 2935 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2936 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__first, __last, std::__iterator_category(__first));
# 2938 "/usr/include/c++/5/bits/stl_algo.h" 3
return false;
# 2939 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2940 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2941 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2955 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool
# 2957 "/usr/include/c++/5/bits/stl_algo.h" 3
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 2958 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 2959 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2965 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2967 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 2969 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 2986 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool
# 2988 "/usr/include/c++/5/bits/stl_algo.h" 3
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 2989 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2990 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 2997 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 2999 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 3001 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3003 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool
# 3005 "/usr/include/c++/5/bits/stl_algo.h" 3
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 3006 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 3007 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3008 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 3009 "/usr/include/c++/5/bits/stl_algo.h" 3
return false; }
# 3010 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __i = __first;
# 3011 "/usr/include/c++/5/bits/stl_algo.h" 3
++__i;
# 3012 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i == __last) {
# 3013 "/usr/include/c++/5/bits/stl_algo.h" 3
return false; }
# 3014 "/usr/include/c++/5/bits/stl_algo.h" 3
__i = __last;
# 3015 "/usr/include/c++/5/bits/stl_algo.h" 3
--__i;
# 3017 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; ;)
# 3018 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3019 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __ii = __i;
# 3020 "/usr/include/c++/5/bits/stl_algo.h" 3
--__i;
# 3021 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__ii, __i))
# 3022 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3023 "/usr/include/c++/5/bits/stl_algo.h" 3
_BidirectionalIterator __j = __last;
# 3024 "/usr/include/c++/5/bits/stl_algo.h" 3
while (!__comp(--__j, __i))
# 3025 "/usr/include/c++/5/bits/stl_algo.h" 3
{ }
# 3026 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 3027 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__ii, __last, std::__iterator_category(__first));
# 3029 "/usr/include/c++/5/bits/stl_algo.h" 3
return true;
# 3030 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3031 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i == __first)
# 3032 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3033 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__reverse(__first, __last, std::__iterator_category(__first));
# 3035 "/usr/include/c++/5/bits/stl_algo.h" 3
return false;
# 3036 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3037 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3038 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3053 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool
# 3055 "/usr/include/c++/5/bits/stl_algo.h" 3
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 3056 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 3057 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3063 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3065 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 3067 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3084 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool
# 3086 "/usr/include/c++/5/bits/stl_algo.h" 3
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 3087 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 3088 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3095 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3097 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 3099 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3104 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 3105 "/usr/include/c++/5/bits/stl_algo.h" 3
_Predicate, class _Tp> _OutputIterator
# 3107 "/usr/include/c++/5/bits/stl_algo.h" 3
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 3108 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Predicate
# 3109 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, const _Tp &__new_value)
# 3110 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3111 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; (++__first), (++__result)) {
# 3112 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 3113 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = __new_value; } else {
# 3115 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first); } }
# 3116 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 3117 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3133 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator
# 3135 "/usr/include/c++/5/bits/stl_algo.h" 3
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 3136 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, const _Tp &
# 3137 "/usr/include/c++/5/bits/stl_algo.h" 3
__old_value, const _Tp &__new_value)
# 3138 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3145 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3147 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value);
# 3150 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3167 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 3168 "/usr/include/c++/5/bits/stl_algo.h" 3
_Predicate, class _Tp> inline _OutputIterator
# 3170 "/usr/include/c++/5/bits/stl_algo.h" 3
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 3171 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Predicate
# 3172 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, const _Tp &__new_value)
# 3173 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3180 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3182 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value);
# 3185 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3187 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type
# 3189 "/usr/include/c++/5/bits/stl_algo.h" 3
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
# 3190 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3191 "/usr/include/c++/5/bits/stl_algo.h" 3
typename iterator_traits< _InputIterator> ::difference_type __n = (0);
# 3192 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 3193 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(__first)) {
# 3194 "/usr/include/c++/5/bits/stl_algo.h" 3
++__n; } }
# 3195 "/usr/include/c++/5/bits/stl_algo.h" 3
return __n;
# 3196 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3759 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Function> _Function
# 3761 "/usr/include/c++/5/bits/stl_algo.h" 3
for_each(_InputIterator __first, _InputIterator __last, _Function __f)
# 3762 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3765 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3766 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 3767 "/usr/include/c++/5/bits/stl_algo.h" 3
__f(*__first); }
# 3768 "/usr/include/c++/5/bits/stl_algo.h" 3
return __f;
# 3769 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3780 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline _InputIterator
# 3782 "/usr/include/c++/5/bits/stl_algo.h" 3
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3783 "/usr/include/c++/5/bits/stl_algo.h" 3
__val)
# 3784 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3789 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3790 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val));
# 3792 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3804 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator
# 3806 "/usr/include/c++/5/bits/stl_algo.h" 3
find_if(_InputIterator __first, _InputIterator __last, _Predicate
# 3807 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 3808 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3813 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3815 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
# 3817 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3835 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator> _InputIterator
# 3837 "/usr/include/c++/5/bits/stl_algo.h" 3
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator
# 3838 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator __last2)
# 3839 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3846 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3847 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3849 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first1 != __last1; ++__first1) {
# 3850 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) {
# 3851 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((*__first1) == (*__iter)) {
# 3852 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first1; } } }
# 3853 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1;
# 3854 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3875 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class
# 3876 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> _InputIterator
# 3878 "/usr/include/c++/5/bits/stl_algo.h" 3
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator
# 3879 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator __last2, _BinaryPredicate
# 3880 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 3881 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3888 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3889 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3891 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first1 != __last1; ++__first1) {
# 3892 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) {
# 3893 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(*__first1, *__iter)) {
# 3894 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first1; } } }
# 3895 "/usr/include/c++/5/bits/stl_algo.h" 3
return __last1;
# 3896 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3907 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator
# 3909 "/usr/include/c++/5/bits/stl_algo.h" 3
adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
# 3910 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3915 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3917 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter());
# 3919 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3932 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator
# 3934 "/usr/include/c++/5/bits/stl_algo.h" 3
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 3935 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 3936 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3942 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3944 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
# 3946 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3957 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type
# 3959 "/usr/include/c++/5/bits/stl_algo.h" 3
count(_InputIterator __first, _InputIterator __last, const _Tp &__value)
# 3960 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3965 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3967 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value));
# 3969 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 3980 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type
# 3982 "/usr/include/c++/5/bits/stl_algo.h" 3
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
# 3983 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 3988 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 3990 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
# 3992 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4020 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1
# 4022 "/usr/include/c++/5/bits/stl_algo.h" 3
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 4023 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2)
# 4024 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4031 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4032 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4034 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter());
# 4036 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4059 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class
# 4060 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> inline _ForwardIterator1
# 4062 "/usr/include/c++/5/bits/stl_algo.h" 3
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 4063 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, _BinaryPredicate
# 4064 "/usr/include/c++/5/bits/stl_algo.h" 3
__predicate)
# 4065 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4072 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4073 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4075 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate));
# 4077 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4094 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator
# 4096 "/usr/include/c++/5/bits/stl_algo.h" 3
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 4097 "/usr/include/c++/5/bits/stl_algo.h" 3
__count, const _Tp &__val)
# 4098 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4103 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4105 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val));
# 4107 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4127 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp, class
# 4128 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> inline _ForwardIterator
# 4130 "/usr/include/c++/5/bits/stl_algo.h" 3
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 4131 "/usr/include/c++/5/bits/stl_algo.h" 3
__count, const _Tp &__val, _BinaryPredicate
# 4132 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 4133 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4138 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4140 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
# 4142 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4161 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 4162 "/usr/include/c++/5/bits/stl_algo.h" 3
_UnaryOperation> _OutputIterator
# 4164 "/usr/include/c++/5/bits/stl_algo.h" 3
transform(_InputIterator __first, _InputIterator __last, _OutputIterator
# 4165 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _UnaryOperation __unary_op)
# 4166 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4172 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4174 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; (++__first), (++__result)) {
# 4175 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = __unary_op(*__first); }
# 4176 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 4177 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4198 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4199 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _BinaryOperation> _OutputIterator
# 4201 "/usr/include/c++/5/bits/stl_algo.h" 3
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4202 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _OutputIterator __result, _BinaryOperation
# 4203 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_op)
# 4204 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4211 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4213 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first1 != __last1; ((++__first1), (++__first2)), (++__result)) {
# 4214 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = __binary_op(*__first1, *__first2); }
# 4215 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 4216 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4231 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> void
# 4233 "/usr/include/c++/5/bits/stl_algo.h" 3
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4234 "/usr/include/c++/5/bits/stl_algo.h" 3
__old_value, const _Tp &__new_value)
# 4235 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4243 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4245 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 4246 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((*__first) == __old_value) {
# 4247 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__first) = __new_value; } }
# 4248 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4263 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate, class _Tp> void
# 4265 "/usr/include/c++/5/bits/stl_algo.h" 3
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 4266 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred, const _Tp &__new_value)
# 4267 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4275 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4277 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 4278 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 4279 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__first) = __new_value; } }
# 4280 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4295 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Generator> void
# 4297 "/usr/include/c++/5/bits/stl_algo.h" 3
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator
# 4298 "/usr/include/c++/5/bits/stl_algo.h" 3
__gen)
# 4299 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4304 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4306 "/usr/include/c++/5/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 4307 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__first) = __gen(); }
# 4308 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4326 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator
# 4328 "/usr/include/c++/5/bits/stl_algo.h" 3
generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
# 4329 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4335 "/usr/include/c++/5/bits/stl_algo.h" 3
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) {
# 4337 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__first) = __gen(); }
# 4338 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first;
# 4339 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4362 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator
# 4364 "/usr/include/c++/5/bits/stl_algo.h" 3
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 4365 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 4366 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4373 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4375 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 4376 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result; }
# 4377 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result));
# 4381 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4402 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class
# 4403 "/usr/include/c++/5/bits/stl_algo.h" 3
_BinaryPredicate> inline _OutputIterator
# 4405 "/usr/include/c++/5/bits/stl_algo.h" 3
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 4406 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _BinaryPredicate
# 4407 "/usr/include/c++/5/bits/stl_algo.h" 3
__binary_pred)
# 4408 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4413 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4415 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 4416 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result; }
# 4417 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result));
# 4421 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4434 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void
# 4436 "/usr/include/c++/5/bits/stl_algo.h" 3
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 4437 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4441 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4443 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first != __last) {
# 4444 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
# 4445 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4447 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1));
# 4449 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i != __j) {
# 4450 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__i, __j); }
# 4451 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 4452 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4468 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _RandomNumberGenerator> void
# 4470 "/usr/include/c++/5/bits/stl_algo.h" 3
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &
# 4474 "/usr/include/c++/5/bits/stl_algo.h" 3
__rand)
# 4476 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4480 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4482 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 4483 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 4484 "/usr/include/c++/5/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
# 4485 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4486 "/usr/include/c++/5/bits/stl_algo.h" 3
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
# 4487 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__i != __j) {
# 4488 "/usr/include/c++/5/bits/stl_algo.h" 3
std::iter_swap(__i, __j); }
# 4489 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4490 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4508 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator
# 4510 "/usr/include/c++/5/bits/stl_algo.h" 3
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 4511 "/usr/include/c++/5/bits/stl_algo.h" 3
__pred)
# 4512 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4518 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4520 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__partition(__first, __last, __pred, std::__iterator_category(__first));
# 4522 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4541 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void
# 4543 "/usr/include/c++/5/bits/stl_algo.h" 3
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 4544 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 4545 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 4546 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4552 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4553 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4555 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter());
# 4557 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4578 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 4580 "/usr/include/c++/5/bits/stl_algo.h" 3
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 4581 "/usr/include/c++/5/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 4582 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare
# 4583 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 4584 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4591 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4592 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4594 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 4596 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4613 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void
# 4615 "/usr/include/c++/5/bits/stl_algo.h" 3
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator
# 4616 "/usr/include/c++/5/bits/stl_algo.h" 3
__last)
# 4617 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4623 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4624 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4626 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__first == __last) || (__nth == __last)) {
# 4627 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 4629 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter());
# 4632 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4651 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 4653 "/usr/include/c++/5/bits/stl_algo.h" 3
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator
# 4654 "/usr/include/c++/5/bits/stl_algo.h" 3
__last, _Compare __comp)
# 4655 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4662 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4663 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4665 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__first == __last) || (__nth == __last)) {
# 4666 "/usr/include/c++/5/bits/stl_algo.h" 3
return; }
# 4668 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 4671 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4687 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void
# 4689 "/usr/include/c++/5/bits/stl_algo.h" 3
sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 4690 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4696 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4698 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 4699 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4716 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 4718 "/usr/include/c++/5/bits/stl_algo.h" 3
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 4719 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 4720 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4727 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4729 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 4730 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4732 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4733 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 4735 "/usr/include/c++/5/bits/stl_algo.h" 3
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4736 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4737 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4738 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4739 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 4740 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4741 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1))
# 4742 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4743 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first2);
# 4744 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 4745 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 4747 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4748 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 4749 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 4750 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4751 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 4752 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4753 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4755 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4776 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4777 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator> inline _OutputIterator
# 4779 "/usr/include/c++/5/bits/stl_algo.h" 3
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4780 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4781 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 4782 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4793 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4794 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4796 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
# 4799 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4824 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4825 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> inline _OutputIterator
# 4827 "/usr/include/c++/5/bits/stl_algo.h" 3
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4828 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4829 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4830 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4841 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4842 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4844 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 4847 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4849 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 4851 "/usr/include/c++/5/bits/stl_algo.h" 3
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 4852 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 4853 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4855 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 4857 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 4859 "/usr/include/c++/5/bits/stl_algo.h" 3
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type> _TmpBuf;
# 4860 "/usr/include/c++/5/bits/stl_algo.h" 3
_TmpBuf __buf(__first, __last);
# 4862 "/usr/include/c++/5/bits/stl_algo.h" 3
if ((__buf.begin()) == 0) {
# 4863 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __last, __comp); } else {
# 4865 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __last, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }
# 4867 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4886 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void
# 4888 "/usr/include/c++/5/bits/stl_algo.h" 3
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 4889 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4895 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4897 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 4899 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4919 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void
# 4921 "/usr/include/c++/5/bits/stl_algo.h" 3
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 4922 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 4923 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4930 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 4932 "/usr/include/c++/5/bits/stl_algo.h" 3
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 4934 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4936 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4937 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class
# 4938 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _OutputIterator
# 4940 "/usr/include/c++/5/bits/stl_algo.h" 3
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4941 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4942 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4943 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4944 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 4945 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4946 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first1, __first2))
# 4947 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4948 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 4949 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 4950 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 4951 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1))
# 4952 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4953 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first2);
# 4954 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 4955 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 4957 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 4958 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 4959 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 4960 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 4961 "/usr/include/c++/5/bits/stl_algo.h" 3
} }
# 4962 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 4963 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4964 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4966 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 4986 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 4987 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator> inline _OutputIterator
# 4989 "/usr/include/c++/5/bits/stl_algo.h" 3
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4990 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4991 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 4992 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5006 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5007 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5009 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
# 5012 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5033 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5034 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> inline _OutputIterator
# 5036 "/usr/include/c++/5/bits/stl_algo.h" 3
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5037 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5038 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 5039 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5053 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5054 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5056 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5059 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5061 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5062 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class
# 5063 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _OutputIterator
# 5065 "/usr/include/c++/5/bits/stl_algo.h" 3
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5066 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5067 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 5068 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5069 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 5070 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first1, __first2)) {
# 5071 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1; } else {
# 5072 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1)) {
# 5073 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2; } else
# 5075 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5076 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 5077 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 5078 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 5079 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 5080 "/usr/include/c++/5/bits/stl_algo.h" 3
} } }
# 5081 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 5082 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5101 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5102 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator> inline _OutputIterator
# 5104 "/usr/include/c++/5/bits/stl_algo.h" 3
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5105 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5106 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 5107 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5119 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5120 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5122 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
# 5125 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5147 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5148 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> inline _OutputIterator
# 5150 "/usr/include/c++/5/bits/stl_algo.h" 3
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5151 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5152 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 5153 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5165 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5166 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5168 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5171 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5173 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5174 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class
# 5175 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _OutputIterator
# 5177 "/usr/include/c++/5/bits/stl_algo.h" 3
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5178 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5179 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 5180 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5181 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 5182 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first1, __first2))
# 5183 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5184 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 5185 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 5186 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 5187 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 5188 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1)) {
# 5189 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2; } else
# 5191 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5192 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 5193 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 5194 "/usr/include/c++/5/bits/stl_algo.h" 3
} } }
# 5195 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first1, __last1, __result);
# 5196 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5217 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5218 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator> inline _OutputIterator
# 5220 "/usr/include/c++/5/bits/stl_algo.h" 3
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5221 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5222 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 5223 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5235 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5236 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5238 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
# 5241 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5265 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5266 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> inline _OutputIterator
# 5268 "/usr/include/c++/5/bits/stl_algo.h" 3
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5269 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5270 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare __comp)
# 5271 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5283 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5284 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5286 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5289 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5291 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5292 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class
# 5293 "/usr/include/c++/5/bits/stl_algo.h" 3
_Compare> _OutputIterator
# 5295 "/usr/include/c++/5/bits/stl_algo.h" 3
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1
# 5296 "/usr/include/c++/5/bits/stl_algo.h" 3
__last1, _InputIterator2
# 5297 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2
# 5298 "/usr/include/c++/5/bits/stl_algo.h" 3
__last2, _OutputIterator
# 5299 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare
# 5300 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5301 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5302 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 5303 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first1, __first2))
# 5304 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5305 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first1);
# 5306 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 5307 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 5308 "/usr/include/c++/5/bits/stl_algo.h" 3
} else {
# 5309 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first2, __first1))
# 5310 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5311 "/usr/include/c++/5/bits/stl_algo.h" 3
(*__result) = (*__first2);
# 5312 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 5313 "/usr/include/c++/5/bits/stl_algo.h" 3
++__result;
# 5314 "/usr/include/c++/5/bits/stl_algo.h" 3
} else
# 5316 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5317 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first1;
# 5318 "/usr/include/c++/5/bits/stl_algo.h" 3
++__first2;
# 5319 "/usr/include/c++/5/bits/stl_algo.h" 3
} } }
# 5320 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 5322 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5341 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5342 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator> inline _OutputIterator
# 5344 "/usr/include/c++/5/bits/stl_algo.h" 3
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5345 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5346 "/usr/include/c++/5/bits/stl_algo.h" 3
__result)
# 5347 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5361 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5362 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5364 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
# 5367 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5389 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class
# 5390 "/usr/include/c++/5/bits/stl_algo.h" 3
_OutputIterator, class _Compare> inline _OutputIterator
# 5392 "/usr/include/c++/5/bits/stl_algo.h" 3
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 5393 "/usr/include/c++/5/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 5394 "/usr/include/c++/5/bits/stl_algo.h" 3
__result, _Compare
# 5395 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5396 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5410 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5411 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5413 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5416 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5418 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> _ForwardIterator
# 5421 "/usr/include/c++/5/bits/stl_algo.h" 3
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 5422 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5423 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5424 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) {
# 5425 "/usr/include/c++/5/bits/stl_algo.h" 3
return __first; }
# 5426 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __result = __first;
# 5427 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__first) != __last) {
# 5428 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__first, __result)) {
# 5429 "/usr/include/c++/5/bits/stl_algo.h" 3
__result = __first; } }
# 5430 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 5431 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5440 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator
# 5443 "/usr/include/c++/5/bits/stl_algo.h" 3
min_element(_ForwardIterator __first, _ForwardIterator __last)
# 5444 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5449 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5451 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 5453 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5464 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator
# 5467 "/usr/include/c++/5/bits/stl_algo.h" 3
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 5468 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5469 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5475 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5477 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5479 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5481 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> _ForwardIterator
# 5484 "/usr/include/c++/5/bits/stl_algo.h" 3
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 5485 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5486 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5487 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__first == __last) { return __first; }
# 5488 "/usr/include/c++/5/bits/stl_algo.h" 3
_ForwardIterator __result = __first;
# 5489 "/usr/include/c++/5/bits/stl_algo.h" 3
while ((++__first) != __last) {
# 5490 "/usr/include/c++/5/bits/stl_algo.h" 3
if (__comp(__result, __first)) {
# 5491 "/usr/include/c++/5/bits/stl_algo.h" 3
__result = __first; } }
# 5492 "/usr/include/c++/5/bits/stl_algo.h" 3
return __result;
# 5493 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5502 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator
# 5505 "/usr/include/c++/5/bits/stl_algo.h" 3
max_element(_ForwardIterator __first, _ForwardIterator __last)
# 5506 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5511 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5513 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
# 5515 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5526 "/usr/include/c++/5/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator
# 5529 "/usr/include/c++/5/bits/stl_algo.h" 3
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 5530 "/usr/include/c++/5/bits/stl_algo.h" 3
__comp)
# 5531 "/usr/include/c++/5/bits/stl_algo.h" 3
{
# 5537 "/usr/include/c++/5/bits/stl_algo.h" 3
;
# 5539 "/usr/include/c++/5/bits/stl_algo.h" 3
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
# 5541 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 5544 "/usr/include/c++/5/bits/stl_algo.h" 3
}
# 59 "/usr/local/cuda/include/cuda.h"

# 59 "/usr/local/cuda/include/cuda.h"
typedef uint32_t cuuint32_t;
# 60 "/usr/local/cuda/include/cuda.h"
typedef uint64_t cuuint64_t;
# 211 "/usr/local/cuda/include/cuda.h"
extern "C" {
# 221 "/usr/local/cuda/include/cuda.h"
typedef unsigned long long CUdeviceptr;
# 228 "/usr/local/cuda/include/cuda.h"
typedef int CUdevice;
# 229 "/usr/local/cuda/include/cuda.h"
typedef struct CUctx_st *CUcontext;
# 230 "/usr/local/cuda/include/cuda.h"
typedef struct CUmod_st *CUmodule;
# 231 "/usr/local/cuda/include/cuda.h"
typedef struct CUfunc_st *CUfunction;
# 232 "/usr/local/cuda/include/cuda.h"
typedef struct CUarray_st *CUarray;
# 233 "/usr/local/cuda/include/cuda.h"
typedef struct CUmipmappedArray_st *CUmipmappedArray;
# 234 "/usr/local/cuda/include/cuda.h"
typedef struct CUtexref_st *CUtexref;
# 235 "/usr/local/cuda/include/cuda.h"
typedef struct CUsurfref_st *CUsurfref;
# 236 "/usr/local/cuda/include/cuda.h"
typedef CUevent_st *CUevent;
# 237 "/usr/local/cuda/include/cuda.h"
typedef CUstream_st *CUstream;
# 238 "/usr/local/cuda/include/cuda.h"
typedef struct CUgraphicsResource_st *CUgraphicsResource;
# 239 "/usr/local/cuda/include/cuda.h"
typedef unsigned long long CUtexObject;
# 240 "/usr/local/cuda/include/cuda.h"
typedef unsigned long long CUsurfObject;
# 244 "/usr/local/cuda/include/cuda.h"
typedef
# 242 "/usr/local/cuda/include/cuda.h"
struct CUuuid_st {
# 243 "/usr/local/cuda/include/cuda.h"
char bytes[16];
# 244 "/usr/local/cuda/include/cuda.h"
} CUuuid;
# 259 "/usr/local/cuda/include/cuda.h"
typedef
# 257 "/usr/local/cuda/include/cuda.h"
struct CUipcEventHandle_st {
# 258 "/usr/local/cuda/include/cuda.h"
char reserved[64];
# 259 "/usr/local/cuda/include/cuda.h"
} CUipcEventHandle;
# 266 "/usr/local/cuda/include/cuda.h"
typedef
# 264 "/usr/local/cuda/include/cuda.h"
struct CUipcMemHandle_st {
# 265 "/usr/local/cuda/include/cuda.h"
char reserved[64];
# 266 "/usr/local/cuda/include/cuda.h"
} CUipcMemHandle;
# 273 "/usr/local/cuda/include/cuda.h"
typedef
# 271 "/usr/local/cuda/include/cuda.h"
enum CUipcMem_flags_enum {
# 272 "/usr/local/cuda/include/cuda.h"
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
# 273 "/usr/local/cuda/include/cuda.h"
} CUipcMem_flags;
# 284 "/usr/local/cuda/include/cuda.h"
typedef
# 280 "/usr/local/cuda/include/cuda.h"
enum CUmemAttach_flags_enum {
# 281 "/usr/local/cuda/include/cuda.h"
CU_MEM_ATTACH_GLOBAL = 1,
# 282 "/usr/local/cuda/include/cuda.h"
CU_MEM_ATTACH_HOST,
# 283 "/usr/local/cuda/include/cuda.h"
CU_MEM_ATTACH_SINGLE = 4
# 284 "/usr/local/cuda/include/cuda.h"
} CUmemAttach_flags;
# 301 "/usr/local/cuda/include/cuda.h"
typedef
# 289 "/usr/local/cuda/include/cuda.h"
enum CUctx_flags_enum {
# 290 "/usr/local/cuda/include/cuda.h"
CU_CTX_SCHED_AUTO,
# 291 "/usr/local/cuda/include/cuda.h"
CU_CTX_SCHED_SPIN,
# 292 "/usr/local/cuda/include/cuda.h"
CU_CTX_SCHED_YIELD,
# 293 "/usr/local/cuda/include/cuda.h"
CU_CTX_SCHED_BLOCKING_SYNC = 4,
# 294 "/usr/local/cuda/include/cuda.h"
CU_CTX_BLOCKING_SYNC = 4,
# 297 "/usr/local/cuda/include/cuda.h"
CU_CTX_SCHED_MASK = 7,
# 298 "/usr/local/cuda/include/cuda.h"
CU_CTX_MAP_HOST,
# 299 "/usr/local/cuda/include/cuda.h"
CU_CTX_LMEM_RESIZE_TO_MAX = 16,
# 300 "/usr/local/cuda/include/cuda.h"
CU_CTX_FLAGS_MASK = 31
# 301 "/usr/local/cuda/include/cuda.h"
} CUctx_flags;
# 309 "/usr/local/cuda/include/cuda.h"
typedef
# 306 "/usr/local/cuda/include/cuda.h"
enum CUstream_flags_enum {
# 307 "/usr/local/cuda/include/cuda.h"
CU_STREAM_DEFAULT,
# 308 "/usr/local/cuda/include/cuda.h"
CU_STREAM_NON_BLOCKING
# 309 "/usr/local/cuda/include/cuda.h"
} CUstream_flags;
# 339 "/usr/local/cuda/include/cuda.h"
typedef
# 334 "/usr/local/cuda/include/cuda.h"
enum CUevent_flags_enum {
# 335 "/usr/local/cuda/include/cuda.h"
CU_EVENT_DEFAULT,
# 336 "/usr/local/cuda/include/cuda.h"
CU_EVENT_BLOCKING_SYNC,
# 337 "/usr/local/cuda/include/cuda.h"
CU_EVENT_DISABLE_TIMING,
# 338 "/usr/local/cuda/include/cuda.h"
CU_EVENT_INTERPROCESS = 4
# 339 "/usr/local/cuda/include/cuda.h"
} CUevent_flags;
# 357 "/usr/local/cuda/include/cuda.h"
typedef
# 345 "/usr/local/cuda/include/cuda.h"
enum CUstreamWaitValue_flags_enum {
# 346 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WAIT_VALUE_GEQ,
# 348 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WAIT_VALUE_EQ,
# 349 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WAIT_VALUE_AND,
# 350 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WAIT_VALUE_FLUSH = 1073741824
# 357 "/usr/local/cuda/include/cuda.h"
} CUstreamWaitValue_flags;
# 370 "/usr/local/cuda/include/cuda.h"
typedef
# 362 "/usr/local/cuda/include/cuda.h"
enum CUstreamWriteValue_flags_enum {
# 363 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WRITE_VALUE_DEFAULT,
# 364 "/usr/local/cuda/include/cuda.h"
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER
# 370 "/usr/local/cuda/include/cuda.h"
} CUstreamWriteValue_flags;
# 380 "/usr/local/cuda/include/cuda.h"
typedef
# 375 "/usr/local/cuda/include/cuda.h"
enum CUstreamBatchMemOpType_enum {
# 376 "/usr/local/cuda/include/cuda.h"
CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,
# 377 "/usr/local/cuda/include/cuda.h"
CU_STREAM_MEM_OP_WRITE_VALUE_32,
# 378 "/usr/local/cuda/include/cuda.h"
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES
# 380 "/usr/local/cuda/include/cuda.h"
} CUstreamBatchMemOpType;
# 412 "/usr/local/cuda/include/cuda.h"
typedef
# 385 "/usr/local/cuda/include/cuda.h"
union CUstreamBatchMemOpParams_union {
# 386 "/usr/local/cuda/include/cuda.h"
CUstreamBatchMemOpType operation;
# 387 "/usr/local/cuda/include/cuda.h"
struct CUstreamMemOpWaitValueParams_st {
# 388 "/usr/local/cuda/include/cuda.h"
CUstreamBatchMemOpType operation;
# 389 "/usr/local/cuda/include/cuda.h"
CUdeviceptr address;
# 390 "/usr/local/cuda/include/cuda.h"
union {
# 391 "/usr/local/cuda/include/cuda.h"
cuuint32_t value;
# 392 "/usr/local/cuda/include/cuda.h"
cuuint64_t pad;
# 393 "/usr/local/cuda/include/cuda.h"
};
# 394 "/usr/local/cuda/include/cuda.h"
unsigned flags;
# 395 "/usr/local/cuda/include/cuda.h"
CUdeviceptr alias;
# 396 "/usr/local/cuda/include/cuda.h"
} waitValue;
# 397 "/usr/local/cuda/include/cuda.h"
struct CUstreamMemOpWriteValueParams_st {
# 398 "/usr/local/cuda/include/cuda.h"
CUstreamBatchMemOpType operation;
# 399 "/usr/local/cuda/include/cuda.h"
CUdeviceptr address;
# 400 "/usr/local/cuda/include/cuda.h"
union {
# 401 "/usr/local/cuda/include/cuda.h"
cuuint32_t value;
# 402 "/usr/local/cuda/include/cuda.h"
cuuint64_t pad;
# 403 "/usr/local/cuda/include/cuda.h"
};
# 404 "/usr/local/cuda/include/cuda.h"
unsigned flags;
# 405 "/usr/local/cuda/include/cuda.h"
CUdeviceptr alias;
# 406 "/usr/local/cuda/include/cuda.h"
} writeValue;
# 407 "/usr/local/cuda/include/cuda.h"
struct CUstreamMemOpFlushRemoteWritesParams_st {
# 408 "/usr/local/cuda/include/cuda.h"
CUstreamBatchMemOpType operation;
# 409 "/usr/local/cuda/include/cuda.h"
unsigned flags;
# 410 "/usr/local/cuda/include/cuda.h"
} flushRemoteWrites;
# 411 "/usr/local/cuda/include/cuda.h"
cuuint64_t pad[6];
# 412 "/usr/local/cuda/include/cuda.h"
} CUstreamBatchMemOpParams;
# 421 "/usr/local/cuda/include/cuda.h"
typedef
# 418 "/usr/local/cuda/include/cuda.h"
enum CUoccupancy_flags_enum {
# 419 "/usr/local/cuda/include/cuda.h"
CU_OCCUPANCY_DEFAULT,
# 420 "/usr/local/cuda/include/cuda.h"
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE
# 421 "/usr/local/cuda/include/cuda.h"
} CUoccupancy_flags;
# 435 "/usr/local/cuda/include/cuda.h"
typedef
# 426 "/usr/local/cuda/include/cuda.h"
enum CUarray_format_enum {
# 427 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT8 = 1,
# 428 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT16,
# 429 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT32,
# 430 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_SIGNED_INT8 = 8,
# 431 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_SIGNED_INT16,
# 432 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_SIGNED_INT32,
# 433 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_HALF = 16,
# 434 "/usr/local/cuda/include/cuda.h"
CU_AD_FORMAT_FLOAT = 32
# 435 "/usr/local/cuda/include/cuda.h"
} CUarray_format;
# 445 "/usr/local/cuda/include/cuda.h"
typedef
# 440 "/usr/local/cuda/include/cuda.h"
enum CUaddress_mode_enum {
# 441 "/usr/local/cuda/include/cuda.h"
CU_TR_ADDRESS_MODE_WRAP,
# 442 "/usr/local/cuda/include/cuda.h"
CU_TR_ADDRESS_MODE_CLAMP,
# 443 "/usr/local/cuda/include/cuda.h"
CU_TR_ADDRESS_MODE_MIRROR,
# 444 "/usr/local/cuda/include/cuda.h"
CU_TR_ADDRESS_MODE_BORDER
# 445 "/usr/local/cuda/include/cuda.h"
} CUaddress_mode;
# 453 "/usr/local/cuda/include/cuda.h"
typedef
# 450 "/usr/local/cuda/include/cuda.h"
enum CUfilter_mode_enum {
# 451 "/usr/local/cuda/include/cuda.h"
CU_TR_FILTER_MODE_POINT,
# 452 "/usr/local/cuda/include/cuda.h"
CU_TR_FILTER_MODE_LINEAR
# 453 "/usr/local/cuda/include/cuda.h"
} CUfilter_mode;
# 556 "/usr/local/cuda/include/cuda.h"
typedef
# 458 "/usr/local/cuda/include/cuda.h"
enum CUdevice_attribute_enum {
# 459 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
# 460 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X,
# 461 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y,
# 462 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z,
# 463 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X,
# 464 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y,
# 465 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z,
# 466 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK,
# 467 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
# 468 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY,
# 469 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_WARP_SIZE,
# 470 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_PITCH,
# 471 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK,
# 472 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
# 473 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CLOCK_RATE,
# 474 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT,
# 475 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP,
# 476 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,
# 477 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT,
# 478 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_INTEGRATED,
# 479 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY,
# 480 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE,
# 481 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH,
# 482 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH,
# 483 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT,
# 484 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH,
# 485 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT,
# 486 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH,
# 487 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH,
# 488 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT,
# 489 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS,
# 490 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
# 491 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT,
# 492 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES,
# 493 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT,
# 494 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS,
# 495 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_ECC_ENABLED,
# 496 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID,
# 497 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID,
# 498 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_TCC_DRIVER,
# 499 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE,
# 500 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH,
# 501 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE,
# 502 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR,
# 503 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT,
# 504 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING,
# 505 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH,
# 506 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS,
# 507 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER,
# 508 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH,
# 509 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT,
# 510 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE,
# 511 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE,
# 512 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE,
# 513 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID,
# 514 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT,
# 515 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH,
# 516 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH,
# 517 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS,
# 518 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH,
# 519 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH,
# 520 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT,
# 521 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH,
# 522 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT,
# 523 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH,
# 524 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH,
# 525 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS,
# 526 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH,
# 527 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT,
# 528 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS,
# 529 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH,
# 530 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH,
# 531 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS,
# 532 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH,
# 533 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH,
# 534 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT,
# 535 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH,
# 536 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH,
# 537 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT,
# 538 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR,
# 539 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR,
# 540 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH,
# 541 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED,
# 542 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED,
# 543 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED,
# 544 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR,
# 545 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR,
# 546 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY,
# 547 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD,
# 548 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID,
# 549 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED,
# 550 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO,
# 551 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS,
# 552 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS,
# 553 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED,
# 554 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM,
# 555 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX
# 556 "/usr/local/cuda/include/cuda.h"
} CUdevice_attribute;
# 572 "/usr/local/cuda/include/cuda.h"
typedef
# 561 "/usr/local/cuda/include/cuda.h"
struct CUdevprop_st {
# 562 "/usr/local/cuda/include/cuda.h"
int maxThreadsPerBlock;
# 563 "/usr/local/cuda/include/cuda.h"
int maxThreadsDim[3];
# 564 "/usr/local/cuda/include/cuda.h"
int maxGridSize[3];
# 565 "/usr/local/cuda/include/cuda.h"
int sharedMemPerBlock;
# 566 "/usr/local/cuda/include/cuda.h"
int totalConstantMemory;
# 567 "/usr/local/cuda/include/cuda.h"
int SIMDWidth;
# 568 "/usr/local/cuda/include/cuda.h"
int memPitch;
# 569 "/usr/local/cuda/include/cuda.h"
int regsPerBlock;
# 570 "/usr/local/cuda/include/cuda.h"
int clockRate;
# 571 "/usr/local/cuda/include/cuda.h"
int textureAlign;
# 572 "/usr/local/cuda/include/cuda.h"
} CUdevprop;
# 586 "/usr/local/cuda/include/cuda.h"
typedef
# 577 "/usr/local/cuda/include/cuda.h"
enum CUpointer_attribute_enum {
# 578 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_CONTEXT = 1,
# 579 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
# 580 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
# 581 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_HOST_POINTER,
# 582 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_P2P_TOKENS,
# 583 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
# 584 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_BUFFER_ID,
# 585 "/usr/local/cuda/include/cuda.h"
CU_POINTER_ATTRIBUTE_IS_MANAGED
# 586 "/usr/local/cuda/include/cuda.h"
} CUpointer_attribute;
# 647 "/usr/local/cuda/include/cuda.h"
typedef
# 591 "/usr/local/cuda/include/cuda.h"
enum CUfunction_attribute_enum {
# 597 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK,
# 604 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES,
# 610 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES,
# 615 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES,
# 620 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_NUM_REGS,
# 629 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION,
# 638 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION,
# 644 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA,
# 646 "/usr/local/cuda/include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX
# 647 "/usr/local/cuda/include/cuda.h"
} CUfunction_attribute;
# 657 "/usr/local/cuda/include/cuda.h"
typedef
# 652 "/usr/local/cuda/include/cuda.h"
enum CUfunc_cache_enum {
# 653 "/usr/local/cuda/include/cuda.h"
CU_FUNC_CACHE_PREFER_NONE,
# 654 "/usr/local/cuda/include/cuda.h"
CU_FUNC_CACHE_PREFER_SHARED,
# 655 "/usr/local/cuda/include/cuda.h"
CU_FUNC_CACHE_PREFER_L1,
# 656 "/usr/local/cuda/include/cuda.h"
CU_FUNC_CACHE_PREFER_EQUAL
# 657 "/usr/local/cuda/include/cuda.h"
} CUfunc_cache;
# 666 "/usr/local/cuda/include/cuda.h"
typedef
# 662 "/usr/local/cuda/include/cuda.h"
enum CUsharedconfig_enum {
# 663 "/usr/local/cuda/include/cuda.h"
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE,
# 664 "/usr/local/cuda/include/cuda.h"
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE,
# 665 "/usr/local/cuda/include/cuda.h"
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
# 666 "/usr/local/cuda/include/cuda.h"
} CUsharedconfig;
# 676 "/usr/local/cuda/include/cuda.h"
typedef
# 671 "/usr/local/cuda/include/cuda.h"
enum CUmemorytype_enum {
# 672 "/usr/local/cuda/include/cuda.h"
CU_MEMORYTYPE_HOST = 1,
# 673 "/usr/local/cuda/include/cuda.h"
CU_MEMORYTYPE_DEVICE,
# 674 "/usr/local/cuda/include/cuda.h"
CU_MEMORYTYPE_ARRAY,
# 675 "/usr/local/cuda/include/cuda.h"
CU_MEMORYTYPE_UNIFIED
# 676 "/usr/local/cuda/include/cuda.h"
} CUmemorytype;
# 685 "/usr/local/cuda/include/cuda.h"
typedef
# 681 "/usr/local/cuda/include/cuda.h"
enum CUcomputemode_enum {
# 682 "/usr/local/cuda/include/cuda.h"
CU_COMPUTEMODE_DEFAULT,
# 683 "/usr/local/cuda/include/cuda.h"
CU_COMPUTEMODE_PROHIBITED = 2,
# 684 "/usr/local/cuda/include/cuda.h"
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
# 685 "/usr/local/cuda/include/cuda.h"
} CUcomputemode;
# 697 "/usr/local/cuda/include/cuda.h"
typedef
# 690 "/usr/local/cuda/include/cuda.h"
enum CUmem_advise_enum {
# 691 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_SET_READ_MOSTLY = 1,
# 692 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_UNSET_READ_MOSTLY,
# 693 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_SET_PREFERRED_LOCATION,
# 694 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION,
# 695 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_SET_ACCESSED_BY,
# 696 "/usr/local/cuda/include/cuda.h"
CU_MEM_ADVISE_UNSET_ACCESSED_BY
# 697 "/usr/local/cuda/include/cuda.h"
} CUmem_advise;
# 704 "/usr/local/cuda/include/cuda.h"
typedef
# 699 "/usr/local/cuda/include/cuda.h"
enum CUmem_range_attribute_enum {
# 700 "/usr/local/cuda/include/cuda.h"
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,
# 701 "/usr/local/cuda/include/cuda.h"
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
# 702 "/usr/local/cuda/include/cuda.h"
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,
# 703 "/usr/local/cuda/include/cuda.h"
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION
# 704 "/usr/local/cuda/include/cuda.h"
} CUmem_range_attribute;
# 848 "/usr/local/cuda/include/cuda.h"
typedef
# 709 "/usr/local/cuda/include/cuda.h"
enum CUjit_option_enum {
# 716 "/usr/local/cuda/include/cuda.h"
CU_JIT_MAX_REGISTERS,
# 731 "/usr/local/cuda/include/cuda.h"
CU_JIT_THREADS_PER_BLOCK,
# 739 "/usr/local/cuda/include/cuda.h"
CU_JIT_WALL_TIME,
# 748 "/usr/local/cuda/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER,
# 757 "/usr/local/cuda/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 766 "/usr/local/cuda/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER,
# 775 "/usr/local/cuda/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
# 783 "/usr/local/cuda/include/cuda.h"
CU_JIT_OPTIMIZATION_LEVEL,
# 791 "/usr/local/cuda/include/cuda.h"
CU_JIT_TARGET_FROM_CUCONTEXT,
# 799 "/usr/local/cuda/include/cuda.h"
CU_JIT_TARGET,
# 808 "/usr/local/cuda/include/cuda.h"
CU_JIT_FALLBACK_STRATEGY,
# 816 "/usr/local/cuda/include/cuda.h"
CU_JIT_GENERATE_DEBUG_INFO,
# 823 "/usr/local/cuda/include/cuda.h"
CU_JIT_LOG_VERBOSE,
# 830 "/usr/local/cuda/include/cuda.h"
CU_JIT_GENERATE_LINE_INFO,
# 838 "/usr/local/cuda/include/cuda.h"
CU_JIT_CACHE_MODE,
# 843 "/usr/local/cuda/include/cuda.h"
CU_JIT_NEW_SM3X_OPT,
# 844 "/usr/local/cuda/include/cuda.h"
CU_JIT_FAST_COMPILE,
# 846 "/usr/local/cuda/include/cuda.h"
CU_JIT_NUM_OPTIONS
# 848 "/usr/local/cuda/include/cuda.h"
} CUjit_option;
# 871 "/usr/local/cuda/include/cuda.h"
typedef
# 853 "/usr/local/cuda/include/cuda.h"
enum CUjit_target_enum {
# 855 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_10 = 10,
# 856 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_11,
# 857 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_12,
# 858 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_13,
# 859 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_20 = 20,
# 860 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_21,
# 861 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_30 = 30,
# 862 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_32 = 32,
# 863 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_35 = 35,
# 864 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_37 = 37,
# 865 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_50 = 50,
# 866 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_52 = 52,
# 867 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_53,
# 868 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_60 = 60,
# 869 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_61,
# 870 "/usr/local/cuda/include/cuda.h"
CU_TARGET_COMPUTE_62
# 871 "/usr/local/cuda/include/cuda.h"
} CUjit_target;
# 882 "/usr/local/cuda/include/cuda.h"
typedef
# 876 "/usr/local/cuda/include/cuda.h"
enum CUjit_fallback_enum {
# 878 "/usr/local/cuda/include/cuda.h"
CU_PREFER_PTX,
# 880 "/usr/local/cuda/include/cuda.h"
CU_PREFER_BINARY
# 882 "/usr/local/cuda/include/cuda.h"
} CUjit_fallback;
# 892 "/usr/local/cuda/include/cuda.h"
typedef
# 887 "/usr/local/cuda/include/cuda.h"
enum CUjit_cacheMode_enum {
# 889 "/usr/local/cuda/include/cuda.h"
CU_JIT_CACHE_OPTION_NONE,
# 890 "/usr/local/cuda/include/cuda.h"
CU_JIT_CACHE_OPTION_CG,
# 891 "/usr/local/cuda/include/cuda.h"
CU_JIT_CACHE_OPTION_CA
# 892 "/usr/local/cuda/include/cuda.h"
} CUjit_cacheMode;
# 930 "/usr/local/cuda/include/cuda.h"
typedef
# 897 "/usr/local/cuda/include/cuda.h"
enum CUjitInputType_enum {
# 903 "/usr/local/cuda/include/cuda.h"
CU_JIT_INPUT_CUBIN,
# 909 "/usr/local/cuda/include/cuda.h"
CU_JIT_INPUT_PTX,
# 915 "/usr/local/cuda/include/cuda.h"
CU_JIT_INPUT_FATBINARY,
# 921 "/usr/local/cuda/include/cuda.h"
CU_JIT_INPUT_OBJECT,
# 927 "/usr/local/cuda/include/cuda.h"
CU_JIT_INPUT_LIBRARY,
# 929 "/usr/local/cuda/include/cuda.h"
CU_JIT_NUM_INPUT_TYPES
# 930 "/usr/local/cuda/include/cuda.h"
} CUjitInputType;
# 933 "/usr/local/cuda/include/cuda.h"
typedef struct CUlinkState_st *CUlinkState;
# 945 "/usr/local/cuda/include/cuda.h"
typedef
# 939 "/usr/local/cuda/include/cuda.h"
enum CUgraphicsRegisterFlags_enum {
# 940 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_NONE,
# 941 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY,
# 942 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD,
# 943 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4,
# 944 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
# 945 "/usr/local/cuda/include/cuda.h"
} CUgraphicsRegisterFlags;
# 954 "/usr/local/cuda/include/cuda.h"
typedef
# 950 "/usr/local/cuda/include/cuda.h"
enum CUgraphicsMapResourceFlags_enum {
# 951 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE,
# 952 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY,
# 953 "/usr/local/cuda/include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 954 "/usr/local/cuda/include/cuda.h"
} CUgraphicsMapResourceFlags;
# 966 "/usr/local/cuda/include/cuda.h"
typedef
# 959 "/usr/local/cuda/include/cuda.h"
enum CUarray_cubemap_face_enum {
# 960 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_X,
# 961 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_X,
# 962 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Y,
# 963 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Y,
# 964 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Z,
# 965 "/usr/local/cuda/include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Z
# 966 "/usr/local/cuda/include/cuda.h"
} CUarray_cubemap_face;
# 978 "/usr/local/cuda/include/cuda.h"
typedef
# 971 "/usr/local/cuda/include/cuda.h"
enum CUlimit_enum {
# 972 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_STACK_SIZE,
# 973 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_PRINTF_FIFO_SIZE,
# 974 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_MALLOC_HEAP_SIZE,
# 975 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH,
# 976 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT,
# 977 "/usr/local/cuda/include/cuda.h"
CU_LIMIT_MAX
# 978 "/usr/local/cuda/include/cuda.h"
} CUlimit;
# 988 "/usr/local/cuda/include/cuda.h"
typedef
# 983 "/usr/local/cuda/include/cuda.h"
enum CUresourcetype_enum {
# 984 "/usr/local/cuda/include/cuda.h"
CU_RESOURCE_TYPE_ARRAY,
# 985 "/usr/local/cuda/include/cuda.h"
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY,
# 986 "/usr/local/cuda/include/cuda.h"
CU_RESOURCE_TYPE_LINEAR,
# 987 "/usr/local/cuda/include/cuda.h"
CU_RESOURCE_TYPE_PITCH2D
# 988 "/usr/local/cuda/include/cuda.h"
} CUresourcetype;
# 1390 "/usr/local/cuda/include/cuda.h"
typedef
# 993 "/usr/local/cuda/include/cuda.h"
enum cudaError_enum {
# 999 "/usr/local/cuda/include/cuda.h"
CUDA_SUCCESS,
# 1005 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_VALUE,
# 1011 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_OUT_OF_MEMORY,
# 1017 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_INITIALIZED,
# 1022 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_DEINITIALIZED,
# 1029 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PROFILER_DISABLED,
# 1037 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PROFILER_NOT_INITIALIZED,
# 1044 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PROFILER_ALREADY_STARTED,
# 1051 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PROFILER_ALREADY_STOPPED,
# 1057 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NO_DEVICE = 100,
# 1063 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_DEVICE,
# 1070 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_IMAGE = 200,
# 1080 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT,
# 1089 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT,
# 1094 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_MAP_FAILED = 205,
# 1099 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_UNMAP_FAILED,
# 1105 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ARRAY_IS_MAPPED,
# 1110 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ALREADY_MAPPED,
# 1118 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NO_BINARY_FOR_GPU,
# 1123 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ALREADY_ACQUIRED,
# 1128 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_MAPPED,
# 1134 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_ARRAY,
# 1140 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_POINTER,
# 1146 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ECC_UNCORRECTABLE,
# 1152 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_UNSUPPORTED_LIMIT,
# 1159 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_IN_USE,
# 1165 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED,
# 1170 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_PTX,
# 1175 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT,
# 1181 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NVLINK_UNCORRECTABLE,
# 1186 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_SOURCE = 300,
# 1191 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_FILE_NOT_FOUND,
# 1196 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND,
# 1201 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED,
# 1206 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_OPERATING_SYSTEM,
# 1212 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_HANDLE = 400,
# 1218 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_FOUND = 500,
# 1226 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_READY = 600,
# 1235 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ILLEGAL_ADDRESS = 700,
# 1246 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES,
# 1257 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT,
# 1263 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING,
# 1270 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED,
# 1277 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED,
# 1283 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708,
# 1290 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_CONTEXT_IS_DESTROYED,
# 1298 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ASSERT,
# 1305 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_TOO_MANY_PEERS,
# 1311 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED,
# 1317 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED,
# 1326 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_HARDWARE_STACK_ERROR,
# 1334 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_ILLEGAL_INSTRUCTION,
# 1343 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_MISALIGNED_ADDRESS,
# 1354 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_ADDRESS_SPACE,
# 1362 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_INVALID_PC,
# 1372 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED,
# 1378 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_PERMITTED = 800,
# 1384 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_NOT_SUPPORTED,
# 1389 "/usr/local/cuda/include/cuda.h"
CUDA_ERROR_UNKNOWN = 999
# 1390 "/usr/local/cuda/include/cuda.h"
} CUresult;
# 1399 "/usr/local/cuda/include/cuda.h"
typedef
# 1395 "/usr/local/cuda/include/cuda.h"
enum CUdevice_P2PAttribute_enum {
# 1396 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1,
# 1397 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED,
# 1398 "/usr/local/cuda/include/cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED
# 1399 "/usr/local/cuda/include/cuda.h"
} CUdevice_P2PAttribute;
# 1413 "/usr/local/cuda/include/cuda.h"
typedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void * userData);
# 1421 "/usr/local/cuda/include/cuda.h"
typedef size_t (*CUoccupancyB2DSize)(int blockSize);
# 1497 "/usr/local/cuda/include/cuda.h"
typedef
# 1476 "/usr/local/cuda/include/cuda.h"
struct CUDA_MEMCPY2D_st {
# 1477 "/usr/local/cuda/include/cuda.h"
size_t srcXInBytes;
# 1478 "/usr/local/cuda/include/cuda.h"
size_t srcY;
# 1480 "/usr/local/cuda/include/cuda.h"
CUmemorytype srcMemoryType;
# 1481 "/usr/local/cuda/include/cuda.h"
const void *srcHost;
# 1482 "/usr/local/cuda/include/cuda.h"
CUdeviceptr srcDevice;
# 1483 "/usr/local/cuda/include/cuda.h"
CUarray srcArray;
# 1484 "/usr/local/cuda/include/cuda.h"
size_t srcPitch;
# 1486 "/usr/local/cuda/include/cuda.h"
size_t dstXInBytes;
# 1487 "/usr/local/cuda/include/cuda.h"
size_t dstY;
# 1489 "/usr/local/cuda/include/cuda.h"
CUmemorytype dstMemoryType;
# 1490 "/usr/local/cuda/include/cuda.h"
void *dstHost;
# 1491 "/usr/local/cuda/include/cuda.h"
CUdeviceptr dstDevice;
# 1492 "/usr/local/cuda/include/cuda.h"
CUarray dstArray;
# 1493 "/usr/local/cuda/include/cuda.h"
size_t dstPitch;
# 1495 "/usr/local/cuda/include/cuda.h"
size_t WidthInBytes;
# 1496 "/usr/local/cuda/include/cuda.h"
size_t Height;
# 1497 "/usr/local/cuda/include/cuda.h"
} CUDA_MEMCPY2D;
# 1530 "/usr/local/cuda/include/cuda.h"
typedef
# 1502 "/usr/local/cuda/include/cuda.h"
struct CUDA_MEMCPY3D_st {
# 1503 "/usr/local/cuda/include/cuda.h"
size_t srcXInBytes;
# 1504 "/usr/local/cuda/include/cuda.h"
size_t srcY;
# 1505 "/usr/local/cuda/include/cuda.h"
size_t srcZ;
# 1506 "/usr/local/cuda/include/cuda.h"
size_t srcLOD;
# 1507 "/usr/local/cuda/include/cuda.h"
CUmemorytype srcMemoryType;
# 1508 "/usr/local/cuda/include/cuda.h"
const void *srcHost;
# 1509 "/usr/local/cuda/include/cuda.h"
CUdeviceptr srcDevice;
# 1510 "/usr/local/cuda/include/cuda.h"
CUarray srcArray;
# 1511 "/usr/local/cuda/include/cuda.h"
void *reserved0;
# 1512 "/usr/local/cuda/include/cuda.h"
size_t srcPitch;
# 1513 "/usr/local/cuda/include/cuda.h"
size_t srcHeight;
# 1515 "/usr/local/cuda/include/cuda.h"
size_t dstXInBytes;
# 1516 "/usr/local/cuda/include/cuda.h"
size_t dstY;
# 1517 "/usr/local/cuda/include/cuda.h"
size_t dstZ;
# 1518 "/usr/local/cuda/include/cuda.h"
size_t dstLOD;
# 1519 "/usr/local/cuda/include/cuda.h"
CUmemorytype dstMemoryType;
# 1520 "/usr/local/cuda/include/cuda.h"
void *dstHost;
# 1521 "/usr/local/cuda/include/cuda.h"
CUdeviceptr dstDevice;
# 1522 "/usr/local/cuda/include/cuda.h"
CUarray dstArray;
# 1523 "/usr/local/cuda/include/cuda.h"
void *reserved1;
# 1524 "/usr/local/cuda/include/cuda.h"
size_t dstPitch;
# 1525 "/usr/local/cuda/include/cuda.h"
size_t dstHeight;
# 1527 "/usr/local/cuda/include/cuda.h"
size_t WidthInBytes;
# 1528 "/usr/local/cuda/include/cuda.h"
size_t Height;
# 1529 "/usr/local/cuda/include/cuda.h"
size_t Depth;
# 1530 "/usr/local/cuda/include/cuda.h"
} CUDA_MEMCPY3D;
# 1563 "/usr/local/cuda/include/cuda.h"
typedef
# 1535 "/usr/local/cuda/include/cuda.h"
struct CUDA_MEMCPY3D_PEER_st {
# 1536 "/usr/local/cuda/include/cuda.h"
size_t srcXInBytes;
# 1537 "/usr/local/cuda/include/cuda.h"
size_t srcY;
# 1538 "/usr/local/cuda/include/cuda.h"
size_t srcZ;
# 1539 "/usr/local/cuda/include/cuda.h"
size_t srcLOD;
# 1540 "/usr/local/cuda/include/cuda.h"
CUmemorytype srcMemoryType;
# 1541 "/usr/local/cuda/include/cuda.h"
const void *srcHost;
# 1542 "/usr/local/cuda/include/cuda.h"
CUdeviceptr srcDevice;
# 1543 "/usr/local/cuda/include/cuda.h"
CUarray srcArray;
# 1544 "/usr/local/cuda/include/cuda.h"
CUcontext srcContext;
# 1545 "/usr/local/cuda/include/cuda.h"
size_t srcPitch;
# 1546 "/usr/local/cuda/include/cuda.h"
size_t srcHeight;
# 1548 "/usr/local/cuda/include/cuda.h"
size_t dstXInBytes;
# 1549 "/usr/local/cuda/include/cuda.h"
size_t dstY;
# 1550 "/usr/local/cuda/include/cuda.h"
size_t dstZ;
# 1551 "/usr/local/cuda/include/cuda.h"
size_t dstLOD;
# 1552 "/usr/local/cuda/include/cuda.h"
CUmemorytype dstMemoryType;
# 1553 "/usr/local/cuda/include/cuda.h"
void *dstHost;
# 1554 "/usr/local/cuda/include/cuda.h"
CUdeviceptr dstDevice;
# 1555 "/usr/local/cuda/include/cuda.h"
CUarray dstArray;
# 1556 "/usr/local/cuda/include/cuda.h"
CUcontext dstContext;
# 1557 "/usr/local/cuda/include/cuda.h"
size_t dstPitch;
# 1558 "/usr/local/cuda/include/cuda.h"
size_t dstHeight;
# 1560 "/usr/local/cuda/include/cuda.h"
size_t WidthInBytes;
# 1561 "/usr/local/cuda/include/cuda.h"
size_t Height;
# 1562 "/usr/local/cuda/include/cuda.h"
size_t Depth;
# 1563 "/usr/local/cuda/include/cuda.h"
} CUDA_MEMCPY3D_PEER;
# 1575 "/usr/local/cuda/include/cuda.h"
typedef
# 1568 "/usr/local/cuda/include/cuda.h"
struct CUDA_ARRAY_DESCRIPTOR_st {
# 1570 "/usr/local/cuda/include/cuda.h"
size_t Width;
# 1571 "/usr/local/cuda/include/cuda.h"
size_t Height;
# 1573 "/usr/local/cuda/include/cuda.h"
CUarray_format Format;
# 1574 "/usr/local/cuda/include/cuda.h"
unsigned NumChannels;
# 1575 "/usr/local/cuda/include/cuda.h"
} CUDA_ARRAY_DESCRIPTOR;
# 1589 "/usr/local/cuda/include/cuda.h"
typedef
# 1580 "/usr/local/cuda/include/cuda.h"
struct CUDA_ARRAY3D_DESCRIPTOR_st {
# 1582 "/usr/local/cuda/include/cuda.h"
size_t Width;
# 1583 "/usr/local/cuda/include/cuda.h"
size_t Height;
# 1584 "/usr/local/cuda/include/cuda.h"
size_t Depth;
# 1586 "/usr/local/cuda/include/cuda.h"
CUarray_format Format;
# 1587 "/usr/local/cuda/include/cuda.h"
unsigned NumChannels;
# 1588 "/usr/local/cuda/include/cuda.h"
unsigned Flags;
# 1589 "/usr/local/cuda/include/cuda.h"
} CUDA_ARRAY3D_DESCRIPTOR;
# 1629 "/usr/local/cuda/include/cuda.h"
typedef
# 1598 "/usr/local/cuda/include/cuda.h"
struct CUDA_RESOURCE_DESC_st {
# 1600 "/usr/local/cuda/include/cuda.h"
CUresourcetype resType;
# 1602 "/usr/local/cuda/include/cuda.h"
union {
# 1603 "/usr/local/cuda/include/cuda.h"
struct {
# 1604 "/usr/local/cuda/include/cuda.h"
CUarray hArray;
# 1605 "/usr/local/cuda/include/cuda.h"
} array;
# 1606 "/usr/local/cuda/include/cuda.h"
struct {
# 1607 "/usr/local/cuda/include/cuda.h"
CUmipmappedArray hMipmappedArray;
# 1608 "/usr/local/cuda/include/cuda.h"
} mipmap;
# 1609 "/usr/local/cuda/include/cuda.h"
struct {
# 1610 "/usr/local/cuda/include/cuda.h"
CUdeviceptr devPtr;
# 1611 "/usr/local/cuda/include/cuda.h"
CUarray_format format;
# 1612 "/usr/local/cuda/include/cuda.h"
unsigned numChannels;
# 1613 "/usr/local/cuda/include/cuda.h"
size_t sizeInBytes;
# 1614 "/usr/local/cuda/include/cuda.h"
} linear;
# 1615 "/usr/local/cuda/include/cuda.h"
struct {
# 1616 "/usr/local/cuda/include/cuda.h"
CUdeviceptr devPtr;
# 1617 "/usr/local/cuda/include/cuda.h"
CUarray_format format;
# 1618 "/usr/local/cuda/include/cuda.h"
unsigned numChannels;
# 1619 "/usr/local/cuda/include/cuda.h"
size_t width;
# 1620 "/usr/local/cuda/include/cuda.h"
size_t height;
# 1621 "/usr/local/cuda/include/cuda.h"
size_t pitchInBytes;
# 1622 "/usr/local/cuda/include/cuda.h"
} pitch2D;
# 1623 "/usr/local/cuda/include/cuda.h"
struct {
# 1624 "/usr/local/cuda/include/cuda.h"
int reserved[32];
# 1625 "/usr/local/cuda/include/cuda.h"
} reserved;
# 1626 "/usr/local/cuda/include/cuda.h"
} res;
# 1628 "/usr/local/cuda/include/cuda.h"
unsigned flags;
# 1629 "/usr/local/cuda/include/cuda.h"
} CUDA_RESOURCE_DESC;
# 1645 "/usr/local/cuda/include/cuda.h"
typedef
# 1634 "/usr/local/cuda/include/cuda.h"
struct CUDA_TEXTURE_DESC_st {
# 1635 "/usr/local/cuda/include/cuda.h"
CUaddress_mode addressMode[3];
# 1636 "/usr/local/cuda/include/cuda.h"
CUfilter_mode filterMode;
# 1637 "/usr/local/cuda/include/cuda.h"
unsigned flags;
# 1638 "/usr/local/cuda/include/cuda.h"
unsigned maxAnisotropy;
# 1639 "/usr/local/cuda/include/cuda.h"
CUfilter_mode mipmapFilterMode;
# 1640 "/usr/local/cuda/include/cuda.h"
float mipmapLevelBias;
# 1641 "/usr/local/cuda/include/cuda.h"
float minMipmapLevelClamp;
# 1642 "/usr/local/cuda/include/cuda.h"
float maxMipmapLevelClamp;
# 1643 "/usr/local/cuda/include/cuda.h"
float borderColor[4];
# 1644 "/usr/local/cuda/include/cuda.h"
int reserved[12];
# 1645 "/usr/local/cuda/include/cuda.h"
} CUDA_TEXTURE_DESC;
# 1687 "/usr/local/cuda/include/cuda.h"
typedef
# 1650 "/usr/local/cuda/include/cuda.h"
enum CUresourceViewFormat_enum {
# 1652 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_NONE,
# 1653 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X8,
# 1654 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X8,
# 1655 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X8,
# 1656 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X8,
# 1657 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X8,
# 1658 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X8,
# 1659 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X16,
# 1660 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X16,
# 1661 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X16,
# 1662 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X16,
# 1663 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X16,
# 1664 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X16,
# 1665 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X32,
# 1666 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X32,
# 1667 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X32,
# 1668 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X32,
# 1669 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X32,
# 1670 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X32,
# 1671 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_1X16,
# 1672 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_2X16,
# 1673 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_4X16,
# 1674 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_1X32,
# 1675 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_2X32,
# 1676 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_4X32,
# 1677 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC1,
# 1678 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC2,
# 1679 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC3,
# 1680 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC4,
# 1681 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC4,
# 1682 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC5,
# 1683 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC5,
# 1684 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H,
# 1685 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC6H,
# 1686 "/usr/local/cuda/include/cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
# 1687 "/usr/local/cuda/include/cuda.h"
} CUresourceViewFormat;
# 1703 "/usr/local/cuda/include/cuda.h"
typedef
# 1692 "/usr/local/cuda/include/cuda.h"
struct CUDA_RESOURCE_VIEW_DESC_st {
# 1694 "/usr/local/cuda/include/cuda.h"
CUresourceViewFormat format;
# 1695 "/usr/local/cuda/include/cuda.h"
size_t width;
# 1696 "/usr/local/cuda/include/cuda.h"
size_t height;
# 1697 "/usr/local/cuda/include/cuda.h"
size_t depth;
# 1698 "/usr/local/cuda/include/cuda.h"
unsigned firstMipmapLevel;
# 1699 "/usr/local/cuda/include/cuda.h"
unsigned lastMipmapLevel;
# 1700 "/usr/local/cuda/include/cuda.h"
unsigned firstLayer;
# 1701 "/usr/local/cuda/include/cuda.h"
unsigned lastLayer;
# 1702 "/usr/local/cuda/include/cuda.h"
unsigned reserved[16];
# 1703 "/usr/local/cuda/include/cuda.h"
} CUDA_RESOURCE_VIEW_DESC;
# 1711 "/usr/local/cuda/include/cuda.h"
typedef
# 1708 "/usr/local/cuda/include/cuda.h"
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
# 1709 "/usr/local/cuda/include/cuda.h"
unsigned long long p2pToken;
# 1710 "/usr/local/cuda/include/cuda.h"
unsigned vaSpaceToken;
# 1711 "/usr/local/cuda/include/cuda.h"
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
# 1858 "/usr/local/cuda/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char ** pStr);
# 1877 "/usr/local/cuda/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char ** pStr);
# 1909 "/usr/local/cuda/include/cuda.h"
CUresult cuInit(unsigned Flags);
# 1939 "/usr/local/cuda/include/cuda.h"
CUresult cuDriverGetVersion(int * driverVersion);
# 1979 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGet(CUdevice * device, int ordinal);
# 2004 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetCount(int * count);
# 2032 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetName(char * name, int len, CUdevice dev);
# 2059 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceTotalMem_v2(size_t * bytes, CUdevice dev);
# 2254 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetAttribute(int * pi, CUdevice_attribute attrib, CUdevice dev);
# 2331 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetProperties(CUdevprop * prop, CUdevice dev);
# 2364 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceComputeCapability(int * major, int * minor, CUdevice dev);
# 2432 "/usr/local/cuda/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext * pctx, CUdevice dev);
# 2466 "/usr/local/cuda/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease(CUdevice dev);
# 2529 "/usr/local/cuda/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned flags);
# 2553 "/usr/local/cuda/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned * flags, int * active);
# 2591 "/usr/local/cuda/include/cuda.h"
CUresult cuDevicePrimaryCtxReset(CUdevice dev);
# 2697 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext * pctx, unsigned flags, CUdevice dev);
# 2737 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx);
# 2773 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx);
# 2807 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext * pctx);
# 2833 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx);
# 2852 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext * pctx);
# 2882 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice * device);
# 2910 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetFlags(unsigned * flags);
# 2940 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxSynchronize();
# 3035 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, size_t value);
# 3074 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetLimit(size_t * pvalue, CUlimit limit);
# 3117 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache * pconfig);
# 3167 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config);
# 3209 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig * pConfig);
# 3261 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
# 3299 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned * version);
# 3338 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int * leastPriority, int * greatestPriority);
# 3393 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxAttach(CUcontext * pctx, unsigned flags);
# 3429 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxDetach(CUcontext ctx);
# 3483 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleLoad(CUmodule * module, const char * fname);
# 3519 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleLoadData(CUmodule * module, const void * image);
# 3561 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule * module, const void * image, unsigned numOptions, CUjit_option * options, void ** optionValues);
# 3602 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule * module, const void * fatCubin);
# 3627 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod);
# 3657 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction * hfunc, CUmodule hmod, const char * name);
# 3691 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr * dptr, size_t * bytes, CUmodule hmod, const char * name);
# 3725 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleGetTexRef(CUtexref * pTexRef, CUmodule hmod, const char * name);
# 3756 "/usr/local/cuda/include/cuda.h"
CUresult cuModuleGetSurfRef(CUsurfref * pSurfRef, CUmodule hmod, const char * name);
# 3798 "/usr/local/cuda/include/cuda.h"
CUresult cuLinkCreate_v2(unsigned numOptions, CUjit_option * options, void ** optionValues, CUlinkState * stateOut);
# 3835 "/usr/local/cuda/include/cuda.h"
CUresult cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void * data, size_t size, const char * name, unsigned numOptions, CUjit_option * options, void ** optionValues);
# 3874 "/usr/local/cuda/include/cuda.h"
CUresult cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char * path, unsigned numOptions, CUjit_option * options, void ** optionValues);
# 3901 "/usr/local/cuda/include/cuda.h"
CUresult cuLinkComplete(CUlinkState state, void ** cubinOut, size_t * sizeOut);
# 3915 "/usr/local/cuda/include/cuda.h"
CUresult cuLinkDestroy(CUlinkState state);
# 3963 "/usr/local/cuda/include/cuda.h"
CUresult cuMemGetInfo_v2(size_t * free, size_t * total);
# 3996 "/usr/local/cuda/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr * dptr, size_t bytesize);
# 4057 "/usr/local/cuda/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr * dptr, size_t * pPitch, size_t WidthInBytes, size_t Height, unsigned ElementSizeBytes);
# 4086 "/usr/local/cuda/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr);
# 4119 "/usr/local/cuda/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr * pbase, size_t * psize, CUdeviceptr dptr);
# 4165 "/usr/local/cuda/include/cuda.h"
CUresult cuMemAllocHost_v2(void ** pp, size_t bytesize);
# 4195 "/usr/local/cuda/include/cuda.h"
CUresult cuMemFreeHost(void * p);
# 4277 "/usr/local/cuda/include/cuda.h"
CUresult cuMemHostAlloc(void ** pp, size_t bytesize, unsigned Flags);
# 4330 "/usr/local/cuda/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * pdptr, void * p, unsigned Flags);
# 4355 "/usr/local/cuda/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned * pFlags, void * p);
# 4465 "/usr/local/cuda/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr * dptr, size_t bytesize, unsigned flags);
# 4494 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice * dev, const char * pciBusId);
# 4522 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char * pciBusId, int len, CUdevice dev);
# 4564 "/usr/local/cuda/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle * pHandle, CUevent event);
# 4601 "/usr/local/cuda/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent * phEvent, CUipcEventHandle handle);
# 4638 "/usr/local/cuda/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle * pHandle, CUdeviceptr dptr);
# 4689 "/usr/local/cuda/include/cuda.h"
CUresult cuIpcOpenMemHandle(CUdeviceptr * pdptr, CUipcMemHandle handle, unsigned Flags);
# 4720 "/usr/local/cuda/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr);
# 4803 "/usr/local/cuda/include/cuda.h"
CUresult cuMemHostRegister_v2(void * p, size_t bytesize, unsigned Flags);
# 4827 "/usr/local/cuda/include/cuda.h"
CUresult cuMemHostUnregister(void * p);
# 4863 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
# 4892 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
# 4928 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount);
# 4961 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyDtoH_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount);
# 4994 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
# 5029 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
# 5066 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5101 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount);
# 5136 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyAtoH_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5175 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5336 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * pCopy);
# 5495 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * pCopy);
# 5663 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * pCopy);
# 5688 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * pCopy);
# 5728 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
# 5759 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
# 5798 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount, CUstream hStream);
# 5835 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5872 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5911 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount, CUstream hStream);
# 5950 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
# 6115 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * pCopy, CUstream hStream);
# 6287 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * pCopy, CUstream hStream);
# 6314 "/usr/local/cuda/include/cuda.h"
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * pCopy, CUstream hStream);
# 6350 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);
# 6384 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);
# 6418 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned ui, size_t N);
# 6457 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
# 6497 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
# 6537 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height);
# 6573 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
# 6609 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
# 6644 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned ui, size_t N, CUstream hStream);
# 6685 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
# 6727 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
# 6769 "/usr/local/cuda/include/cuda.h"
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height, CUstream hStream);
# 6872 "/usr/local/cuda/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray * pHandle, const CUDA_ARRAY_DESCRIPTOR * pAllocateArray);
# 6905 "/usr/local/cuda/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * pArrayDescriptor, CUarray hArray);
# 6936 "/usr/local/cuda/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray);
# 7116 "/usr/local/cuda/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pAllocateArray);
# 7152 "/usr/local/cuda/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * pArrayDescriptor, CUarray hArray);
# 7279 "/usr/local/cuda/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc, unsigned numMipmapLevels);
# 7305 "/usr/local/cuda/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray * pLevelArray, CUmipmappedArray hMipmappedArray, unsigned level);
# 7325 "/usr/local/cuda/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);
# 7571 "/usr/local/cuda/include/cuda.h"
CUresult cuPointerGetAttribute(void * data, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7640 "/usr/local/cuda/include/cuda.h"
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream);
# 7726 "/usr/local/cuda/include/cuda.h"
CUresult cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device);
# 7783 "/usr/local/cuda/include/cuda.h"
CUresult cuMemRangeGetAttribute(void * data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count);
# 7822 "/usr/local/cuda/include/cuda.h"
CUresult cuMemRangeGetAttributes(void ** data, size_t * dataSizes, CUmem_range_attribute * attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count);
# 7866 "/usr/local/cuda/include/cuda.h"
CUresult cuPointerSetAttribute(const void * value, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7908 "/usr/local/cuda/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned numAttributes, CUpointer_attribute * attributes, void ** data, CUdeviceptr ptr);
# 7956 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamCreate(CUstream * phStream, unsigned Flags);
# 8004 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream * phStream, unsigned flags, int priority);
# 8034 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamGetPriority(CUstream hStream, int * priority);
# 8061 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamGetFlags(CUstream hStream, unsigned * flags);
# 8102 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned Flags);
# 8173 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void * userData, unsigned flags);
# 8252 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned flags);
# 8283 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamQuery(CUstream hStream);
# 8310 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamSynchronize(CUstream hStream);
# 8339 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream);
# 8394 "/usr/local/cuda/include/cuda.h"
CUresult cuEventCreate(CUevent * phEvent, unsigned Flags);
# 8430 "/usr/local/cuda/include/cuda.h"
CUresult cuEventRecord(CUevent hEvent, CUstream hStream);
# 8464 "/usr/local/cuda/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent);
# 8498 "/usr/local/cuda/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent);
# 8527 "/usr/local/cuda/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent);
# 8571 "/usr/local/cuda/include/cuda.h"
CUresult cuEventElapsedTime(float * pMilliseconds, CUevent hStart, CUevent hEnd);
# 8606 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags);
# 8639 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags);
# 8671 "/usr/local/cuda/include/cuda.h"
CUresult cuStreamBatchMemOp(CUstream stream, unsigned count, CUstreamBatchMemOpParams * paramArray, unsigned flags);
# 8739 "/usr/local/cuda/include/cuda.h"
CUresult cuFuncGetAttribute(int * pi, CUfunction_attribute attrib, CUfunction hfunc);
# 8782 "/usr/local/cuda/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);
# 8834 "/usr/local/cuda/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
# 8948 "/usr/local/cuda/include/cuda.h"
CUresult cuLaunchKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams, void ** extra);
# 9009 "/usr/local/cuda/include/cuda.h"
CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);
# 9043 "/usr/local/cuda/include/cuda.h"
CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned bytes);
# 9075 "/usr/local/cuda/include/cuda.h"
CUresult cuParamSetSize(CUfunction hfunc, unsigned numbytes);
# 9108 "/usr/local/cuda/include/cuda.h"
CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned value);
# 9141 "/usr/local/cuda/include/cuda.h"
CUresult cuParamSetf(CUfunction hfunc, int offset, float value);
# 9176 "/usr/local/cuda/include/cuda.h"
CUresult cuParamSetv(CUfunction hfunc, int offset, void * ptr, unsigned numbytes);
# 9213 "/usr/local/cuda/include/cuda.h"
CUresult cuLaunch(CUfunction f);
# 9252 "/usr/local/cuda/include/cuda.h"
CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height);
# 9299 "/usr/local/cuda/include/cuda.h"
CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
# 9324 "/usr/local/cuda/include/cuda.h"
CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
# 9362 "/usr/local/cuda/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
# 9402 "/usr/local/cuda/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned flags);
# 9452 "/usr/local/cuda/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
# 9496 "/usr/local/cuda/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned flags);
# 9539 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned Flags);
# 9566 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned Flags);
# 9610 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetAddress_v2(size_t * ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
# 9662 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR * desc, CUdeviceptr dptr, size_t Pitch);
# 9691 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
# 9731 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
# 9764 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9797 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9823 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);
# 9851 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
# 9877 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned maxAniso);
# 9907 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float * pBorderColor);
# 9942 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned Flags);
# 9968 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetAddress_v2(CUdeviceptr * pdptr, CUtexref hTexRef);
# 9994 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetArray(CUarray * phArray, CUtexref hTexRef);
# 10019 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray * phMipmappedArray, CUtexref hTexRef);
# 10045 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetAddressMode(CUaddress_mode * pam, CUtexref hTexRef, int dim);
# 10069 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetFilterMode(CUfilter_mode * pfm, CUtexref hTexRef);
# 10095 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetFormat(CUarray_format * pFormat, int * pNumChannels, CUtexref hTexRef);
# 10119 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode * pfm, CUtexref hTexRef);
# 10143 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetMipmapLevelBias(float * pbias, CUtexref hTexRef);
# 10168 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetMipmapLevelClamp(float * pminMipmapLevelClamp, float * pmaxMipmapLevelClamp, CUtexref hTexRef);
# 10192 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetMaxAnisotropy(int * pmaxAniso, CUtexref hTexRef);
# 10219 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetBorderColor(float * pBorderColor, CUtexref hTexRef);
# 10242 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefGetFlags(unsigned * pFlags, CUtexref hTexRef);
# 10281 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefCreate(CUtexref * pTexRef);
# 10301 "/usr/local/cuda/include/cuda.h"
CUresult cuTexRefDestroy(CUtexref hTexRef);
# 10340 "/usr/local/cuda/include/cuda.h"
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned Flags);
# 10361 "/usr/local/cuda/include/cuda.h"
CUresult cuSurfRefGetArray(CUarray * phArray, CUsurfref hSurfRef);
# 10583 "/usr/local/cuda/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject * pTexObject, const CUDA_RESOURCE_DESC * pResDesc, const CUDA_TEXTURE_DESC * pTexDesc, const CUDA_RESOURCE_VIEW_DESC * pResViewDesc);
# 10601 "/usr/local/cuda/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject);
# 10620 "/usr/local/cuda/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUtexObject texObject);
# 10639 "/usr/local/cuda/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * pTexDesc, CUtexObject texObject);
# 10659 "/usr/local/cuda/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * pResViewDesc, CUtexObject texObject);
# 10700 "/usr/local/cuda/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject * pSurfObject, const CUDA_RESOURCE_DESC * pResDesc);
# 10718 "/usr/local/cuda/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject);
# 10737 "/usr/local/cuda/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUsurfObject surfObject);
# 10779 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int * canAccessPeer, CUdevice dev, CUdevice peerDev);
# 10816 "/usr/local/cuda/include/cuda.h"
CUresult cuDeviceGetP2PAttribute(int * value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice);
# 10865 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned Flags);
# 10890 "/usr/local/cuda/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext);
# 10934 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource);
# 10972 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray * pArray, CUgraphicsResource resource, unsigned arrayIndex, unsigned mipLevel);
# 11003 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * pMipmappedArray, CUgraphicsResource resource);
# 11039 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * pDevPtr, size_t * pSize, CUgraphicsResource resource);
# 11080 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned flags);
# 11119 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsMapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream);
# 11155 "/usr/local/cuda/include/cuda.h"
CUresult cuGraphicsUnmapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream);
# 11159 "/usr/local/cuda/include/cuda.h"
CUresult cuGetExportTable(const void ** ppExportTable, const CUuuid * pExportTableId);
# 11478 "/usr/local/cuda/include/cuda.h"
}
# 62 "/usr/local/cuda/include/cuComplex.h"
extern "C" {
# 67 "/usr/local/cuda/include/cuComplex.h"
typedef float2 cuFloatComplex;
# 69 "/usr/local/cuda/include/cuComplex.h"
static inline float cuCrealf(cuFloatComplex x)
# 70 "/usr/local/cuda/include/cuComplex.h"
{
# 71 "/usr/local/cuda/include/cuComplex.h"
return x.x;
# 72 "/usr/local/cuda/include/cuComplex.h"
}
# 74 "/usr/local/cuda/include/cuComplex.h"
static inline float cuCimagf(cuFloatComplex x)
# 75 "/usr/local/cuda/include/cuComplex.h"
{
# 76 "/usr/local/cuda/include/cuComplex.h"
return x.y;
# 77 "/usr/local/cuda/include/cuComplex.h"
}
# 79 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex make_cuFloatComplex(float
# 80 "/usr/local/cuda/include/cuComplex.h"
r, float i)
# 81 "/usr/local/cuda/include/cuComplex.h"
{
# 82 "/usr/local/cuda/include/cuComplex.h"
cuFloatComplex res;
# 83 "/usr/local/cuda/include/cuComplex.h"
(res.x) = r;
# 84 "/usr/local/cuda/include/cuComplex.h"
(res.y) = i;
# 85 "/usr/local/cuda/include/cuComplex.h"
return res;
# 86 "/usr/local/cuda/include/cuComplex.h"
}
# 88 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuConjf(cuFloatComplex x)
# 89 "/usr/local/cuda/include/cuComplex.h"
{
# 90 "/usr/local/cuda/include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x));
# 91 "/usr/local/cuda/include/cuComplex.h"
}
# 92 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuCaddf(cuFloatComplex x, cuFloatComplex
# 93 "/usr/local/cuda/include/cuComplex.h"
y)
# 94 "/usr/local/cuda/include/cuComplex.h"
{
# 95 "/usr/local/cuda/include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y));
# 97 "/usr/local/cuda/include/cuComplex.h"
}
# 99 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuCsubf(cuFloatComplex x, cuFloatComplex
# 100 "/usr/local/cuda/include/cuComplex.h"
y)
# 101 "/usr/local/cuda/include/cuComplex.h"
{
# 102 "/usr/local/cuda/include/cuComplex.h"
return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y));
# 104 "/usr/local/cuda/include/cuComplex.h"
}
# 111 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuCmulf(cuFloatComplex x, cuFloatComplex
# 112 "/usr/local/cuda/include/cuComplex.h"
y)
# 113 "/usr/local/cuda/include/cuComplex.h"
{
# 114 "/usr/local/cuda/include/cuComplex.h"
cuFloatComplex prod;
# 115 "/usr/local/cuda/include/cuComplex.h"
prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y)));
# 119 "/usr/local/cuda/include/cuComplex.h"
return prod;
# 120 "/usr/local/cuda/include/cuComplex.h"
}
# 127 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuCdivf(cuFloatComplex x, cuFloatComplex
# 128 "/usr/local/cuda/include/cuComplex.h"
y)
# 129 "/usr/local/cuda/include/cuComplex.h"
{
# 130 "/usr/local/cuda/include/cuComplex.h"
cuFloatComplex quot;
# 131 "/usr/local/cuda/include/cuComplex.h"
float s = fabsf(cuCrealf(y)) + fabsf(cuCimagf(y));
# 132 "/usr/local/cuda/include/cuComplex.h"
float oos = (1.0F) / s;
# 133 "/usr/local/cuda/include/cuComplex.h"
float ars = cuCrealf(x) * oos;
# 134 "/usr/local/cuda/include/cuComplex.h"
float ais = cuCimagf(x) * oos;
# 135 "/usr/local/cuda/include/cuComplex.h"
float brs = cuCrealf(y) * oos;
# 136 "/usr/local/cuda/include/cuComplex.h"
float bis = cuCimagf(y) * oos;
# 137 "/usr/local/cuda/include/cuComplex.h"
s = ((brs * brs) + (bis * bis));
# 138 "/usr/local/cuda/include/cuComplex.h"
oos = ((1.0F) / s);
# 139 "/usr/local/cuda/include/cuComplex.h"
quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
# 141 "/usr/local/cuda/include/cuComplex.h"
return quot;
# 142 "/usr/local/cuda/include/cuComplex.h"
}
# 152 "/usr/local/cuda/include/cuComplex.h"
static inline float cuCabsf(cuFloatComplex x)
# 153 "/usr/local/cuda/include/cuComplex.h"
{
# 154 "/usr/local/cuda/include/cuComplex.h"
float a = cuCrealf(x);
# 155 "/usr/local/cuda/include/cuComplex.h"
float b = cuCimagf(x);
# 156 "/usr/local/cuda/include/cuComplex.h"
float v, w, t;
# 157 "/usr/local/cuda/include/cuComplex.h"
a = fabsf(a);
# 158 "/usr/local/cuda/include/cuComplex.h"
b = fabsf(b);
# 159 "/usr/local/cuda/include/cuComplex.h"
if (a > b) {
# 160 "/usr/local/cuda/include/cuComplex.h"
v = a;
# 161 "/usr/local/cuda/include/cuComplex.h"
w = b;
# 162 "/usr/local/cuda/include/cuComplex.h"
} else {
# 163 "/usr/local/cuda/include/cuComplex.h"
v = b;
# 164 "/usr/local/cuda/include/cuComplex.h"
w = a;
# 165 "/usr/local/cuda/include/cuComplex.h"
}
# 166 "/usr/local/cuda/include/cuComplex.h"
t = (w / v);
# 167 "/usr/local/cuda/include/cuComplex.h"
t = ((1.0F) + (t * t));
# 168 "/usr/local/cuda/include/cuComplex.h"
t = (v * sqrtf(t));
# 169 "/usr/local/cuda/include/cuComplex.h"
if (((v == (0.0F)) || (v > (3.402823466e+38F))) || (w > (3.402823466e+38F))) {
# 170 "/usr/local/cuda/include/cuComplex.h"
t = (v + w);
# 171 "/usr/local/cuda/include/cuComplex.h"
}
# 172 "/usr/local/cuda/include/cuComplex.h"
return t;
# 173 "/usr/local/cuda/include/cuComplex.h"
}
# 176 "/usr/local/cuda/include/cuComplex.h"
typedef double2 cuDoubleComplex;
# 178 "/usr/local/cuda/include/cuComplex.h"
static inline double cuCreal(cuDoubleComplex x)
# 179 "/usr/local/cuda/include/cuComplex.h"
{
# 180 "/usr/local/cuda/include/cuComplex.h"
return x.x;
# 181 "/usr/local/cuda/include/cuComplex.h"
}
# 183 "/usr/local/cuda/include/cuComplex.h"
static inline double cuCimag(cuDoubleComplex x)
# 184 "/usr/local/cuda/include/cuComplex.h"
{
# 185 "/usr/local/cuda/include/cuComplex.h"
return x.y;
# 186 "/usr/local/cuda/include/cuComplex.h"
}
# 188 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex make_cuDoubleComplex(double
# 189 "/usr/local/cuda/include/cuComplex.h"
r, double i)
# 190 "/usr/local/cuda/include/cuComplex.h"
{
# 191 "/usr/local/cuda/include/cuComplex.h"
cuDoubleComplex res;
# 192 "/usr/local/cuda/include/cuComplex.h"
(res.x) = r;
# 193 "/usr/local/cuda/include/cuComplex.h"
(res.y) = i;
# 194 "/usr/local/cuda/include/cuComplex.h"
return res;
# 195 "/usr/local/cuda/include/cuComplex.h"
}
# 197 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuConj(cuDoubleComplex x)
# 198 "/usr/local/cuda/include/cuComplex.h"
{
# 199 "/usr/local/cuda/include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x), -cuCimag(x));
# 200 "/usr/local/cuda/include/cuComplex.h"
}
# 202 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuCadd(cuDoubleComplex x, cuDoubleComplex
# 203 "/usr/local/cuda/include/cuComplex.h"
y)
# 204 "/usr/local/cuda/include/cuComplex.h"
{
# 205 "/usr/local/cuda/include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y));
# 207 "/usr/local/cuda/include/cuComplex.h"
}
# 209 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuCsub(cuDoubleComplex x, cuDoubleComplex
# 210 "/usr/local/cuda/include/cuComplex.h"
y)
# 211 "/usr/local/cuda/include/cuComplex.h"
{
# 212 "/usr/local/cuda/include/cuComplex.h"
return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y));
# 214 "/usr/local/cuda/include/cuComplex.h"
}
# 221 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuCmul(cuDoubleComplex x, cuDoubleComplex
# 222 "/usr/local/cuda/include/cuComplex.h"
y)
# 223 "/usr/local/cuda/include/cuComplex.h"
{
# 224 "/usr/local/cuda/include/cuComplex.h"
cuDoubleComplex prod;
# 225 "/usr/local/cuda/include/cuComplex.h"
prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));
# 229 "/usr/local/cuda/include/cuComplex.h"
return prod;
# 230 "/usr/local/cuda/include/cuComplex.h"
}
# 237 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuCdiv(cuDoubleComplex x, cuDoubleComplex
# 238 "/usr/local/cuda/include/cuComplex.h"
y)
# 239 "/usr/local/cuda/include/cuComplex.h"
{
# 240 "/usr/local/cuda/include/cuComplex.h"
cuDoubleComplex quot;
# 241 "/usr/local/cuda/include/cuComplex.h"
double s = fabs(cuCreal(y)) + fabs(cuCimag(y));
# 242 "/usr/local/cuda/include/cuComplex.h"
double oos = (1.0) / s;
# 243 "/usr/local/cuda/include/cuComplex.h"
double ars = cuCreal(x) * oos;
# 244 "/usr/local/cuda/include/cuComplex.h"
double ais = cuCimag(x) * oos;
# 245 "/usr/local/cuda/include/cuComplex.h"
double brs = cuCreal(y) * oos;
# 246 "/usr/local/cuda/include/cuComplex.h"
double bis = cuCimag(y) * oos;
# 247 "/usr/local/cuda/include/cuComplex.h"
s = ((brs * brs) + (bis * bis));
# 248 "/usr/local/cuda/include/cuComplex.h"
oos = ((1.0) / s);
# 249 "/usr/local/cuda/include/cuComplex.h"
quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
# 251 "/usr/local/cuda/include/cuComplex.h"
return quot;
# 252 "/usr/local/cuda/include/cuComplex.h"
}
# 260 "/usr/local/cuda/include/cuComplex.h"
static inline double cuCabs(cuDoubleComplex x)
# 261 "/usr/local/cuda/include/cuComplex.h"
{
# 262 "/usr/local/cuda/include/cuComplex.h"
double a = cuCreal(x);
# 263 "/usr/local/cuda/include/cuComplex.h"
double b = cuCimag(x);
# 264 "/usr/local/cuda/include/cuComplex.h"
double v, w, t;
# 265 "/usr/local/cuda/include/cuComplex.h"
a = fabs(a);
# 266 "/usr/local/cuda/include/cuComplex.h"
b = fabs(b);
# 267 "/usr/local/cuda/include/cuComplex.h"
if (a > b) {
# 268 "/usr/local/cuda/include/cuComplex.h"
v = a;
# 269 "/usr/local/cuda/include/cuComplex.h"
w = b;
# 270 "/usr/local/cuda/include/cuComplex.h"
} else {
# 271 "/usr/local/cuda/include/cuComplex.h"
v = b;
# 272 "/usr/local/cuda/include/cuComplex.h"
w = a;
# 273 "/usr/local/cuda/include/cuComplex.h"
}
# 274 "/usr/local/cuda/include/cuComplex.h"
t = (w / v);
# 275 "/usr/local/cuda/include/cuComplex.h"
t = ((1.0) + (t * t));
# 276 "/usr/local/cuda/include/cuComplex.h"
t = (v * sqrt(t));
# 277 "/usr/local/cuda/include/cuComplex.h"
if (((v == (0.0)) || (v > (1.797693134862315708e+308))) || (w > (1.797693134862315708e+308)))
# 278 "/usr/local/cuda/include/cuComplex.h"
{
# 279 "/usr/local/cuda/include/cuComplex.h"
t = (v + w);
# 280 "/usr/local/cuda/include/cuComplex.h"
}
# 281 "/usr/local/cuda/include/cuComplex.h"
return t;
# 282 "/usr/local/cuda/include/cuComplex.h"
}
# 285 "/usr/local/cuda/include/cuComplex.h"
}
# 289 "/usr/local/cuda/include/cuComplex.h"
typedef cuFloatComplex cuComplex;
# 290 "/usr/local/cuda/include/cuComplex.h"
static inline cuComplex make_cuComplex(float x, float
# 291 "/usr/local/cuda/include/cuComplex.h"
y)
# 292 "/usr/local/cuda/include/cuComplex.h"
{
# 293 "/usr/local/cuda/include/cuComplex.h"
return make_cuFloatComplex(x, y);
# 294 "/usr/local/cuda/include/cuComplex.h"
}
# 297 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuComplexFloatToDouble(cuFloatComplex
# 298 "/usr/local/cuda/include/cuComplex.h"
c)
# 299 "/usr/local/cuda/include/cuComplex.h"
{
# 300 "/usr/local/cuda/include/cuComplex.h"
return make_cuDoubleComplex((double)cuCrealf(c), (double)cuCimagf(c));
# 301 "/usr/local/cuda/include/cuComplex.h"
}
# 303 "/usr/local/cuda/include/cuComplex.h"
static inline cuFloatComplex cuComplexDoubleToFloat(cuDoubleComplex
# 304 "/usr/local/cuda/include/cuComplex.h"
c)
# 305 "/usr/local/cuda/include/cuComplex.h"
{
# 306 "/usr/local/cuda/include/cuComplex.h"
return make_cuFloatComplex((float)cuCreal(c), (float)cuCimag(c));
# 307 "/usr/local/cuda/include/cuComplex.h"
}
# 310 "/usr/local/cuda/include/cuComplex.h"
static inline cuComplex cuCfmaf(cuComplex x, cuComplex y, cuComplex d)
# 311 "/usr/local/cuda/include/cuComplex.h"
{
# 312 "/usr/local/cuda/include/cuComplex.h"
float real_res;
# 313 "/usr/local/cuda/include/cuComplex.h"
float imag_res;
# 315 "/usr/local/cuda/include/cuComplex.h"
real_res = ((cuCrealf(x) * cuCrealf(y)) + cuCrealf(d));
# 316 "/usr/local/cuda/include/cuComplex.h"
imag_res = ((cuCrealf(x) * cuCimagf(y)) + cuCimagf(d));
# 318 "/usr/local/cuda/include/cuComplex.h"
real_res = ((-(cuCimagf(x) * cuCimagf(y))) + real_res);
# 319 "/usr/local/cuda/include/cuComplex.h"
imag_res = ((cuCimagf(x) * cuCrealf(y)) + imag_res);
# 321 "/usr/local/cuda/include/cuComplex.h"
return make_cuComplex(real_res, imag_res);
# 322 "/usr/local/cuda/include/cuComplex.h"
}
# 324 "/usr/local/cuda/include/cuComplex.h"
static inline cuDoubleComplex cuCfma(cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d)
# 325 "/usr/local/cuda/include/cuComplex.h"
{
# 326 "/usr/local/cuda/include/cuComplex.h"
double real_res;
# 327 "/usr/local/cuda/include/cuComplex.h"
double imag_res;
# 329 "/usr/local/cuda/include/cuComplex.h"
real_res = ((cuCreal(x) * cuCreal(y)) + cuCreal(d));
# 330 "/usr/local/cuda/include/cuComplex.h"
imag_res = ((cuCreal(x) * cuCimag(y)) + cuCimag(d));
# 332 "/usr/local/cuda/include/cuComplex.h"
real_res = ((-(cuCimag(x) * cuCimag(y))) + real_res);
# 333 "/usr/local/cuda/include/cuComplex.h"
imag_res = ((cuCimag(x) * cuCreal(y)) + imag_res);
# 335 "/usr/local/cuda/include/cuComplex.h"
return make_cuDoubleComplex(real_res, imag_res);
# 336 "/usr/local/cuda/include/cuComplex.h"
}
# 74 "/usr/local/cuda/include/cufft.h"
extern "C" {
# 97 "/usr/local/cuda/include/cufft.h"
typedef
# 78 "/usr/local/cuda/include/cufft.h"
enum cufftResult_t {
# 79 "/usr/local/cuda/include/cufft.h"
CUFFT_SUCCESS,
# 80 "/usr/local/cuda/include/cufft.h"
CUFFT_INVALID_PLAN,
# 81 "/usr/local/cuda/include/cufft.h"
CUFFT_ALLOC_FAILED,
# 82 "/usr/local/cuda/include/cufft.h"
CUFFT_INVALID_TYPE,
# 83 "/usr/local/cuda/include/cufft.h"
CUFFT_INVALID_VALUE,
# 84 "/usr/local/cuda/include/cufft.h"
CUFFT_INTERNAL_ERROR,
# 85 "/usr/local/cuda/include/cufft.h"
CUFFT_EXEC_FAILED,
# 86 "/usr/local/cuda/include/cufft.h"
CUFFT_SETUP_FAILED,
# 87 "/usr/local/cuda/include/cufft.h"
CUFFT_INVALID_SIZE,
# 88 "/usr/local/cuda/include/cufft.h"
CUFFT_UNALIGNED_DATA,
# 89 "/usr/local/cuda/include/cufft.h"
CUFFT_INCOMPLETE_PARAMETER_LIST,
# 90 "/usr/local/cuda/include/cufft.h"
CUFFT_INVALID_DEVICE,
# 91 "/usr/local/cuda/include/cufft.h"
CUFFT_PARSE_ERROR,
# 92 "/usr/local/cuda/include/cufft.h"
CUFFT_NO_WORKSPACE,
# 93 "/usr/local/cuda/include/cufft.h"
CUFFT_NOT_IMPLEMENTED,
# 94 "/usr/local/cuda/include/cufft.h"
CUFFT_LICENSE_ERROR,
# 95 "/usr/local/cuda/include/cufft.h"
CUFFT_NOT_SUPPORTED
# 97 "/usr/local/cuda/include/cufft.h"
} cufftResult;
# 107 "/usr/local/cuda/include/cufft.h"
typedef float cufftReal;
# 108 "/usr/local/cuda/include/cufft.h"
typedef double cufftDoubleReal;
# 113 "/usr/local/cuda/include/cufft.h"
typedef cuComplex cufftComplex;
# 114 "/usr/local/cuda/include/cufft.h"
typedef cuDoubleComplex cufftDoubleComplex;
# 128 "/usr/local/cuda/include/cufft.h"
typedef
# 121 "/usr/local/cuda/include/cufft.h"
enum cufftType_t {
# 122 "/usr/local/cuda/include/cufft.h"
CUFFT_R2C = 42,
# 123 "/usr/local/cuda/include/cufft.h"
CUFFT_C2R = 44,
# 124 "/usr/local/cuda/include/cufft.h"
CUFFT_C2C = 41,
# 125 "/usr/local/cuda/include/cufft.h"
CUFFT_D2Z = 106,
# 126 "/usr/local/cuda/include/cufft.h"
CUFFT_Z2D = 108,
# 127 "/usr/local/cuda/include/cufft.h"
CUFFT_Z2Z = 105
# 128 "/usr/local/cuda/include/cufft.h"
} cufftType;
# 133 "/usr/local/cuda/include/cufft.h"
typedef
# 131 "/usr/local/cuda/include/cufft.h"
enum cufftCompatibility_t {
# 132 "/usr/local/cuda/include/cufft.h"
CUFFT_COMPATIBILITY_FFTW_PADDING = 1
# 133 "/usr/local/cuda/include/cufft.h"
} cufftCompatibility;
# 143 "/usr/local/cuda/include/cufft.h"
typedef int cufftHandle;
# 146 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftPlan1d(cufftHandle * plan, int nx, cufftType type, int batch);
# 151 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftPlan2d(cufftHandle * plan, int nx, int ny, cufftType type);
# 155 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftPlan3d(cufftHandle * plan, int nx, int ny, int nz, cufftType type);
# 159 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftPlanMany(cufftHandle * plan, int rank, int * n, int * inembed, int istride, int idist, int * onembed, int ostride, int odist, cufftType type, int batch);
# 167 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftMakePlan1d(cufftHandle plan, int nx, cufftType type, int batch, size_t * workSize);
# 173 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftMakePlan2d(cufftHandle plan, int nx, int ny, cufftType type, size_t * workSize);
# 178 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftMakePlan3d(cufftHandle plan, int nx, int ny, int nz, cufftType type, size_t * workSize);
# 183 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftMakePlanMany(cufftHandle plan, int rank, int * n, int * inembed, int istride, int idist, int * onembed, int ostride, int odist, cufftType type, int batch, size_t * workSize);
# 192 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftMakePlanMany64(cufftHandle plan, int rank, long long * n, long long * inembed, long long istride, long long idist, long long * onembed, long long ostride, long long odist, cufftType type, long long batch, size_t * workSize);
# 204 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSizeMany64(cufftHandle plan, int rank, long long * n, long long * inembed, long long istride, long long idist, long long * onembed, long long ostride, long long odist, cufftType type, long long batch, size_t * workSize);
# 218 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftEstimate1d(int nx, cufftType type, int batch, size_t * workSize);
# 223 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftEstimate2d(int nx, int ny, cufftType type, size_t * workSize);
# 227 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftEstimate3d(int nx, int ny, int nz, cufftType type, size_t * workSize);
# 231 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftEstimateMany(int rank, int * n, int * inembed, int istride, int idist, int * onembed, int ostride, int odist, cufftType type, int batch, size_t * workSize);
# 239 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftCreate(cufftHandle * handle);
# 241 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSize1d(cufftHandle handle, int nx, cufftType type, int batch, size_t * workSize);
# 247 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSize2d(cufftHandle handle, int nx, int ny, cufftType type, size_t * workSize);
# 252 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSize3d(cufftHandle handle, int nx, int ny, int nz, cufftType type, size_t * workSize);
# 257 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSizeMany(cufftHandle handle, int rank, int * n, int * inembed, int istride, int idist, int * onembed, int ostride, int odist, cufftType type, int batch, size_t * workArea);
# 263 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetSize(cufftHandle handle, size_t * workSize);
# 265 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftSetWorkArea(cufftHandle plan, void * workArea);
# 267 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftSetAutoAllocation(cufftHandle plan, int autoAllocate);
# 269 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecC2C(cufftHandle plan, cufftComplex * idata, cufftComplex * odata, int direction);
# 274 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecR2C(cufftHandle plan, cufftReal * idata, cufftComplex * odata);
# 278 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecC2R(cufftHandle plan, cufftComplex * idata, cufftReal * odata);
# 282 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecZ2Z(cufftHandle plan, cufftDoubleComplex * idata, cufftDoubleComplex * odata, int direction);
# 287 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecD2Z(cufftHandle plan, cufftDoubleReal * idata, cufftDoubleComplex * odata);
# 291 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftExecZ2D(cufftHandle plan, cufftDoubleComplex * idata, cufftDoubleReal * odata);
# 297 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftSetStream(cufftHandle plan, cudaStream_t stream);
# 300 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftSetCompatibilityMode(cufftHandle plan, cufftCompatibility mode);
# 303 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftDestroy(cufftHandle plan);
# 305 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetVersion(int * version);
# 307 "/usr/local/cuda/include/cufft.h"
__attribute((visibility("default"))) cufftResult cufftGetProperty(libraryPropertyType type, int * value);
# 311 "/usr/local/cuda/include/cufft.h"
}
# 39 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
inline void _cuErrCheck(const cudaError_t err, const char *file, const int line)
# 40 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
{
# 41 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
if (err != (cudaSuccess))
# 42 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
{
# 43 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "\n");
# 44 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "CUDA ERROR in file=`%s`, line=%d\n", file, line);
# 45 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "CUDA ERROR %d: %s\n", err, cudaGetErrorString((cudaError_t)err));
# 46 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "\n");
# 47 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
cudaDeviceReset();
# 48 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
exit(1);
# 49 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 50 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 57 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
static const char *cufftGetErrorEnum(cufftResult error)
# 58 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
{
# 59 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
switch (error)
# 60 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
{
# 61 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_SUCCESS:
# 62 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_SUCCESS";
# 63 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INVALID_PLAN:
# 64 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INVALID_PLAN";
# 65 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_ALLOC_FAILED:
# 66 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_ALLOC_FAILED";
# 67 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INVALID_TYPE:
# 68 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INVALID_TYPE";
# 69 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INVALID_VALUE:
# 70 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INVALID_VALUE";
# 71 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INTERNAL_ERROR:
# 72 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INTERNAL_ERROR";
# 73 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_EXEC_FAILED:
# 74 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_EXEC_FAILED";
# 75 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_SETUP_FAILED:
# 76 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_SETUP_FAILED";
# 77 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INVALID_SIZE:
# 78 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INVALID_SIZE";
# 79 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_UNALIGNED_DATA:
# 80 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_UNALIGNED_DATA";
# 81 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INCOMPLETE_PARAMETER_LIST:
# 82 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INCOMPLETE_PARAMETER_LIST";
# 83 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_INVALID_DEVICE:
# 84 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_INVALID_DEVICE";
# 85 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_NO_WORKSPACE:
# 86 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_NO_WORKSPACE";
# 87 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_PARSE_ERROR:
# 88 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_PARSE_ERROR";
# 89 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_NOT_IMPLEMENTED:
# 90 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_NOT_IMPLEMENTED";
# 91 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
case CUFFT_LICENSE_ERROR:
# 92 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "CUFFT_LICENSE_ERROR";
# 93 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
default:
# 94 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
return "UNKNOWN ERROR!";
# 95 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 96 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 98 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
inline void _cufftErrChk(cufftResult err, const char *file, const int line)
# 99 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
{
# 100 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
if ((CUFFT_SUCCESS) != err) {
# 101 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "\n");
# 102 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "CUFFT ERROR in file=`%s`, line=%d\n", file, line);
# 103 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "CUFFT ERROR %d: %s\n", err, cufftGetErrorEnum((cufftResult)err));
# 104 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
fprintf(stderr, "\n");
# 105 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
cudaDeviceReset();
# 106 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
exit(1);
# 107 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 108 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/cuerror.cuh"
}
# 96 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
uint16_t nx, ny, nz;
# 99 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
inline void set_lattice_size(const uint16_t _nx, const uint16_t _ny, const uint16_t _nz)
# 100 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
{
# 101 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
nx = _nx;
# 102 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
ny = _ny;
# 103 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
nz = _nz;
# 104 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
}
# 106 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
inline void set_lattice()
# 107 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
{
# 108 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
set_lattice_size((uint16_t)64, (uint16_t)48, (uint16_t)32);
# 109 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
}
# 111 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
inline void get_lattice_size(uint16_t *_nx, uint16_t *_ny, uint16_t *_nz)
# 112 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
{
# 113 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
(*_nx) = nx;
# 114 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
(*_ny) = ny;
# 115 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
(*_nz) = nz;
# 116 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
}
# 119 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
static double d_charge[1];
# 120 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
static double d_lcutoff[1];
# 121 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
static double d_kkx[64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))];
# 122 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
static double d_kky[48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))];
# 123 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
static double d_kkz[32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))];
# 134 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
class Coulomb {
# 139 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
public: Coulomb(int devId = 0, int nthreads = 1024);
# 140 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
~Coulomb();
# 143 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void set_charge(const double charge);
# 146 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void get_density_enlarged(cuDoubleComplex * d_psi, double * h_result = 0, double * h_t = 0, const int _nthreads = -1);
# 147 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void get_vcoulomb_enlarged(cuDoubleComplex * h_result = 0, double * h_t = 0, int _nthreads = -1, unsigned kernel_type = 0);
# 149 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void get_vcoulomb_lessened(double * d_vcoulomb, double * h_result = 0, double * h_t = 0, const int _nthreads = -1);
# 152 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void save_info(const double sigma);
# 153 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void get_lattice(unsigned * nx, unsigned * ny, unsigned * nz, unsigned * cx, unsigned * cy, unsigned * cz, double * _lcutoff);
# 154 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
void get_lattice(unsigned * lattice, double * _lcutoff);
# 157 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cufftHandle plan_forward;
# 158 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cufftHandle plan_forward_cb;
# 159 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cufftHandle plan_inverse;
# 160 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cufftHandle plan_inverse_cb;
# 165 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
private: cuDoubleComplex *d_wrk_arr;
# 166 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cuDoubleComplex *d_density_k;
# 167 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
double *d_density;
# 169 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
int _devId;
# 170 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
cudaDeviceProp dev_prop;
# 171 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
dim3 gpu_threads;
# 172 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
dim3 gpu_blocks;
# 173 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
double lcutoff;
# 177 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.hpp"
};
# 15 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
__attribute__((unused)) static cufftDoubleComplex operator*(const cufftDoubleComplex &a, const cufftDoubleComplex &b) {int volatile ___ = 1;(void)a;(void)b;
# 17 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
::exit(___);}
# 19 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
__attribute__((unused)) static cufftDoubleComplex operator*(const double &a, const cufftDoubleComplex &b) {int volatile ___ = 1;(void)a;(void)b;
# 21 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
::exit(___);}
# 23 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
__attribute__((unused)) static cufftDoubleComplex &operator*=(cufftDoubleComplex &a, const cufftDoubleComplex &b) {int volatile ___ = 1;(void)a;(void)b;
# 25 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
::exit(___);}
# 27 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
__attribute__((unused)) static cufftDoubleComplex e_pow_I(double x) {int volatile ___ = 1;(void)x;
# 31 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/complex_operators.cuh"
::exit(___);}
# 40 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const unsigned nx, const unsigned ny, const unsigned nz, const unsigned
# 41 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
cx, const unsigned cy, const unsigned cz> static void
# 42 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub___kernel_enlarge_1Dindexing__(cuDoubleComplex *&array_in, double *&array_out) {exit(1);}
# 40 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const unsigned nx, const unsigned ny, const unsigned nz, const unsigned
# 41 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
cx, const unsigned cy, const unsigned cz> void
# 42 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__kernel_enlarge_1Dindexing__(cuDoubleComplex *array_in, double *array_out)
# 43 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub___kernel_enlarge_1Dindexing__<nx,ny,nz,cx,cy,cz>(array_in,array_out);
# 56 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 67 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const unsigned nx, const unsigned ny, const unsigned nz, const unsigned
# 68 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
cx, const unsigned cy, const unsigned cz> static void
# 69 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub___kernel_lessen_1Dindexing__(double *&array_in, double *&array_out) {exit(1);}
# 67 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const unsigned nx, const unsigned ny, const unsigned nz, const unsigned
# 68 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
cx, const unsigned cy, const unsigned cz> void
# 69 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__kernel_lessen_1Dindexing__(double *array_in, double *array_out)
# 70 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub___kernel_lessen_1Dindexing__<nx,ny,nz,cx,cy,cz>(array_in,array_out);
# 81 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 95 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__attribute__((unused)) inline cuDoubleComplex cmath_DZ_mul(double r, cuDoubleComplex z1)
# 96 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{int volatile ___ = 1;(void)r;(void)z1;
# 101 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
::exit(___);}
# 136 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 137 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff0(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 136 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 137 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff0(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 138 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff0<nx,ny,nz>(density_k,vcoulomb_k);
# 173 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 178 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 179 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff1(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 178 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 179 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff1(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 180 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff1<nx,ny,nz>(density_k,vcoulomb_k);
# 226 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 228 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 229 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff2(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 228 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 229 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff2(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 230 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff2<nx,ny,nz>(density_k,vcoulomb_k);
# 261 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 269 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 270 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst0(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 269 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 270 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff_cnst0(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 271 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst0<nx,ny,nz>(density_k,vcoulomb_k);
# 294 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 297 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 298 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst1(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 297 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 298 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff_cnst1(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 299 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst1<nx,ny,nz>(density_k,vcoulomb_k);
# 326 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 328 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 329 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst2(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 328 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 329 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff_cnst2(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 330 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst2<nx,ny,nz>(density_k,vcoulomb_k);
# 357 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 361 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> static void
# 362 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 361 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz> void
# 362 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 363 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff<nx,ny,nz>(density_k,vcoulomb_k);
# 397 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 402 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz, const int batch> static void
# 403 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
__wrapper__device_stub_kernel_coulomb_sph_cutoff3(cuDoubleComplex *&density_k, cuDoubleComplex *&vcoulomb_k) {exit(1);}
# 402 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
template< const int nx, const int ny, const int nz, const int batch> void
# 403 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
kernel_coulomb_sph_cutoff3(cuDoubleComplex *density_k, cuDoubleComplex *vcoulomb_k)
# 404 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
{__wrapper__device_stub_kernel_coulomb_sph_cutoff3<nx,ny,nz,batch>(density_k,vcoulomb_k);
# 437 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/kernels.cuh"
return;}
# 7 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
Coulomb::Coulomb(int devId, int nthreads) : _devId(devId)
# 9 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 11 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaSetDevice(_devId);
# 12 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaGetDeviceProperties(&(dev_prop), _devId);
# 13 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads(nthreads);
# 14 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks((int)ceilf(((float)((64 * 48) * 32)) / nthreads));
# 15 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(gpu_threads) = _threads;
# 16 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(gpu_blocks) = _blocks;
# 19 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(lcutoff) = (((double)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) / ((1.0) + sqrt((3.0))));
# 20 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemcpyToSymbol(d_lcutoff, &(lcutoff), sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 20);
# 23 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMalloc((void **)(&(d_density)), ((((size_t)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 23);
# 24 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMalloc((void **)(&(d_density_k)), ((((size_t)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) * sizeof(cuDoubleComplex)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 24);
# 27 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
size_t wrk_sizes[4] = {(0)};
# 28 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftCreate(&(plan_forward)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 28);
# 29 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetAutoAllocation(plan_forward, 0), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 29);
# 30 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftMakePlan3d(plan_forward, 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))), CUFFT_D2Z, &((wrk_sizes)[0])), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 30);
# 32 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftCreate(&(plan_forward_cb)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 32);
# 33 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetAutoAllocation(plan_forward_cb, 0), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 33);
# 34 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftMakePlan3d(plan_forward, 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))), CUFFT_D2Z, &((wrk_sizes)[1])), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 34);
# 36 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftCreate(&(plan_inverse)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 36);
# 37 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetAutoAllocation(plan_inverse, 0), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 37);
# 38 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftMakePlan3d(plan_inverse, 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))), CUFFT_Z2D, &((wrk_sizes)[2])), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 38);
# 40 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftCreate(&(plan_inverse_cb)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 40);
# 41 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetAutoAllocation(plan_inverse_cb, 0), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 41);
# 42 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftMakePlan3d(plan_inverse_cb, 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))), CUFFT_Z2D, &((wrk_sizes)[3])), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 42);
# 45 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMalloc((void **)(&(d_wrk_arr)), (size_t)(*std::max_element(wrk_sizes, &((wrk_sizes)[3])))), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 45);
# 46 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetWorkArea(plan_forward, d_wrk_arr), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 46);
# 47 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetWorkArea(plan_forward_cb, d_wrk_arr), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 47);
# 48 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetWorkArea(plan_inverse, d_wrk_arr), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 48);
# 49 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftSetWorkArea(plan_inverse_cb, d_wrk_arr), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 49);
# 52 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
double kkx[64 + 128];
# 53 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
double kky[48 + 144];
# 54 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
double kkz[32 + 160];
# 55 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
uint16_t i; int j;
# 56 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = (0); i <= (((64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) / 2) - 1); i++) { ((kkx)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))))) * ((double)i)); } j = (-i);
# 57 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = ((64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) / 2); i < (64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))); i++) { ((kkx)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))))) * ((double)j)); j++; }
# 58 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemcpyToSymbol(d_kkx, kkx, (64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) * sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 58);
# 60 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = (0); i <= (((48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))) / 2) - 1); i++) { ((kky)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))))) * ((double)i)); } j = (-i);
# 61 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = ((48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))) / 2); i < (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))); i++) { ((kky)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))))) * ((double)j)); j++; }
# 62 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemcpyToSymbol(d_kky, kky, (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)))) * sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 62);
# 64 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = (0); i <= (((32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))) / 2) - 1); i++) { ((kkz)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))))) * ((double)i)); } j = (-i);
# 65 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (i = ((32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))) / 2); i < (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))); i++) { ((kkz)[i]) = ((((2.0) * (3.141592653589793116)) / ((double)(32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))))) * ((double)j)); j++; }
# 66 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemcpyToSymbol(d_kkz, kkz, (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)))) * sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 66);
# 71 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Instance of class Coulomb.\n");
# 72 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Compiled for lattice:  %ux%ux%u\n", 64, 48, 32);
# 73 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Computational lattice: %ux%ux%u\n", 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))));
# 74 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Computational lattice: %ux%ux%u\n", 64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)), 48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))), 32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))));
# 75 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Cutoff length lc:      %.3lf\n", lcutoff);
# 77 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
for (unsigned ii = (0); ii < (4); ii++) {
# 78 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Plan %u: %lu\n", ii, (wrk_sizes)[ii]); }
# 80 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("Mem allocated:\n");
# 81 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("    density (real space)    %lu\tB\n", (((64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * sizeof(double));
# 82 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("    density (recip. space)  %lu\tB\n", (((64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * sizeof(cuDoubleComplex));
# 83 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("    total                   %lu\tB\n", ((((64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * (sizeof(cuDoubleComplex) + sizeof(double))) + (*std::max_element(wrk_sizes, &((wrk_sizes)[3]))));
# 86 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("\n");
# 87 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("threads: (%u,%u,%u)\n", (gpu_threads).x, (gpu_threads).y, (gpu_threads).z);
# 88 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("blocks:  (%u,%u,%u)\n", (gpu_blocks).x, (gpu_blocks).y, (gpu_blocks).z);
# 89 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("\n");
# 90 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
printf("\n");
# 92 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 94 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
Coulomb::~Coulomb()
# 95 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 96 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if ((d_density) != (__null)) { _cuErrCheck(cudaFree(d_density), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 96); }
# 97 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if ((d_density) != (__null)) { _cuErrCheck(cudaFree(d_density_k), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 97); }
# 98 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if ((d_density) != (__null)) { _cuErrCheck(cudaFree(d_wrk_arr), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 98); }
# 102 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cufftDestroy(plan_forward);
# 103 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cufftDestroy(plan_forward_cb);
# 104 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cufftDestroy(plan_inverse);
# 105 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cufftDestroy(plan_inverse_cb);
# 106 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 108 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::set_charge(const double charge)
# 109 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 110 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemcpyToSymbol(d_charge, &charge, sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 110);
# 111 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 114 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::get_density_enlarged(cuDoubleComplex *d_psi, double *h_result, double *h_t, const int _nthreads)
# 115 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 116 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads(_nthreads);
# 117 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks((int)ceilf(((((float)64) * (48)) * (32)) / _nthreads));
# 118 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (_nthreads < 32) { _threads = (gpu_threads); _blocks = (gpu_blocks); }
# 120 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
float rep;
# 121 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEvent_t rep_start, rep_end; cudaEventCreate(&rep_start); cudaEventCreate(&rep_end); ;
# 122 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); ;
# 125 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaMemset((void *)(d_density), 0, ((((size_t)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * sizeof(double)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 125);
# 128 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks, _threads)) ? (void)0 : (__kernel_enlarge_1Dindexing__< 64U, 48U, 32U, 64U, 72U, 80U> )(d_psi, d_density);
# 129 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaGetLastError(), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 129);
# 130 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); cudaEventRecord(rep_end); cudaEventSynchronize(rep_end); cudaEventElapsedTime(&rep, rep_start, rep_end); ;
# 132 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_result) { _cuErrCheck(cudaMemcpy(h_result, d_density, ((((size_t)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (32 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))))) * sizeof(double), cudaMemcpyDeviceToHost), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 132); }
# 133 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_t) { (*h_t) = ((double)rep); }
# 134 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 137 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::get_vcoulomb_enlarged(cuDoubleComplex *h_result, double *h_t, int _nthreads, unsigned kernel_type)
# 138 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 139 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (_nthreads < 32) { _nthreads = 1024; }
# 142 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
float rep;
# 143 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEvent_t rep_start, rep_end; cudaEventCreate(&rep_start); cudaEventCreate(&rep_end); ;
# 144 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); ;
# 149 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftExecD2Z(plan_forward, (double *)(d_density), (cuDoubleComplex *)(d_density_k)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 149);
# 152 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
switch (kernel_type)
# 153 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 154 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 0:
# 155 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 156 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads0(_nthreads);
# 157 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks0((int)ceilf(((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / _nthreads));
# 158 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks0, _threads0)) ? (void)0 : (kernel_coulomb_sph_cutoff0< 192, 192, 192> )(d_density_k, d_density_k); break;
# 159 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 160 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 1:
# 161 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 162 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads1(_nthreads);
# 163 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks1((int)ceilf(((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / _nthreads));
# 164 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks1, _threads1)) ? (void)0 : (kernel_coulomb_sph_cutoff1< 192, 192, 192> )(d_density_k, d_density_k); break;
# 165 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 166 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 2:
# 167 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 168 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads2(_nthreads);
# 169 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks2((int)ceilf(((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / _nthreads));
# 170 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks2, _threads2)) ? (void)0 : (kernel_coulomb_sph_cutoff2< 192, 192, 192> )(d_density_k, d_density_k); break;
# 171 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 172 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 3:
# 173 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 174 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads3(_nthreads);
# 175 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks3((int)ceilf(((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / _nthreads));
# 176 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks3, _threads3)) ? (void)0 : (kernel_coulomb_sph_cutoff_cnst0< 192, 192, 192> )(d_density_k, d_density_k); break;
# 177 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 178 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 4:
# 179 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 180 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads3(_nthreads);
# 181 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks3((int)ceilf((((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / (2)) / _nthreads));
# 182 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks3, _threads3)) ? (void)0 : (kernel_coulomb_sph_cutoff_cnst1< 192, 192, 192> )(d_density_k, d_density_k); break;
# 183 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 184 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
case 5:
# 185 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 186 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads3(_nthreads);
# 187 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks3((int)ceilf((((((float)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) / (4)) / _nthreads));
# 188 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks3, _threads3)) ? (void)0 : (kernel_coulomb_sph_cutoff_cnst2< 192, 192, 192> )(d_density_k, d_density_k); break;
# 189 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 190 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 196 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cufftErrChk(cufftExecZ2D(plan_inverse, (cuDoubleComplex *)(d_density_k), (double *)(d_density)), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 196);
# 197 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); cudaEventRecord(rep_end); cudaEventSynchronize(rep_end); cudaEventElapsedTime(&rep, rep_start, rep_end); ;
# 199 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_result) { _cuErrCheck(cudaMemcpy(h_result, d_density_k, ((((size_t)(64 + (2 * ((((((97 * 64) / 112) + 32) - 1) / 32) * 32)))) * (48 + (2 * (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2))))) * (((32 / 2) + (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2))) + 1)) * sizeof(cuDoubleComplex), cudaMemcpyDeviceToHost), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 199); }
# 200 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_t) { (*h_t) = ((double)rep); }
# 201 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 204 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::get_vcoulomb_lessened(double *d_vcoulomb, double *h_result, double *h_t, const int _nthreads)
# 205 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 206 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _threads(_nthreads);
# 207 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
dim3 _blocks((int)ceilf(((((float)64) * (48)) * (32)) / _nthreads));
# 208 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (_nthreads < 32) { _threads = (gpu_threads); _blocks = (gpu_blocks); }
# 210 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
float rep;
# 211 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEvent_t rep_start, rep_end; cudaEventCreate(&rep_start); cudaEventCreate(&rep_end); ;
# 212 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); ;
# 214 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
(cudaConfigureCall(_blocks, _threads)) ? (void)0 : (__kernel_lessen_1Dindexing__< 64U, 48U, 32U, 64U, 72U, 80U> )(d_density, d_vcoulomb);
# 215 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
_cuErrCheck(cudaGetLastError(), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 215);
# 216 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
cudaEventRecord(rep_start); cudaEventSynchronize(rep_start); cudaEventRecord(rep_end); cudaEventSynchronize(rep_end); cudaEventElapsedTime(&rep, rep_start, rep_end); ;
# 218 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_result) { _cuErrCheck(cudaMemcpy(h_result, d_vcoulomb, ((((size_t)64) * (48)) * (32)) * sizeof(double), cudaMemcpyDeviceToHost), "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu", 218); }
# 219 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (h_t) { (*h_t) = ((double)rep); }
# 220 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 222 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::save_info(const double sigma)
# 223 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 225 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
FILE *file_info = fopen("coulomb.info", "w");
# 226 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "nx\t%u\n", 64);
# 227 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "ny\t%u\n", 48);
# 228 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "nz\t%u\n", 32);
# 229 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "cx\t%u\n", (((((97 * 64) / 112) + 32) - 1) / 32) * 32);
# 230 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "cy\t%u\n", ((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2));
# 231 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "cz\t%u\n", ((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2));
# 232 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fprintf(file_info, "aho\t%lf\n", sigma);
# 233 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
fclose(file_info);
# 234 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 236 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::get_lattice(unsigned *nx, unsigned *ny, unsigned *nz, unsigned *cx, unsigned *cy, unsigned *cz, double *_lcutoff)
# 237 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 238 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (nx) { (*nx) = (64); }
# 239 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (ny) { (*ny) = (48); }
# 240 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (nz) { (*nz) = (32); }
# 241 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (cx) { (*cx) = ((((((97 * 64) / 112) + 32) - 1) / 32) * 32); }
# 242 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (cy) { (*cy) = (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 48) / 2)); }
# 243 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (cz) { (*cz) = (((((((97 * 64) / 112) + 32) - 1) / 32) * 32) + ((64 - 32) / 2)); }
# 244 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
if (_lcutoff) { (*_lcutoff) = (lcutoff); }
# 245 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 247 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
void Coulomb::get_lattice(unsigned *lattice, double *_lcutoff)
# 248 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
{
# 249 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
this->get_lattice(lattice + 0, lattice + 1, lattice + 2, lattice + 3, lattice + 4, lattice + 5, _lcutoff);
# 250 "/home/konrad/Pulpit/CUDA/VC_spherical_cutoff/Coulomb/Coulomb.cu"
}
# 1 "Coulomb.cudafe1.stub.c"
# 1 "Coulomb.cudafe1.stub.c"
# 1 "./test_class_keep/Coulomb.cudafe1.stub.c" 1 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wcast-qual"

# 1 "/usr/local/cuda/include/crt/host_runtime.h" 1 3
# 74 "/usr/local/cuda/include/crt/host_runtime.h" 3

# 74 "/usr/local/cuda/include/crt/host_runtime.h" 3
template <typename T>
static inline T *__cudaAddressOf(T &val)
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}
# 121 "/usr/local/cuda/include/crt/host_runtime.h" 3
static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref __attribute__((unused)); __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {







  static const unsigned char __module_id_str[] __attribute__((section ("__nv_module_id"))) = "__NV_MODULE_ID";
# 152 "/usr/local/cuda/include/crt/host_runtime.h" 3
}

extern "C" {
extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern char __cudaInitModule(
        void **fatCubinHandle
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterSurface(
        void **fatCubinHandle,
  const struct surfaceReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int ext
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);





extern int atexit(void(*)(void)) throw();





}

static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

# 1 "/usr/local/cuda/include/common_functions.h" 1 3
# 249 "/usr/local/cuda/include/common_functions.h" 3
# 1 "/usr/local/cuda/include/math_functions.h" 1 3
# 10055 "/usr/local/cuda/include/math_functions.h" 3
# 1 "/usr/local/cuda/include/crt/func_macro.h" 1 3
# 10056 "/usr/local/cuda/include/math_functions.h" 2 3







inline double rsqrt(double a);

inline double rcbrt(double a);

inline double sinpi(double a);

inline double cospi(double a);

inline void sincospi(double a, double *sptr, double *cptr);

inline double erfinv(double a);

inline double erfcinv(double a);

inline double normcdfinv(double a);

inline double normcdf(double a);

inline double erfcx(double a);

inline float rsqrtf(float a);

inline float rcbrtf(float a);

inline float sinpif(float a);

inline float cospif(float a);

inline void sincospif(float a, float *sptr, float *cptr);

inline float erfinvf(float a);

inline float erfcinvf(float a);

inline float normcdfinvf(float a);

inline float normcdff(float a);

inline float erfcxf(float a);

inline int min(int a, int b);

inline unsigned int umin(unsigned int a, unsigned int b);

inline long long int llmin(long long int a, long long int b);

inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

inline int max(int a, int b);

inline unsigned int umax(unsigned int a, unsigned int b);

inline long long int llmax(long long int a, long long int b);

inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);
# 10327 "/usr/local/cuda/include/math_functions.h" 3
# 1 "/usr/local/cuda/include/math_functions.hpp" 1 3
# 1095 "/usr/local/cuda/include/math_functions.hpp" 3
# 1 "/usr/local/cuda/include/math_constants.h" 1 3
# 1096 "/usr/local/cuda/include/math_functions.hpp" 2 3
# 3420 "/usr/local/cuda/include/math_functions.hpp" 3
inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  }
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;



  if (__signbit(a))

  {
    t = -t;
  }
  return t;
}

inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  }
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  }
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

inline double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (fa == 1.0) {
      t = a * exp(1000.0);
    }
  } else if (fa >= 0.9375) {




    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {




    t = a * a - .87890625;
    p = .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q = t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {




    t = a * a - .5625;
    p = - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q = t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

inline double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);
    }
  }
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q = t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 = 2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a);
  if (x < 32.0) {
# 3738 "/usr/local/cuda/include/math_functions.hpp" 3
    t1 = x - 4.0;
    t2 = x + 4.0;
    t2 = t1 / t2;

    t1 = - 3.5602694826817400E-010;
    t1 = t1 * t2 - 9.7239122591447274E-009;
    t1 = t1 * t2 - 8.9350224851649119E-009;
    t1 = t1 * t2 + 1.0404430921625484E-007;
    t1 = t1 * t2 + 5.8806698585341259E-008;
    t1 = t1 * t2 - 8.2147414929116908E-007;
    t1 = t1 * t2 + 3.0956409853306241E-007;
    t1 = t1 * t2 + 5.7087871844325649E-006;
    t1 = t1 * t2 - 1.1231787437600085E-005;
    t1 = t1 * t2 - 2.4399558857200190E-005;
    t1 = t1 * t2 + 1.5062557169571788E-004;
    t1 = t1 * t2 - 1.9925637684786154E-004;
    t1 = t1 * t2 - 7.5777429182785833E-004;
    t1 = t1 * t2 + 5.0319698792599572E-003;
    t1 = t1 * t2 - 1.6197733895953217E-002;
    t1 = t1 * t2 + 3.7167515553018733E-002;
    t1 = t1 * t2 - 6.6330365827532434E-002;
    t1 = t1 * t2 + 9.3732834997115544E-002;
    t1 = t1 * t2 - 1.0103906603555676E-001;
    t1 = t1 * t2 + 6.8097054254735140E-002;
    t1 = t1 * t2 + 1.5379652102605428E-002;
    t1 = t1 * t2 - 1.3962111684056291E-001;
    t1 = t1 * t2 + 1.2329951186255526E+000;

    t2 = 2.0 * x + 1.0;
    t1 = t1 / t2;
  } else {

    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 = -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {

    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

inline float cospif(float a)
{
  return (float)cospi((double)a);
}

inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}
# 10328 "/usr/local/cuda/include/math_functions.h" 2 3



# 1 "/usr/local/cuda/include/math_functions_dbl_ptx3.h" 1 3
# 270 "/usr/local/cuda/include/math_functions_dbl_ptx3.h" 3
# 1 "/usr/local/cuda/include/math_functions_dbl_ptx3.hpp" 1 3
# 271 "/usr/local/cuda/include/math_functions_dbl_ptx3.h" 2 3
# 10332 "/usr/local/cuda/include/math_functions.h" 2 3
# 250 "/usr/local/cuda/include/common_functions.h" 2 3
# 247 "/usr/local/cuda/include/crt/host_runtime.h" 2 3







#pragma pack()
# 6 "./test_class_keep/Coulomb.cudafe1.stub.c" 2 3
# 1 "./test_class_keep/Coulomb.fatbin.c" 1 3
# 1 "/usr/local/cuda/include/fatBinaryCtl.h" 1 3
# 33 "/usr/local/cuda/include/fatBinaryCtl.h" 3
# 1 "/usr/local/cuda/include/fatbinary.h" 1 3
# 49 "/usr/local/cuda/include/fatbinary.h" 3
typedef struct fatBinaryHeader *computeFatBinaryFormat_t;
# 78 "/usr/local/cuda/include/fatbinary.h" 3
struct __attribute__((aligned(8))) fatBinaryHeader
{
  unsigned int magic;
  unsigned short version;
  unsigned short headerSize;
  unsigned long long int fatSize;
};


typedef enum {
  FATBIN_KIND_PTX = 0x0001,
  FATBIN_KIND_ELF = 0x0002,
  FATBIN_KIND_OLDCUBIN = 0x0004,
} fatBinaryCodeKind;
# 34 "/usr/local/cuda/include/fatBinaryCtl.h" 2 3


extern "C" {







typedef enum {
  FBCTL_ERROR_NONE = 0,
  FBCTL_ERROR_NULL,
  FBCTL_ERROR_UNRECOGNIZED,
  FBCTL_ERROR_NO_CANDIDATE,
  FBCTL_ERROR_COMPILE_FAILED,
  FBCTL_ERROR_INTERNAL
} fatBinaryCtlError_t;
extern char* fatBinaryCtl_Errmsg (fatBinaryCtlError_t e);

extern fatBinaryCtlError_t fatBinaryCtl_Create (void* *data);

extern void fatBinaryCtl_Delete (void* data);


extern fatBinaryCtlError_t fatBinaryCtl (void* data, int request, ...);
# 75 "/usr/local/cuda/include/fatBinaryCtl.h" 3
typedef enum {
  fatBinary_PreferBestCode,
  fatBinary_AvoidPTX,
  fatBinary_ForcePTX,
  fatBinary_JITIfNotMatch
} fatBinary_CompilationPolicy;





extern fatBinaryCtlError_t fatBinaryCtl_PickCandidate (void* data);







extern fatBinaryCtlError_t fatBinaryCtl_Compile (void* data,
                                                 void* *elf, size_t *esize);
# 104 "/usr/local/cuda/include/fatBinaryCtl.h" 3
typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;

} __fatBinC_Wrapper_t;
# 133 "/usr/local/cuda/include/fatBinaryCtl.h" 3
}
# 2 "./test_class_keep/Coulomb.fatbin.c" 2 3


asm(
".section .nv_fatbin, \"a\"\n"
".align 8\n"
"fatbinData:\n"
".quad 0x00100001ba55ed50,0x000000000000f108,0x0000004001010002,0x000000000000f0c8\n"
".quad 0x0000000000000000,0x0000003400010007,0x0000000000000000,0x0000000000000015\n"
".quad 0x0000000000000000,0x0000000000000000,0x33010102464c457f,0x0000000000000007\n"
".quad 0x0000005000be0002,0x0000000000000000,0x000000000000f020,0x000000000000e6a0\n"
".quad 0x0038004000340534,0x0001002600400003,0x7472747368732e00,0x747274732e006261\n"
".quad 0x746d79732e006261,0x746d79732e006261,0x78646e68735f6261,0x666e692e766e2e00\n"
".quad 0x2e747865742e006f,0x6e72656b31335a5f,0x6f6c756f635f6c65,0x635f6870735f626d\n"
".quad 0x6e635f66666f7475,0x3931694c49317473,0x45323931694c4532,0x764545323931694c\n"
".quad 0x656c62756f643750,0x766e2e005f315332,0x5a5f2e6f666e692e,0x6c656e72656b3133\n"
".quad 0x626d6f6c756f635f,0x7475635f6870735f,0x74736e635f66666f,0x45323931694c4931\n"
".quad 0x694c45323931694c,0x3750764545323931,0x5332656c62756f64,0x732e766e2e005f31\n"
".quad 0x5a5f2e6465726168,0x6c656e72656b3133,0x626d6f6c756f635f,0x7475635f6870735f\n"
".quad 0x74736e635f66666f,0x45323931694c4931,0x694c45323931694c,0x3750764545323931\n"
".quad 0x5332656c62756f64,0x632e766e2e005f31,0x32746e6174736e6f,0x72656b31335a5f2e\n"
".quad 0x6c756f635f6c656e,0x5f6870735f626d6f,0x635f66666f747563,0x31694c493174736e\n"
".quad 0x323931694c453239,0x4545323931694c45,0x6c62756f64375076,0x6e2e005f31533265\n"
".quad 0x6174736e6f632e76,0x31335a5f2e30746e,0x635f6c656e72656b,0x735f626d6f6c756f\n"
".quad 0x666f7475635f6870,0x493174736e635f66,0x694c45323931694c,0x3931694c45323931\n"
".quad 0x6f64375076454532,0x5f315332656c6275,0x5f2e747865742e00,0x656e72656b36325a\n"
".quad 0x6d6f6c756f635f6c,0x75635f6870735f62,0x694c493066666f74,0x3931694c45323931\n"
".quad 0x45323931694c4532,0x62756f6437507645,0x2e005f315332656c,0x2e6f666e692e766e\n"
".quad 0x6e72656b36325a5f,0x6f6c756f635f6c65,0x635f6870735f626d,0x4c493066666f7475\n"
".quad 0x31694c4532393169,0x323931694c453239,0x756f643750764545,0x005f315332656c62\n"
".quad 0x726168732e766e2e,0x6b36325a5f2e6465,0x6f635f6c656e7265,0x70735f626d6f6c75\n"
".quad 0x66666f7475635f68,0x45323931694c4930,0x694c45323931694c,0x3750764545323931\n"
".quad 0x5332656c62756f64,0x632e766e2e005f31,0x32746e6174736e6f,0x72656b36325a5f2e\n"
".quad 0x6c756f635f6c656e,0x5f6870735f626d6f,0x493066666f747563,0x694c45323931694c\n"
".quad 0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275,0x6e6f632e766e2e00\n"
".quad 0x5f2e30746e617473,0x656e72656b36325a,0x6d6f6c756f635f6c,0x75635f6870735f62\n"
".quad 0x694c493066666f74,0x3931694c45323931,0x45323931694c4532,0x62756f6437507645\n"
".quad 0x2e005f315332656c,0x325a5f2e74786574,0x656e72656b5f5f38,0x6e657373656c5f6c\n"
".quad 0x7865646e6944315f,0x6a4c495f5f676e69,0x4538346a4c453436,0x366a4c4532336a4c\n"
".quad 0x4c4532376a4c4534,0x645076454530386a,0x2e766e2e005f3053,0x325a5f2e6f666e69\n"
".quad 0x656e72656b5f5f38,0x6e657373656c5f6c,0x7865646e6944315f,0x6a4c495f5f676e69\n"
".quad 0x4538346a4c453436,0x366a4c4532336a4c,0x4c4532376a4c4534,0x645076454530386a\n"
".quad 0x2e766e2e005f3053,0x5f2e646572616873,0x72656b5f5f38325a,0x7373656c5f6c656e\n"
".quad 0x646e6944315f6e65,0x495f5f676e697865,0x346a4c4534366a4c,0x4c4532336a4c4538\n"
".quad 0x32376a4c4534366a,0x76454530386a4c45,0x6e2e005f30536450,0x6174736e6f632e76\n"
".quad 0x38325a5f2e32746e,0x6c656e72656b5f5f,0x5f6e657373656c5f,0x697865646e694431\n"
".quad 0x366a4c495f5f676e,0x4c4538346a4c4534,0x34366a4c4532336a,0x6a4c4532376a4c45\n"
".quad 0x5364507645453038,0x632e766e2e005f30,0x30746e6174736e6f,0x6b5f5f38325a5f2e\n"
".quad 0x656c5f6c656e7265,0x6944315f6e657373,0x5f676e697865646e,0x4c4534366a4c495f\n"
".quad 0x32336a4c4538346a,0x6a4c4534366a4c45,0x4530386a4c453237,0x005f305364507645\n"
".quad 0x5a5f2e747865742e,0x6c656e72656b3632,0x626d6f6c756f635f,0x7475635f6870735f\n"
".quad 0x31694c493266666f,0x323931694c453239,0x4545323931694c45,0x6c62756f64375076\n"
".quad 0x6e2e005f31533265,0x5f2e6f666e692e76,0x656e72656b36325a,0x6d6f6c756f635f6c\n"
".quad 0x75635f6870735f62,0x694c493266666f74,0x3931694c45323931,0x45323931694c4532\n"
".quad 0x62756f6437507645,0x2e005f315332656c,0x65726168732e766e,0x656b36325a5f2e64\n"
".quad 0x756f635f6c656e72,0x6870735f626d6f6c,0x3266666f7475635f,0x4c45323931694c49\n"
".quad 0x31694c4532393169,0x6437507645453239,0x315332656c62756f,0x6f632e766e2e005f\n"
".quad 0x2e32746e6174736e,0x6e72656b36325a5f,0x6f6c756f635f6c65,0x635f6870735f626d\n"
".quad 0x4c493266666f7475,0x31694c4532393169,0x323931694c453239,0x756f643750764545\n"
".quad 0x005f315332656c62,0x736e6f632e766e2e,0x5a5f2e30746e6174,0x6c656e72656b3632\n"
".quad 0x626d6f6c756f635f,0x7475635f6870735f,0x31694c493266666f,0x323931694c453239\n"
".quad 0x4545323931694c45,0x6c62756f64375076,0x742e005f31533265,0x31335a5f2e747865\n"
".quad 0x635f6c656e72656b,0x735f626d6f6c756f,0x666f7475635f6870,0x493074736e635f66\n"
".quad 0x694c45323931694c,0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275\n"
".quad 0x666e692e766e2e00,0x656b31335a5f2e6f,0x756f635f6c656e72,0x6870735f626d6f6c\n"
".quad 0x5f66666f7475635f,0x694c493074736e63,0x3931694c45323931,0x45323931694c4532\n"
".quad 0x62756f6437507645,0x2e005f315332656c,0x65726168732e766e,0x656b31335a5f2e64\n"
".quad 0x756f635f6c656e72,0x6870735f626d6f6c,0x5f66666f7475635f,0x694c493074736e63\n"
".quad 0x3931694c45323931,0x45323931694c4532,0x62756f6437507645,0x2e005f315332656c\n"
".quad 0x74736e6f632e766e,0x335a5f2e32746e61,0x5f6c656e72656b31,0x5f626d6f6c756f63\n"
".quad 0x6f7475635f687073,0x3074736e635f6666,0x4c45323931694c49,0x31694c4532393169\n"
".quad 0x6437507645453239,0x315332656c62756f,0x6f632e766e2e005f,0x2e30746e6174736e\n"
".quad 0x6e72656b31335a5f,0x6f6c756f635f6c65,0x635f6870735f626d,0x6e635f66666f7475\n"
".quad 0x3931694c49307473,0x45323931694c4532,0x764545323931694c,0x656c62756f643750\n"
".quad 0x65742e005f315332,0x5f39325a5f2e7478,0x5f6c656e72656b5f,0x5f656772616c6e65\n"
".quad 0x697865646e694431,0x366a4c495f5f676e,0x4c4538346a4c4534,0x34366a4c4532336a\n"
".quad 0x6a4c4532376a4c45,0x6437507645453038,0x645032656c62756f,0x666e692e766e2e00\n"
".quad 0x5f5f39325a5f2e6f,0x655f6c656e72656b,0x315f656772616c6e,0x6e697865646e6944\n"
".quad 0x34366a4c495f5f67,0x6a4c4538346a4c45,0x4534366a4c453233,0x386a4c4532376a4c\n"
".quad 0x6f64375076454530,0x00645032656c6275,0x726168732e766e2e,0x5f39325a5f2e6465\n"
".quad 0x5f6c656e72656b5f,0x5f656772616c6e65,0x697865646e694431,0x366a4c495f5f676e\n"
".quad 0x4c4538346a4c4534,0x34366a4c4532336a,0x6a4c4532376a4c45,0x6437507645453038\n"
".quad 0x645032656c62756f,0x6e6f632e766e2e00,0x5f2e32746e617473,0x72656b5f5f39325a\n"
".quad 0x616c6e655f6c656e,0x6e6944315f656772,0x5f5f676e69786564,0x6a4c4534366a4c49\n"
".quad 0x4532336a4c453834,0x376a4c4534366a4c,0x454530386a4c4532,0x6c62756f64375076\n"
".quad 0x766e2e0064503265,0x6e6174736e6f632e,0x5f39325a5f2e3074,0x5f6c656e72656b5f\n"
".quad 0x5f656772616c6e65,0x697865646e694431,0x366a4c495f5f676e,0x4c4538346a4c4534\n"
".quad 0x34366a4c4532336a,0x6a4c4532376a4c45,0x6437507645453038,0x645032656c62756f\n"
".quad 0x5f2e747865742e00,0x656e72656b31335a,0x6d6f6c756f635f6c,0x75635f6870735f62\n"
".quad 0x736e635f66666f74,0x323931694c493274,0x4c45323931694c45,0x5076454532393169\n"
".quad 0x32656c62756f6437,0x2e766e2e005f3153,0x335a5f2e6f666e69,0x5f6c656e72656b31\n"
".quad 0x5f626d6f6c756f63,0x6f7475635f687073,0x3274736e635f6666,0x4c45323931694c49\n"
".quad 0x31694c4532393169,0x6437507645453239,0x315332656c62756f,0x68732e766e2e005f\n"
".quad 0x335a5f2e64657261,0x5f6c656e72656b31,0x5f626d6f6c756f63,0x6f7475635f687073\n"
".quad 0x3274736e635f6666,0x4c45323931694c49,0x31694c4532393169,0x6437507645453239\n"
".quad 0x315332656c62756f,0x6f632e766e2e005f,0x2e32746e6174736e,0x6e72656b31335a5f\n"
".quad 0x6f6c756f635f6c65,0x635f6870735f626d,0x6e635f66666f7475,0x3931694c49327473\n"
".quad 0x45323931694c4532,0x764545323931694c,0x656c62756f643750,0x766e2e005f315332\n"
".quad 0x6e6174736e6f632e,0x6b31335a5f2e3074,0x6f635f6c656e7265,0x70735f626d6f6c75\n"
".quad 0x66666f7475635f68,0x4c493274736e635f,0x31694c4532393169,0x323931694c453239\n"
".quad 0x756f643750764545,0x005f315332656c62,0x5a5f2e747865742e,0x6c656e72656b3632\n"
".quad 0x626d6f6c756f635f,0x7475635f6870735f,0x31694c493166666f,0x323931694c453239\n"
".quad 0x4545323931694c45,0x6c62756f64375076,0x6e2e005f31533265,0x5f2e6f666e692e76\n"
".quad 0x656e72656b36325a,0x6d6f6c756f635f6c,0x75635f6870735f62,0x694c493166666f74\n"
".quad 0x3931694c45323931,0x45323931694c4532,0x62756f6437507645,0x2e005f315332656c\n"
".quad 0x65726168732e766e,0x656b36325a5f2e64,0x756f635f6c656e72,0x6870735f626d6f6c\n"
".quad 0x3166666f7475635f,0x4c45323931694c49,0x31694c4532393169,0x6437507645453239\n"
".quad 0x315332656c62756f,0x6f632e766e2e005f,0x2e32746e6174736e,0x6e72656b36325a5f\n"
".quad 0x6f6c756f635f6c65,0x635f6870735f626d,0x4c493166666f7475,0x31694c4532393169\n"
".quad 0x323931694c453239,0x756f643750764545,0x005f315332656c62,0x736e6f632e766e2e\n"
".quad 0x5a5f2e30746e6174,0x6c656e72656b3632,0x626d6f6c756f635f,0x7475635f6870735f\n"
".quad 0x31694c493166666f,0x323931694c453239,0x4545323931694c45,0x6c62756f64375076\n"
".quad 0x6e2e005f31533265,0x6174736e6f632e76,0x68732e000033746e,0x2e00626174727473\n"
".quad 0x2e00626174727473,0x2e006261746d7973,0x735f6261746d7973,0x766e2e0078646e68\n"
".quad 0x5a5f006f666e692e,0x6c656e72656b3133,0x626d6f6c756f635f,0x7475635f6870735f\n"
".quad 0x74736e635f66666f,0x45323931694c4931,0x694c45323931694c,0x3750764545323931\n"
".quad 0x5332656c62756f64,0x747865742e005f31,0x72656b31335a5f2e,0x6c756f635f6c656e\n"
".quad 0x5f6870735f626d6f,0x635f66666f747563,0x31694c493174736e,0x323931694c453239\n"
".quad 0x4545323931694c45,0x6c62756f64375076,0x6e2e005f31533265,0x5f2e6f666e692e76\n"
".quad 0x656e72656b31335a,0x6d6f6c756f635f6c,0x75635f6870735f62,0x736e635f66666f74\n"
".quad 0x323931694c493174,0x4c45323931694c45,0x5076454532393169,0x32656c62756f6437\n"
".quad 0x2e766e2e005f3153,0x5f2e646572616873,0x656e72656b31335a,0x6d6f6c756f635f6c\n"
".quad 0x75635f6870735f62,0x736e635f66666f74,0x323931694c493174,0x4c45323931694c45\n"
".quad 0x5076454532393169,0x32656c62756f6437,0x2e766e2e005f3153,0x746e6174736e6f63\n"
".quad 0x656b31335a5f2e32,0x756f635f6c656e72,0x6870735f626d6f6c,0x5f66666f7475635f\n"
".quad 0x694c493174736e63,0x3931694c45323931,0x45323931694c4532,0x62756f6437507645\n"
".quad 0x63005f315332656c,0x5a5f240074736e6f,0x6c656e72656b3133,0x626d6f6c756f635f\n"
".quad 0x7475635f6870735f,0x74736e635f66666f,0x45323931694c4931,0x694c45323931694c\n"
".quad 0x3750764545323931,0x5332656c62756f64,0x6475635f5f245f31,0x645f30326d735f61\n"
".quad 0x735f3436665f7669,0x5f68746170776f6c,0x31335a5f24003276,0x635f6c656e72656b\n"
".quad 0x735f626d6f6c756f,0x666f7475635f6870,0x493174736e635f66,0x694c45323931694c\n"
".quad 0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275,0x5f616475635f5f24\n"
".quad 0x7173645f30326d73,0x36665f6e725f7472,0x6d756964656d5f34,0x0031765f68746170\n"
".quad 0x72656b31335a5f24,0x6c756f635f6c656e,0x5f6870735f626d6f,0x635f66666f747563\n"
".quad 0x31694c493174736e,0x323931694c453239,0x4545323931694c45,0x6c62756f64375076\n"
".quad 0x5f5f245f31533265,0x6c616e7265746e69,0x65725f676972745f,0x5f6e6f6974637564\n"
".quad 0x68746170776f6c73,0x6f632e766e2e0064,0x2e30746e6174736e,0x6e72656b31335a5f\n"
".quad 0x6f6c756f635f6c65,0x635f6870735f626d,0x6e635f66666f7475,0x3931694c49317473\n"
".quad 0x45323931694c4532,0x764545323931694c,0x656c62756f643750,0x61705f005f315332\n"
".quad 0x36325a5f006d6172,0x635f6c656e72656b,0x735f626d6f6c756f,0x666f7475635f6870\n"
".quad 0x323931694c493066,0x4c45323931694c45,0x5076454532393169,0x32656c62756f6437\n"
".quad 0x7865742e005f3153,0x656b36325a5f2e74,0x756f635f6c656e72,0x6870735f626d6f6c\n"
".quad 0x3066666f7475635f,0x4c45323931694c49,0x31694c4532393169,0x6437507645453239\n"
".quad 0x315332656c62756f,0x6e692e766e2e005f,0x6b36325a5f2e6f66,0x6f635f6c656e7265\n"
".quad 0x70735f626d6f6c75,0x66666f7475635f68,0x45323931694c4930,0x694c45323931694c\n"
".quad 0x3750764545323931,0x5332656c62756f64,0x732e766e2e005f31,0x5a5f2e6465726168\n"
".quad 0x6c656e72656b3632,0x626d6f6c756f635f,0x7475635f6870735f,0x31694c493066666f\n"
".quad 0x323931694c453239,0x4545323931694c45,0x6c62756f64375076,0x6e2e005f31533265\n"
".quad 0x6174736e6f632e76,0x36325a5f2e32746e,0x635f6c656e72656b,0x735f626d6f6c756f\n"
".quad 0x666f7475635f6870,0x323931694c493066,0x4c45323931694c45,0x5076454532393169\n"
".quad 0x32656c62756f6437,0x325a5f24005f3153,0x5f6c656e72656b36,0x5f626d6f6c756f63\n"
".quad 0x6f7475635f687073,0x3931694c49306666,0x45323931694c4532,0x764545323931694c\n"
".quad 0x656c62756f643750,0x635f5f245f315332,0x30326d735f616475,0x3436665f7669645f\n"
".quad 0x746170776f6c735f,0x5a5f240032765f68,0x6c656e72656b3632,0x626d6f6c756f635f\n"
".quad 0x7475635f6870735f,0x31694c493066666f,0x323931694c453239,0x4545323931694c45\n"
".quad 0x6c62756f64375076,0x5f5f245f31533265,0x326d735f61647563,0x5f74727173645f30\n"
".quad 0x6d5f3436665f6e72,0x7461706d75696465,0x5a5f240031765f68,0x6c656e72656b3632\n"
".quad 0x626d6f6c756f635f,0x7475635f6870735f,0x31694c493066666f,0x323931694c453239\n"
".quad 0x4545323931694c45,0x6c62756f64375076,0x5f5f245f31533265,0x6c616e7265746e69\n"
".quad 0x65725f676972745f,0x5f6e6f6974637564,0x68746170776f6c73,0x6f632e766e2e0064\n"
".quad 0x2e30746e6174736e,0x6e72656b36325a5f,0x6f6c756f635f6c65,0x635f6870735f626d\n"
".quad 0x4c493066666f7475,0x31694c4532393169,0x323931694c453239,0x756f643750764545\n"
".quad 0x005f315332656c62,0x656b5f5f38325a5f,0x73656c5f6c656e72,0x6e6944315f6e6573\n"
".quad 0x5f5f676e69786564,0x6a4c4534366a4c49,0x4532336a4c453834,0x376a4c4534366a4c\n"
".quad 0x454530386a4c4532,0x2e005f3053645076,0x325a5f2e74786574,0x656e72656b5f5f38\n"
".quad 0x6e657373656c5f6c,0x7865646e6944315f,0x6a4c495f5f676e69,0x4538346a4c453436\n"
".quad 0x366a4c4532336a4c,0x4c4532376a4c4534,0x645076454530386a,0x2e766e2e005f3053\n"
".quad 0x325a5f2e6f666e69,0x656e72656b5f5f38,0x6e657373656c5f6c,0x7865646e6944315f\n"
".quad 0x6a4c495f5f676e69,0x4538346a4c453436,0x366a4c4532336a4c,0x4c4532376a4c4534\n"
".quad 0x645076454530386a,0x2e766e2e005f3053,0x5f2e646572616873,0x72656b5f5f38325a\n"
".quad 0x7373656c5f6c656e,0x646e6944315f6e65,0x495f5f676e697865,0x346a4c4534366a4c\n"
".quad 0x4c4532336a4c4538,0x32376a4c4534366a,0x76454530386a4c45,0x6e2e005f30536450\n"
".quad 0x6174736e6f632e76,0x38325a5f2e32746e,0x6c656e72656b5f5f,0x5f6e657373656c5f\n"
".quad 0x697865646e694431,0x366a4c495f5f676e,0x4c4538346a4c4534,0x34366a4c4532336a\n"
".quad 0x6a4c4532376a4c45,0x5364507645453038,0x632e766e2e005f30,0x30746e6174736e6f\n"
".quad 0x6b5f5f38325a5f2e,0x656c5f6c656e7265,0x6944315f6e657373,0x5f676e697865646e\n"
".quad 0x4c4534366a4c495f,0x32336a4c4538346a,0x6a4c4534366a4c45,0x4530386a4c453237\n"
".quad 0x005f305364507645,0x6e72656b36325a5f,0x6f6c756f635f6c65,0x635f6870735f626d\n"
".quad 0x4c493266666f7475,0x31694c4532393169,0x323931694c453239,0x756f643750764545\n"
".quad 0x005f315332656c62,0x5a5f2e747865742e,0x6c656e72656b3632,0x626d6f6c756f635f\n"
".quad 0x7475635f6870735f,0x31694c493266666f,0x323931694c453239,0x4545323931694c45\n"
".quad 0x6c62756f64375076,0x6e2e005f31533265,0x5f2e6f666e692e76,0x656e72656b36325a\n"
".quad 0x6d6f6c756f635f6c,0x75635f6870735f62,0x694c493266666f74,0x3931694c45323931\n"
".quad 0x45323931694c4532,0x62756f6437507645,0x2e005f315332656c,0x65726168732e766e\n"
".quad 0x656b36325a5f2e64,0x756f635f6c656e72,0x6870735f626d6f6c,0x3266666f7475635f\n"
".quad 0x4c45323931694c49,0x31694c4532393169,0x6437507645453239,0x315332656c62756f\n"
".quad 0x6f632e766e2e005f,0x2e32746e6174736e,0x6e72656b36325a5f,0x6f6c756f635f6c65\n"
".quad 0x635f6870735f626d,0x4c493266666f7475,0x31694c4532393169,0x323931694c453239\n"
".quad 0x756f643750764545,0x005f315332656c62,0x72656b36325a5f24,0x6c756f635f6c656e\n"
".quad 0x5f6870735f626d6f,0x493266666f747563,0x694c45323931694c,0x3931694c45323931\n"
".quad 0x6f64375076454532,0x5f315332656c6275,0x5f616475635f5f24,0x7669645f30326d73\n"
".quad 0x6f6c735f3436665f,0x32765f6874617077,0x656b36325a5f2400,0x756f635f6c656e72\n"
".quad 0x6870735f626d6f6c,0x3266666f7475635f,0x4c45323931694c49,0x31694c4532393169\n"
".quad 0x6437507645453239,0x315332656c62756f,0x616475635f5f245f,0x73645f30326d735f\n"
".quad 0x665f6e725f747271,0x756964656d5f3436,0x31765f687461706d,0x656b36325a5f2400\n"
".quad 0x756f635f6c656e72,0x6870735f626d6f6c,0x3266666f7475635f,0x4c45323931694c49\n"
".quad 0x31694c4532393169,0x6437507645453239,0x315332656c62756f,0x65746e695f5f245f\n"
".quad 0x6972745f6c616e72,0x7463756465725f67,0x776f6c735f6e6f69,0x6e2e006468746170\n"
".quad 0x6174736e6f632e76,0x36325a5f2e30746e,0x635f6c656e72656b,0x735f626d6f6c756f\n"
".quad 0x666f7475635f6870,0x323931694c493266,0x4c45323931694c45,0x5076454532393169\n"
".quad 0x32656c62756f6437,0x31335a5f005f3153,0x635f6c656e72656b,0x735f626d6f6c756f\n"
".quad 0x666f7475635f6870,0x493074736e635f66,0x694c45323931694c,0x3931694c45323931\n"
".quad 0x6f64375076454532,0x5f315332656c6275,0x5f2e747865742e00,0x656e72656b31335a\n"
".quad 0x6d6f6c756f635f6c,0x75635f6870735f62,0x736e635f66666f74,0x323931694c493074\n"
".quad 0x4c45323931694c45,0x5076454532393169,0x32656c62756f6437,0x2e766e2e005f3153\n"
".quad 0x335a5f2e6f666e69,0x5f6c656e72656b31,0x5f626d6f6c756f63,0x6f7475635f687073\n"
".quad 0x3074736e635f6666,0x4c45323931694c49,0x31694c4532393169,0x6437507645453239\n"
".quad 0x315332656c62756f,0x68732e766e2e005f,0x335a5f2e64657261,0x5f6c656e72656b31\n"
".quad 0x5f626d6f6c756f63,0x6f7475635f687073,0x3074736e635f6666,0x4c45323931694c49\n"
".quad 0x31694c4532393169,0x6437507645453239,0x315332656c62756f,0x6f632e766e2e005f\n"
".quad 0x2e32746e6174736e,0x6e72656b31335a5f,0x6f6c756f635f6c65,0x635f6870735f626d\n"
".quad 0x6e635f66666f7475,0x3931694c49307473,0x45323931694c4532,0x764545323931694c\n"
".quad 0x656c62756f643750,0x5a5f24005f315332,0x6c656e72656b3133,0x626d6f6c756f635f\n"
".quad 0x7475635f6870735f,0x74736e635f66666f,0x45323931694c4930,0x694c45323931694c\n"
".quad 0x3750764545323931,0x5332656c62756f64,0x6475635f5f245f31,0x645f30326d735f61\n"
".quad 0x735f3436665f7669,0x5f68746170776f6c,0x31335a5f24003276,0x635f6c656e72656b\n"
".quad 0x735f626d6f6c756f,0x666f7475635f6870,0x493074736e635f66,0x694c45323931694c\n"
".quad 0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275,0x5f616475635f5f24\n"
".quad 0x7173645f30326d73,0x36665f6e725f7472,0x6d756964656d5f34,0x0031765f68746170\n"
".quad 0x72656b31335a5f24,0x6c756f635f6c656e,0x5f6870735f626d6f,0x635f66666f747563\n"
".quad 0x31694c493074736e,0x323931694c453239,0x4545323931694c45,0x6c62756f64375076\n"
".quad 0x5f5f245f31533265,0x6c616e7265746e69,0x65725f676972745f,0x5f6e6f6974637564\n"
".quad 0x68746170776f6c73,0x6f632e766e2e0064,0x2e30746e6174736e,0x6e72656b31335a5f\n"
".quad 0x6f6c756f635f6c65,0x635f6870735f626d,0x6e635f66666f7475,0x3931694c49307473\n"
".quad 0x45323931694c4532,0x764545323931694c,0x656c62756f643750,0x325a5f005f315332\n"
".quad 0x656e72656b5f5f39,0x6772616c6e655f6c,0x65646e6944315f65,0x4c495f5f676e6978\n"
".quad 0x38346a4c4534366a,0x6a4c4532336a4c45,0x4532376a4c453436,0x5076454530386a4c\n"
".quad 0x32656c62756f6437,0x747865742e006450,0x6b5f5f39325a5f2e,0x6e655f6c656e7265\n"
".quad 0x44315f656772616c,0x676e697865646e69,0x4534366a4c495f5f,0x336a4c4538346a4c\n"
".quad 0x4c4534366a4c4532,0x30386a4c4532376a,0x756f643750764545,0x2e00645032656c62\n"
".quad 0x2e6f666e692e766e,0x656b5f5f39325a5f,0x6c6e655f6c656e72,0x6944315f65677261\n"
".quad 0x5f676e697865646e,0x4c4534366a4c495f,0x32336a4c4538346a,0x6a4c4534366a4c45\n"
".quad 0x4530386a4c453237,0x62756f6437507645,0x6e2e00645032656c,0x6465726168732e76\n"
".quad 0x6b5f5f39325a5f2e,0x6e655f6c656e7265,0x44315f656772616c,0x676e697865646e69\n"
".quad 0x4534366a4c495f5f,0x336a4c4538346a4c,0x4c4534366a4c4532,0x30386a4c4532376a\n"
".quad 0x756f643750764545,0x2e00645032656c62,0x74736e6f632e766e,0x325a5f2e32746e61\n"
".quad 0x656e72656b5f5f39,0x6772616c6e655f6c,0x65646e6944315f65,0x4c495f5f676e6978\n"
".quad 0x38346a4c4534366a,0x6a4c4532336a4c45,0x4532376a4c453436,0x5076454530386a4c\n"
".quad 0x32656c62756f6437,0x632e766e2e006450,0x30746e6174736e6f,0x6b5f5f39325a5f2e\n"
".quad 0x6e655f6c656e7265,0x44315f656772616c,0x676e697865646e69,0x4534366a4c495f5f\n"
".quad 0x336a4c4538346a4c,0x4c4534366a4c4532,0x30386a4c4532376a,0x756f643750764545\n"
".quad 0x5f00645032656c62,0x656e72656b31335a,0x6d6f6c756f635f6c,0x75635f6870735f62\n"
".quad 0x736e635f66666f74,0x323931694c493274,0x4c45323931694c45,0x5076454532393169\n"
".quad 0x32656c62756f6437,0x7865742e005f3153,0x656b31335a5f2e74,0x756f635f6c656e72\n"
".quad 0x6870735f626d6f6c,0x5f66666f7475635f,0x694c493274736e63,0x3931694c45323931\n"
".quad 0x45323931694c4532,0x62756f6437507645,0x2e005f315332656c,0x2e6f666e692e766e\n"
".quad 0x6e72656b31335a5f,0x6f6c756f635f6c65,0x635f6870735f626d,0x6e635f66666f7475\n"
".quad 0x3931694c49327473,0x45323931694c4532,0x764545323931694c,0x656c62756f643750\n"
".quad 0x766e2e005f315332,0x2e6465726168732e,0x6e72656b31335a5f,0x6f6c756f635f6c65\n"
".quad 0x635f6870735f626d,0x6e635f66666f7475,0x3931694c49327473,0x45323931694c4532\n"
".quad 0x764545323931694c,0x656c62756f643750,0x766e2e005f315332,0x6e6174736e6f632e\n"
".quad 0x6b31335a5f2e3274,0x6f635f6c656e7265,0x70735f626d6f6c75,0x66666f7475635f68\n"
".quad 0x4c493274736e635f,0x31694c4532393169,0x323931694c453239,0x756f643750764545\n"
".quad 0x005f315332656c62,0x72656b31335a5f24,0x6c756f635f6c656e,0x5f6870735f626d6f\n"
".quad 0x635f66666f747563,0x31694c493274736e,0x323931694c453239,0x4545323931694c45\n"
".quad 0x6c62756f64375076,0x5f5f245f31533265,0x326d735f61647563,0x36665f7669645f30\n"
".quad 0x6170776f6c735f34,0x5f240032765f6874,0x656e72656b31335a,0x6d6f6c756f635f6c\n"
".quad 0x75635f6870735f62,0x736e635f66666f74,0x323931694c493274,0x4c45323931694c45\n"
".quad 0x5076454532393169,0x32656c62756f6437,0x75635f5f245f3153,0x5f30326d735f6164\n"
".quad 0x6e725f7472717364,0x64656d5f3436665f,0x5f687461706d7569,0x31335a5f24003176\n"
".quad 0x635f6c656e72656b,0x735f626d6f6c756f,0x666f7475635f6870,0x493274736e635f66\n"
".quad 0x694c45323931694c,0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275\n"
".quad 0x7265746e695f5f24,0x676972745f6c616e,0x697463756465725f,0x70776f6c735f6e6f\n"
".quad 0x766e2e0064687461,0x6e6174736e6f632e,0x6b31335a5f2e3074,0x6f635f6c656e7265\n"
".quad 0x70735f626d6f6c75,0x66666f7475635f68,0x4c493274736e635f,0x31694c4532393169\n"
".quad 0x323931694c453239,0x756f643750764545,0x005f315332656c62,0x6e72656b36325a5f\n"
".quad 0x6f6c756f635f6c65,0x635f6870735f626d,0x4c493166666f7475,0x31694c4532393169\n"
".quad 0x323931694c453239,0x756f643750764545,0x005f315332656c62,0x5a5f2e747865742e\n"
".quad 0x6c656e72656b3632,0x626d6f6c756f635f,0x7475635f6870735f,0x31694c493166666f\n"
".quad 0x323931694c453239,0x4545323931694c45,0x6c62756f64375076,0x6e2e005f31533265\n"
".quad 0x5f2e6f666e692e76,0x656e72656b36325a,0x6d6f6c756f635f6c,0x75635f6870735f62\n"
".quad 0x694c493166666f74,0x3931694c45323931,0x45323931694c4532,0x62756f6437507645\n"
".quad 0x2e005f315332656c,0x65726168732e766e,0x656b36325a5f2e64,0x756f635f6c656e72\n"
".quad 0x6870735f626d6f6c,0x3166666f7475635f,0x4c45323931694c49,0x31694c4532393169\n"
".quad 0x6437507645453239,0x315332656c62756f,0x6f632e766e2e005f,0x2e32746e6174736e\n"
".quad 0x6e72656b36325a5f,0x6f6c756f635f6c65,0x635f6870735f626d,0x4c493166666f7475\n"
".quad 0x31694c4532393169,0x323931694c453239,0x756f643750764545,0x005f315332656c62\n"
".quad 0x72656b36325a5f24,0x6c756f635f6c656e,0x5f6870735f626d6f,0x493166666f747563\n"
".quad 0x694c45323931694c,0x3931694c45323931,0x6f64375076454532,0x5f315332656c6275\n"
".quad 0x5f616475635f5f24,0x7669645f30326d73,0x6f6c735f3436665f,0x32765f6874617077\n"
".quad 0x656b36325a5f2400,0x756f635f6c656e72,0x6870735f626d6f6c,0x3166666f7475635f\n"
".quad 0x4c45323931694c49,0x31694c4532393169,0x6437507645453239,0x315332656c62756f\n"
".quad 0x616475635f5f245f,0x73645f30326d735f,0x665f6e725f747271,0x756964656d5f3436\n"
".quad 0x31765f687461706d,0x656b36325a5f2400,0x756f635f6c656e72,0x6870735f626d6f6c\n"
".quad 0x3166666f7475635f,0x4c45323931694c49,0x31694c4532393169,0x6437507645453239\n"
".quad 0x315332656c62756f,0x65746e695f5f245f,0x6972745f6c616e72,0x7463756465725f67\n"
".quad 0x776f6c735f6e6f69,0x6e2e006468746170,0x6174736e6f632e76,0x36325a5f2e30746e\n"
".quad 0x635f6c656e72656b,0x735f626d6f6c756f,0x666f7475635f6870,0x323931694c493166\n"
".quad 0x4c45323931694c45,0x5076454532393169,0x32656c62756f6437,0x2e766e2e005f3153\n"
".quad 0x746e6174736e6f63,0x726168635f640033,0x75636c5f64006567,0x6b5f640066666f74\n"
".quad 0x796b6b5f6400786b,0x5f007a6b6b5f6400,0x5f7472616475635f,0x00645f69706f3269\n"
".quad 0x7472616475635f5f,0x736f635f6e69735f,0x00736666656f635f,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x001e000300000077,0x0000000000000000\n"
".quad 0x0000000000000000,0x000d000300000160,0x0000000000000000,0x0000000000000000\n"
".quad 0x001e0022000001b9,0x0000000000000958,0x0000000000000380,0x001e00220000021f\n"
".quad 0x0000000000000cd8,0x00000000000001c8,0x001e00020000028c,0x0000000000000ea0\n"
".quad 0x00000000000009a0,0x000e0003000002f6,0x0000000000000000,0x0000000000000000\n"
".quad 0x001f000300000390,0x0000000000000000,0x0000000000000000,0x000f00030000046a\n"
".quad 0x0000000000000000,0x0000000000000000,0x001f0022000004b8,0x0000000000000930\n"
".quad 0x0000000000000368,0x001f002200000519,0x0000000000000c98,0x00000000000001c0\n"
".quad 0x001f000200000581,0x0000000000000e58,0x00000000000009a8,0x00100003000005e6\n"
".quad 0x0000000000000000,0x0000000000000000,0x002000030000067b,0x0000000000000000\n"
".quad 0x0000000000000000,0x001100030000076a,0x0000000000000000,0x0000000000000000\n"
".quad 0x00120003000007bf,0x0000000000000000,0x0000000000000000,0x0021000300000854\n"
".quad 0x0000000000000000,0x0000000000000000,0x001300030000092e,0x0000000000000000\n"
".quad 0x0000000000000000,0x002100220000097c,0x0000000000000a50,0x0000000000000368\n"
".quad 0x00210022000009dd,0x0000000000000db8,0x00000000000001c0,0x0021000200000a45\n"
".quad 0x0000000000000f78,0x00000000000009c8,0x0014000300000aaa,0x0000000000000000\n"
".quad 0x0000000000000000,0x0022000300000b3d,0x0000000000000000,0x0000000000000000\n"
".quad 0x0015000300000c26,0x0000000000000000,0x0000000000000000,0x0022002200000c79\n"
".quad 0x00000000000008e0,0x0000000000000378,0x0022002200000cdf,0x0000000000000c58\n"
".quad 0x00000000000001c0,0x0022000200000d4c,0x0000000000000e18,0x00000000000009a8\n"
".quad 0x0016000300000db6,0x0000000000000000,0x0000000000000000,0x0023000300000e57\n"
".quad 0x0000000000000000,0x0000000000000000,0x0017000300000f5b,0x0000000000000000\n"
".quad 0x0000000000000000,0x0018000300000fb7,0x0000000000000000,0x0000000000000000\n"
".quad 0x0024000300001058,0x0000000000000000,0x0000000000000000,0x0019000300001141\n"
".quad 0x0000000000000000,0x0000000000000000,0x0024002200001194,0x0000000000000958\n"
".quad 0x0000000000000380,0x00240022000011fa,0x0000000000000cd8,0x00000000000001c8\n"
".quad 0x0024000200001267,0x0000000000000ea0,0x00000000000009a0,0x001a0003000012d1\n"
".quad 0x0000000000000000,0x0000000000000000,0x0025000300001364,0x0000000000000000\n"
".quad 0x0000000000000000,0x001b00030000143e,0x0000000000000000,0x0000000000000000\n"
".quad 0x002500220000148c,0x00000000000008f0,0x0000000000000368,0x00250022000014ed\n"
".quad 0x0000000000000c58,0x00000000000001c0,0x0025000200001555,0x0000000000000e18\n"
".quad 0x00000000000009a8,0x001c0003000015ba,0x0000000000000000,0x0000000000000000\n"
".quad 0x001d000300001608,0x0000000000000000,0x0000000000000000,0x001d000100001616\n"
".quad 0x0000000000000000,0x0000000000000008,0x001d00010000161f,0x0000000000000008\n"
".quad 0x0000000000000008,0x001d000100001629,0x0000000000000010,0x0000000000000600\n"
".quad 0x001d00010000162f,0x0000000000000610,0x0000000000000600,0x001d000100001635\n"
".quad 0x0000000000000c10,0x0000000000000600,0x001d00010000163b,0x0000000000001210\n"
".quad 0x0000000000000090,0x001d00010000164c,0x00000000000012a0,0x0000000000000080\n"
".quad 0x001e101200000032,0x0000000000000000,0x0000000000001840,0x001f101200000350\n"
".quad 0x0000000000000000,0x0000000000001800,0x0020101200000634,0x0000000000000000\n"
".quad 0x0000000000000300,0x0021101200000814,0x0000000000000000,0x0000000000001940\n"
".quad 0x0022101200000af8,0x0000000000000000,0x00000000000017c0,0x0023101200000e09\n"
".quad 0x0000000000000000,0x0000000000000340,0x0024101200001013,0x0000000000000000\n"
".quad 0x0000000000001840,0x0025101200001324,0x0000000000000000,0x00000000000017c0\n"
".quad 0x0000002900082304,0x0008120400000000,0x0000000000000029,0x0000002900081104\n"
".quad 0x0008230400000000,0x0000000000000028,0x0000002800081204,0x0008110400000000\n"
".quad 0x0000000000000028,0x0000002700082304,0x0008120400000000,0x0000000000000027\n"
".quad 0x0000002700081104,0x0008230400000000,0x000000000000003a,0x0000003a00081204\n"
".quad 0x0008110400000030,0x000000300000003a,0x0000002300082304,0x0008120400000000\n"
".quad 0x0000000000000023,0x0000002300081104,0x0008230400000000,0x0000000000000022\n"
".quad 0x0000002200081204,0x0008110400000000,0x0000000000000022,0x0000002100082304\n"
".quad 0x0008120400000000,0x0000000000000021,0x0000002100081104,0x0008230400000000\n"
".quad 0x0000000000000039,0x0000003900081204,0x0008110400000030,0x0000003000000039\n"
".quad 0x0000003800082304,0x0008120400000000,0x0000000000000038,0x0000003800081104\n"
".quad 0x0008230400000000,0x000000000000001a,0x0000001a00081204,0x0008110400000000\n"
".quad 0x000000000000001a,0x0000001900082304,0x0008120400000000,0x0000000000000019\n"
".quad 0x0000001900081104,0x0008230400000000,0x0000000000000018,0x0000001800081204\n"
".quad 0x0008110400000000,0x0000000000000018,0x0000003700082304,0x0008120400000000\n"
".quad 0x0000003000000037,0x0000003700081104,0x0008230400000030,0x0000000000000014\n"
".quad 0x0000001400081204,0x0008110400000000,0x0000000000000014,0x0000001300082304\n"
".quad 0x0008120400000000,0x0000000000000013,0x0000001300081104,0x0008230400000000\n"
".quad 0x0000000000000012,0x0000001200081204,0x0008110400000000,0x0000000000000012\n"
".quad 0x0000003600082304,0x0008120400000000,0x0000003000000036,0x0000003600081104\n"
".quad 0x0008230400000030,0x0000000000000035,0x0000003500081204,0x0008110400000000\n"
".quad 0x0000000000000035,0x0000000b00082304,0x0008120400000000,0x000000000000000b\n"
".quad 0x0000000b00081104,0x0008230400000000,0x000000000000000a,0x0000000a00081204\n"
".quad 0x0008110400000000,0x000000000000000a,0x0000000900082304,0x0008120400000000\n"
".quad 0x0000000000000009,0x0000000900081104,0x0008230400000000,0x0000000000000034\n"
".quad 0x0000003400081204,0x0008110400000030,0x0000003000000034,0x0000000500082304\n"
".quad 0x0008120400000000,0x0000000000000005,0x0000000500081104,0x0008230400000000\n"
".quad 0x0000000000000004,0x0000000400081204,0x0008110400000000,0x0000000000000004\n"
".quad 0x0000000300082304,0x0008120400000000,0x0000000000000003,0x0000000300081104\n"
".quad 0x0008230400000000,0x0000000000000033,0x0000003300081204,0x0008110400000030\n"
".quad 0x0000003000000033,0x0000000600080a04,0x0010190300100140,0x00000000000c1704\n"
".quad 0x0021f00000080001,0x00000000000c1704,0x0021f00000000000,0x00041d0400ff1b03\n"
".quad 0x00081c0400000018,0x0000095000000070,0x0000024000041e04,0x0000000c00080a04\n"
".quad 0x0010190300100140,0x00000000000c1704,0x0021f00000080001,0x00000000000c1704\n"
".quad 0x0021f00000000000,0x00041d0400ff1b03,0x00081c0400000018,0x0000092800000070\n"
".quad 0x0000024000041e04,0x0000000f00080a04,0x0010190300100140,0x00000000000c1704\n"
".quad 0x0021f00000080001,0x00000000000c1704,0x0021f00000000000,0x00041d0400ff1b03\n"
".quad 0x00081c0400000018,0x000002f000000050,0x0000001500080a04,0x0010190300100140\n"
".quad 0x00000000000c1704,0x0021f00000080001,0x00000000000c1704,0x0021f00000000000\n"
".quad 0x00041d0400ff1b03,0x000c1c0400000018,0x000007d0000000c8,0x00041e0400000a48\n"
".quad 0x00080a0400000240,0x001001400000001b,0x000c170400101903,0x0008000100000000\n"
".quad 0x000c17040021f000,0x0000000000000000,0x00ff1b030021f000,0x0000001800041d04\n"
".quad 0x000000c8000c1c04,0x000008d800000648,0x0000024000041e04,0x0000001e00080a04\n"
".quad 0x0010190300100140,0x00000000000c1704,0x0021f00000080001,0x00000000000c1704\n"
".quad 0x0021f00000000000,0x00041d0400ff1b03,0x00081c0400000010,0x0000031800000050\n"
".quad 0x0000002400080a04,0x0010190300100140,0x00000000000c1704,0x0021f00000080001\n"
".quad 0x00000000000c1704,0x0021f00000000000,0x00041d0400ff1b03,0x00081c0400000018\n"
".quad 0x0000095000000070,0x0000024000041e04,0x0000002a00080a04,0x0010190300100140\n"
".quad 0x00000000000c1704,0x0021f00000080001,0x00000000000c1704,0x0021f00000000000\n"
".quad 0x00041d0400ff1b03,0x000c1c0400000018,0x00000670000000c8,0x00041e04000008e8\n"
".quad 0x00368fff00000240,0x000000007ca00000,0x7ff000003ff00000,0x6dc9c88341e00000\n"
".quad 0x54442d183fe45f30,0x33145c003ff921fb,0x252049c03c91a626,0xf9785eba397b839a\n"
".quad 0x035b73333de5db65,0x4000000000055555,0x3e8000001ff00000,0xfcc000003e7fffff\n"
".quad 0x000000007fefffff,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x00368fff00000000,0x382d7365001b4800\n"
".quad 0x9ee756163fa0c152,0x035b73333cd203af,0x0000000000055555,0x7ca000003ff00000\n"
".quad 0x6dc9c8837ff00000,0x54442d183fe45f30,0x33145c003ff921fb,0x252049c03c91a626\n"
".quad 0x41e00000397b839a,0x3de5db65f9785eba,0x1ff0000040000000,0x3e7fffff3e800000\n"
".quad 0x7feffffffcc00000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000243650\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x00368fff00000000,0x382d73657ca00000,0x000000003fa0c152\n"
".quad 0x7ff000003ff00000,0x6dc9c88341e00000,0x54442d183fe45f30,0x33145c003ff921fb\n"
".quad 0x252049c03c91a626,0xf9785eba397b839a,0x035b73333de5db65,0x4000000000055555\n"
".quad 0x3e8000001ff00000,0xfcc000003e7fffff,0x000000007fefffff,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x00368fff00000000,0x000000007ca00000,0x7ff000003ff00000,0x6dc9c88341e00000\n"
".quad 0x54442d183fe45f30,0x33145c003ff921fb,0x252049c03c91a626,0xf9785eba397b839a\n"
".quad 0x035b73333de5db65,0x4000000000055555,0x3e8000001ff00000,0xfcc000003e7fffff\n"
".quad 0x000000007fefffff,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0024365000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x7ca0000000368fff,0x3ff0000000000000,0x41e000007ff00000\n"
".quad 0x3fe45f306dc9c883,0x3ff921fb54442d18,0x3c91a62633145c00,0x397b839a252049c0\n"
".quad 0x3de5db65f9785eba,0x00055555035b7333,0x1ff0000040000000,0x3e7fffff3e800000\n"
".quad 0x7feffffffcc00000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x001b480000368fff\n"
".quad 0x3fa0c152382d7365,0x3ff0000000000000,0x7ff000007ca00000,0x3fe45f306dc9c883\n"
".quad 0x3ff921fb54442d18,0x3c91a62633145c00,0x397b839a252049c0,0xf9785eba41e00000\n"
".quad 0x035b73333de5db65,0x4000000000055555,0x3e8000001ff00000,0xfcc000003e7fffff\n"
".quad 0x000000007fefffff,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x6bfb5fb11f8d5d08,0x3d0739f78a5292ea,0x7527bac7ebe5f17b\n"
".quad 0x4f463f669e5fea2d,0x6d367ecf27cb09b7,0xef2f118b5a0a6d1f,0x1ff897ffde05980f\n"
".quad 0x9c845f8bbdf9283b,0x3991d639835339f4,0xe99c7026b45f7e41,0xe88235f52ebb4484\n"
".quad 0xfe1deb1cb129a73e,0x06492eea09d1921c,0xb7246e3a424dd2e0,0xfe5163abdebbc561\n"
".quad 0xdb6295993c439041,0xfc2757d1f534ddc0,0xa2f9836e4e441529,0x3de5db65f9785eba\n"
".quad 0xbe5ae5f12cb0d246,0x3ec71de369ace392,0xbf2a01a019db62a1,0x3f81111111110818\n"
".quad 0xbfc5555555555554,0x0000000000000000,0x0000000000000000,0xbda8ff8320fd8164\n"
".quad 0x3e21eea7c1ef8528,0xbe927e4f8e06e6d9,0x3efa01a019ddbce9,0xbf56c16c16c15d47\n"
".quad 0x3fa5555555555551,0xbfe0000000000000,0x3ff0000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001fb000fe2007f6,0x5b30011800370003\n"
".quad 0x4b68038800070307,0x4c47020000170100,0x001fd800ffa007f0,0x04000ffffff70002\n"
".quad 0xe30000000000000f,0x5c9807800ff70008,0x001fd800fec007f0,0x5c9807800ff70004\n"
".quad 0xe290000088000000,0x5c118000004703ff,0x001fc000ffa007ed,0x5b650b800ff70807\n"
".quad 0xe24000005e80000f,0x010709ad4e57f009,0x181fc4c0fe2007f6,0xe290000024800000\n"
".quad 0x5b007f8000970304,0x5b027f8800970305,0x001f9800fec607f4,0x5b2f7f8800970306\n"
".quad 0x5b29020000970304,0x5cc0032000570404,0x001fd800fea207f1,0x3829000000d70405\n"
".quad 0x010ffffb7407f006,0x5bdf7f8010570404,0x001f9400fe2607f1,0x5b00018000670405\n"
".quad 0x5b007fa800670406,0x010151d07eb7f00b,0x181fc4c0fe2007fd,0x5b30029800670405\n"
".quad 0x5b007f8000b70506,0x5b027f8800b70507,0x001fd800fec607f4,0x5b2f7f8800b70509\n"
".quad 0x5b29030000b70506,0x5cc004a000770606,0x001fd400fe2007e6,0x3829000000370607\n"
".quad 0x5bdf7f8010770606,0x010ffffff9f7f007,0x0000c4c0fe0207f4,0x3848000000370609\n"
".quad 0x5b00028000770605,0xef9500306107090c,0x001fc000fca007f1,0x5b007fa800770607\n"
".quad 0x3848000000370404,0x5b30029800770606,0x000e7400fe800756,0xef95003001070404\n"
".quad 0x3848000000370606,0xef950030c107060a,0x0200f80413c0505e,0x5c80000000c70c06\n"
".quad 0x5b70030000470404,0x5b70020000a70a12,0x001ff4020640103d,0x3880004008071204\n"
".quad 0x5080000000770507,0x1c0fcb0000070506,0x003fc4020640103e,0x5c8000000067060a\n"
".quad 0x537105080027040c,0x010000000007f00a,0x0020f802044007f6,0x0103fe000007f00b\n"
".quad 0x3670053fd8070c10,0x5c80000000c7060a,0x0040c400fee01031,0x5b70030000a7100e\n"
".quad 0x4b62038800170607,0x5c80000000e7040a,0x00408400fec007f1,0x1c0fff0000070f07\n"
".quad 0x5c98078000e70010,0x5b71020000a70a0c,0x007ff40207a007f7,0x5c98078000770011\n"
".quad 0x5b70050001070c10,0xf0f800000000000f,0x001fc400ffa007f6,0x5c98078000770009\n"
".quad 0xe26000009e000040,0x5c98078000670010,0x0000c000ffa007f0,0x5c98078000770011\n"
".quad 0xf0f800000007000f,0x4c80000c00271004,0x001fc402fe2007fe,0xe29000000e000000\n"
".quad 0x5b6503800ff70407,0x0407fffffff70506,0x001fb000fe2007fb,0x5c98078000570007\n"
".quad 0x4b65000800470607,0x5c98078000470006,0x0040c40107a00718,0x5c8000000060ff06\n"
".quad 0x4c80000800670604,0x5cb0000000471e09,0x0043fc00ffe007e6,0x0407fe000007070c\n"
".quad 0x4b62038800570c07,0xef54000000070209,0x008578022bc0003f,0x5cb8000000972b04\n"
".quad 0x4b7103080087040a,0x4b71050800a7040a,0x001fc407ffa02152,0x4b71050800c70404\n"
".quad 0xf0f800000000000f,0x5c9807800067000a,0x0002f400ffa007f6,0x5c9807800077000b\n"
".quad 0xe2600000aa800040,0xef44000000070209,0x001fd820fe000ffd,0xf0f800000007000f\n"
".quad 0x1c0000000017090e,0xe29000001f800000,0x001fc040fe8007f6,0x0400000000170e09\n"
".quad 0x384800000067090f,0x3664038000170907,0x00014400fe000031,0xef9500312a870f10\n"
".quad 0x01020fd81647f006,0xef9500312b070f14,0x001f84000f6007f0,0x010bda8ff837f007\n"
".quad 0xef9500312b870f0c,0x4ca0000800e7060a,0x0002f800860007f1,0x4ca0000800f7070b\n"
".quad 0x5c80000000470406,0xef9500312d070f16,0x0889c80206c21152,0x5b70080000a7060a\n"
".quad 0xef9500312c070f10,0x5b700a0000a7060a,0x0045780867c02056,0xef9500312c870f14\n"
".quad 0x5b70060000a7060a,0x5b70080000a7060a,0x041fc0022a8021a2,0x5b700a0000a7060c\n"
".quad 0x388000415b07120a,0x5b6503800ff70907,0x001fdc0072202152,0x5080000000670b09\n"
".quad 0x5b700b0000c7060c,0x0400000000270e0e,0x030e4800fce08391,0x5b70020000c70404\n"
".quad 0x5b6503800ff70e0f,0x5370060800280604,0x021cc404fea047f1,0x010000000017f00c\n"
".quad 0x5c9807800097000d,0x37707fbff0090404,0x011d7802e4200277,0x5371060800270a06\n"
".quad 0x3871003ff0070404,0x5b70030000670606,0x014578044fc01171,0x4c80000c00070412\n"
".quad 0x5b70060000670c0c,0x5c80000000c71204,0x005fd8042a40215e,0x5b71090000470a06\n"
".quad 0x5b70020000670c0c,0x4843038801071304,0x001fb400fec027f6,0x5980068000b7ff05\n"
".quad 0x4844038801170505,0x5c403080005704ff,0x001fd800fe200ffd,0xf0f800000000000f\n"
".quad 0x5c98078000a70004,0x5c98078000b70005,0x001fc400ffa007fd,0xe260000034800040\n"
".quad 0xf0f800000007000f,0x36f801c00047ff09,0x001fc840fec007f5,0x36f804400047030e\n"
".quad 0x4c1080000507090a,0x4c10080005170e0b,0x001fc400fcc00071,0xeed6200000070a04\n"
".quad 0x4c10800005270909,0x4c10080005370e0e,0x003fc80006424031,0x5c80000000670c06\n"
".quad 0x5c80000000470c04,0x5c9807800097000c,0x003ff4021fe007f2,0x5c98078000e7000d\n"
".quad 0xeede200000070c04,0xf0f800000007000f,0x001dc400fe4007f1,0x4c98078005070004\n"
".quad 0x4c98078005170005,0xeed6200000070404,0x001f8400062007f2,0x010415b00007f009\n"
".quad 0x508000000067090b,0x010000000007f00c,0x0040f800ffa007f1,0x0103ff000007f00d\n"
".quad 0x010000000017f00a,0x377006415b070a0c,0x011d78010620171e,0x5b70060000c70c0c\n"
".quad 0x5b70050000c70a0c,0x3880003ff8070606,0x0088f804ebc0275e,0x4c80000c00070606\n"
".quad 0x4c80000c00270606,0x4c80000c00270612,0x001d5c030620103e,0x5c80000000c71206\n"
".quad 0x377009415b07060a,0x3880003ff8070404,0x005fc40508c01032,0x5b70030000a70c06\n"
".quad 0x4c80000c0007040a,0x328003c15b07ff09,0x001fc400fec00ff5,0x4843038801071304\n"
".quad 0x4844038801170905,0x5c403080005704ff,0x007ff40204802038,0x4c80000c00270a04\n"
".quad 0x4c80000c0027040a,0xe24000000380000f,0x001ff400fec007f1,0x5c9807800ff70004\n"
".quad 0x010415b00007f005,0xe260000017800040,0x001fc800fec007f1,0x5c98078000c70006\n"
".quad 0x5c98078000d70007,0x010415b00007f010,0x001fc400fe200031,0x5080000000671005\n"
".quad 0x010000000007f00e,0x0103ff000007f00f,0x0040f80207c007fd,0x010000000017f004\n"
".quad 0x377007415b07040c,0x5b70060000c70c0e,0x0040f80207c0103e,0x5b70020000e7040c\n"
".quad 0x5c80000000c70a04,0x377005415b07040e,0x005fd801fcc01032,0x5b70020000e70c04\n"
".quad 0x4843038801070b0c,0x328002c15b07ff09,0x001ff400fda007f6,0x4844038801170909\n"
".quad 0x5c40308000970cff,0xe24000000500000f,0x001fc400fe2007f1,0x5c98078000a70012\n"
".quad 0x5c98078000b70013,0x5c9807800ff70004,0x001fc400ffa007f6,0x010415b00007f005\n"
".quad 0xe260000008000040,0x5c98078000c70004,0x001fc800fe2007f6,0x5c98078000d70005\n"
".quad 0x4c9807800527000a,0x4c9807800537000b,0x001fd801ffa000ff,0xeede200000070a04\n"
".quad 0xf0f800000007000f,0x1c1001b480070303,0x001fb400fec007f1,0x5c1008000087ff08\n"
".quad 0x1c1ffc97000703ff,0x5b620b800ff70807,0x001fd800ffe007fd,0xe2400fff7300000f\n"
".quad 0xe30000000007000f,0x0404000000070509,0x001fec00fe2007f1,0x4b62038801270907\n"
".quad 0x0105ff000007f014,0x5c9807800ff7000e,0x0040c40007a007f6,0x4ca000080137140f\n"
".quad 0x5c80000000e7040c,0x5080000000670d1b,0x001fc400fea007e1,0x0407f80000071309\n"
".quad 0x010000000017f01a,0x4b62038801470907,0x005c5000fee01031,0x53710d0800270c10\n"
".quad 0x5c9807800ff70018,0x5b70080001071010,0x002178002a2007e6,0x4ca0000801371419\n"
".quad 0x5c80000001871216,0x5b700d0001071a10,0x008174040bc0205e,0x5c8000000107161a\n"
".quad 0x5b710b0001a70c0c,0x5b700d0000c7100c,0x001fc407ffa0205d,0x5b8b03800ff70c87\n"
".quad 0xe24000002080000f,0x4b68038801570907,0x001fd800076007f1,0x5c9807800ff70016\n"
".quad 0x5c80000000c70e10,0x4ca0000801371417,0x0089c80304c00052,0x5c80000001670c14\n"
".quad 0x5c8000000107160c,0x5c80000001470e0e,0x0045740807aa1036,0x5b72090000c70410\n"
".quad 0x5b72090000e70416,0x5b84138001671087,0x003fb000fe2027f6,0x5ca0000000d70f09\n"
".quad 0x36bc03801007098f,0x5ca0000000c70e0c,0x001fc400ffa007f0,0x5c9807800097000d\n"
".quad 0xe32000000001000f,0x36b1038400071387,0x081fc400fe2007f1,0x010585000007f00d\n"
".quad 0x5c9807800ff7000e,0x040fffffffe70c14,0x001fc400fc2007f9,0x0420000000170c10\n"
".quad 0x4ca0000800370d0f,0x5c9807800147000c,0x1000c800fe6407f1,0x5c9807800097000d\n"
".quad 0x5c98078000970011,0x5c80000000e70404,0x000099820620083e,0x5c80000000e7120e\n"
".quad 0x5b72070000470c0c,0x5b72070000471012,0x083fd802fec0103d,0x5b84138001270c87\n"
".quad 0x5ca0000001471016,0x040000000017160c,0x001fc400fd8007f1,0x3664038000170c07\n"
".quad 0x1c1000000017160d,0x50900380e0078007,0x081fd400fcc007f1,0x5c1008000097ff13\n"
".quad 0x1c1ffffffff7160c,0x1c2ffffffff70914,0x001fc400fe2007f1,0x5ca0000000d71612\n"
".quad 0x5ca0000001370913,0x5ca0000001670c10,0x001fd800fc2007f3,0x5ca0000000971411\n"
".quad 0x5c9807800127000c,0x5c9807800137000d,0x0040f40107aa0032,0x5b72070000c7040c\n"
".quad 0x5b7207000107040e,0x5b84138000e70c87,0x001ffc00fe0017f1,0x5ca000000127100c\n"
".quad 0x5ca000000137110d,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff70c07\n"
".quad 0xe24000000680000f,0x5c9807800ff7000c,0x0040c80207a0003d,0x508000000067050d\n"
".quad 0x5b8403800ff70c8f,0x368d03fff0090487,0x001fc400fea017f1,0x5ca0000000c90404\n"
".quad 0x5ca0000000d90509,0x5c9807800049000c,0x007ffc0007a007f6,0x5c9807800099000d\n"
".quad 0x5c80000000c7120c,0xe32000000007000f,0x001fc403ffe0003d,0x5c8000000047120c\n"
".quad 0xe32000000007000f,0x4b62038801670607,0x001fe800fe2007f1,0x5c98078000c70006\n"
".quad 0x5c98078000d70007,0x5c98078000e7000c,0x0000e000ffa007f0,0x5c9807800097000d\n"
".quad 0xe24000000580000f,0x5b74050000c70606,0x0000d800fec017f6,0x1c1000000017060a\n"
".quad 0x5c1008000077ff0b,0x5b79020000a70604,0x001fc002fe20103d,0x5b8403800ff70407\n"
".quad 0x5ca0000000670a06,0x5ca0000000770b07,0x007ff40007a007ff,0xe32000000007000f\n"
".quad 0x5b8a03800ff70407,0xe24000001100000f,0x001fc000fe2007ed,0x5b6303800ff70507\n"
".quad 0x010000000000f006,0x010fff800000f007,0x001ff400fda007fd,0xe32000000000000f\n"
".quad 0x4b69038801770507,0xe24000000d00000f,0x001ff4010620071d,0x3880004690070404\n"
".quad 0x5080000000770507,0x5c9807800ff70006,0x003fc4020640103e,0x5c8000000067060a\n"
".quad 0x537105080027040c,0x010000000007f00a,0x0020f802064007f6,0x0103fe000007f00b\n"
".quad 0x3670053fd8070c10,0x5c80000000c7060a,0x003fd8020440103e,0x5b70030000a71006\n"
".quad 0x5c8000000067040a,0x1c0fff0000070707,0x001fd801fe201032,0x5b71020000a70a0c\n"
".quad 0x5c98078000670004,0x5c98078000770005,0x001fc002fe20103e,0x5b70050000c70404\n"
".quad 0x1c0fcb0000070507,0x5c98078000470006,0x007ffc0007a007ff,0xe32000000007000f\n"
".quad 0x5c70000000470406,0xe32000000007000f,0x001fb000fe2007f6,0x38000000b1470b04\n"
".quad 0x366503807ff70407,0x5c98078000a7000c,0x001fc000ffa007f0,0x5c98078000b7000d\n"
".quad 0xe24000009200000f,0x1c0fffffc0070404,0x081fc400fec007f6,0xe29000003b000000\n"
".quad 0x3828000000670405,0x1d00000001370506,0x001f8800fe8007f1,0x1d00000001070514\n"
".quad 0x1c00000000870104,0x3821038001270609,0x001fc400fe4007f4,0x4c47020000170404\n"
".quad 0x5b69038000971407,0x04000ffffff7040e,0x001f8400fe2007f1,0x5c9807800ff70007\n"
".quad 0x5c9807800007000f,0x0408000000070b10,0x001fd400fe2007f1,0x3828000001470b17\n"
".quad 0x5c9807800ff70004,0x5c98078000e70006,0x001fc000ffa007f0,0x5c9807800ff70005\n"
".quad 0xf0f800000000000f,0x38000000b1470b04,0x001fc400fec007f6,0xe29000002d000000\n"
".quad 0x1c0fffffc0070404,0x3828000000670404,0x001f9400fe2007f5,0x36f806c000b70c16\n"
".quad 0x5c1200000ff70404,0x1c0ffffffff71411,0x001fc400fe2007f1,0x384800000037040d\n"
".quad 0x36f8064000b7ff15,0x5c9807800067000a,0x001f8400fe2007f1,0x5c9807800077000b\n"
".quad 0x5c9807800ff70004,0x5c9807800ff70005,0x001fd800fe2007f1,0x0428000000071616\n"
".quad 0x5c98078001170014,0x1c00000128870d19,0x185fc40007e007f0,0x1c00000000171414\n"
".quad 0xef9500300007190c,0x5b007f8001570c07,0x181fccc0fe2607f1,0x5b007fa801570c1a\n"
".quad 0x5b007f8801570c18,0x5b207f8801570c1b,0x181fd000fc2a07f1,0x5b28038001570c1d\n"
".quad 0x5b30039801a70c1a,0x5b007f8001670c07,0x181fc400fe2007f1,0x5cc00da001871d1b\n"
".quad 0x5c10800001a70404,0x5b007f8801670c18,0x381fd800fc2007f4,0x5b207f8801670c1a\n"
".quad 0x5c10880001b70505,0x5b28038001670c1b,0x001fc440fec007f1,0x5cc00d2001871b1b\n"
".quad 0x5b007fa801670c1a,0x5b30039801a70c18,0x181fcc00fc2007f1,0x5b007f8001570d0c\n"
".quad 0x5c10080001b7ff07,0x5b207f8801570d1a,0x181fd8c0fe2007f1,0x5c10800001870505\n"
".quad 0x5b007f8801570d18,0x5b28060001570d1b,0x081fc400fcc007f1,0x5cc00d2001871b1a\n"
".quad 0x5b007fa801570d1b,0x5b30061801b70d18,0x181fc400fe2607f1,0x5b007f8001670d0c\n"
".quad 0x5c10880001a70707,0x5b007f8801670d1a,0x001fc400fcc607f3,0x5b207f8801670d1b\n"
".quad 0x5b28060001670d1c,0x5cc00da001a71c1b,0x001fc400fe2007fd,0x5b007fa801670d1a\n"
".quad 0x5b30061801a70d0c,0x5c10080001b7ff1a,0x001f9400fe2007f6,0x5c1080000187050d\n"
".quad 0x5c10880000c70718,0x5c1200000147110c,0x081fc400fe2007f1,0x5c10080001a7ff05\n"
".quad 0x1c10000000870a0a,0x3848000000370c07,0x001f8400fe6007f1,0x5b63038000971407\n"
".quad 0x3829000001d70c0c,0x5c10080000b7ff0b,0x001fc800fe2007f6,0x5c10800000e7071a\n"
".quad 0x5c10080000c7ff07,0x5c9807800047000c,0x001ff4001e2007f0,0x1c00000000871919\n"
".quad 0xef5500000007060c,0x5c98078001870004,0x001ff400ffa00ff0,0x5c98078001a70006\n"
".quad 0xe2400fffdc80000f,0xf0f800000007000f,0x001ff400fe0007f1,0x5c98078000a70006\n"
".quad 0x5c98078000b70007,0xf0f800000007000f,0x001fc0001ec007f0,0x0400000003f7170c\n"
".quad 0xef55000000070604,0x5b6503800ff70c0f,0x00063000fe000171,0xef45000001870e16\n"
".quad 0x5b6b03800ff71007,0xef45000001070e0a,0x001fc400362007f0,0x1d00000004090c0d\n"
".quad 0xef45000000890e06,0xe29000001b000000,0x101fc410fc4047f4,0x5c98078001770009\n"
".quad 0x5cf905c000d9ff14,0x5bf804c000c91615,0x001fc480fe8e0ff1,0x5bf805c000c90a05\n"
".quad 0x5cf805c000d90a11,0x5c47020001491509,0x001fc400fca107f1,0x5cf903c000d9ff04\n"
".quad 0x5bf80b4000c9ff17,0x5c4702000059040b,0x001fc400fe2007f1,0x3828000001d70904\n"
".quad 0x5cf803c000d90607,0x5bf8054000c9ff0c,0x001fc400fc4007f3,0x5c47020001191716\n"
".quad 0x0400000000170404,0x5c47020000c9070a,0x001fc400fe4007f1,0x36f80b400027ff05\n"
".quad 0x3828000001e70b06,0x5b6503800ff7040f,0x201fc400fc2007f1,0x36f804c00027160d\n"
".quad 0x5bdf7f8020470909,0x38f905c003e7ff0e,0x001fc400fe2007f1,0x5c4702000067050c\n"
".quad 0x36f805c000270a07,0x36f805400027ff06,0x001fc000fc4007f1,0x04000ffffff70f0a\n"
".quad 0x5c1200000ff00909,0x5c47020000e70d05,0x003ff400fe0000fd,0xef54000000070a09\n"
".quad 0x5c98078000c70004,0xf0f800000001000f,0x001fd400fe2007f1,0x5c1180000067ffff\n"
".quad 0x5c4707000077ff07,0x5c4707000047ff04,0x001f8400fea007f1,0x5c1088000077ff07\n"
".quad 0x5c4707000057ff05,0x5c1088000047ff04,0x001fc000fe8007f1,0x5c1200000ff70606\n"
".quad 0x0448000000071010,0x5c1008000057ff05,0x001fc800fe0007f6,0xf0f800000007000f\n"
".quad 0x5b44028000570409,0xe290000009000000,0x005fd801fec0003d,0x5c3000000097000a\n"
".quad 0x364a02800207ff09,0x38c2050001f70909,0x001fc400ffa007ed,0x5b6503800ff70907\n"
".quad 0xf0f800000000000f,0x1d0000000407090b,0x301fc400fe8407f1,0x5bf802400097ff0a\n"
".quad 0x5bf802c00097040c,0x5cf803c000b70604,0x001fc000fc2007f5,0x5cf903c000b7ff05\n"
".quad 0x5c47020000a70404,0x5c47020000c70505,0x001fc400fe0007fd,0xf0f800000007000f\n"
".quad 0x0102168c2357f007,0xe29000001f000000,0x081fc4c0fe2007f5,0x010c90fdaa27f00a\n"
".quad 0x5b007f8000770406,0x5b007f8000a7040f,0x181fc800fc2607f1,0x5b007f880077040b\n"
".quad 0x5b207f880077040c,0x5b007fa800a7040e,0x181fc4c0fe2607f1,0x5b2803000077040d\n"
".quad 0x5b007f8800a70411,0x5b207f8800a70414,0x001fc400fc2007f1,0x5b28078000a70416\n"
".quad 0x5b007f8000770515,0x5b30079800e7040e,0x181fc4c0fe2007f1,0x5cc0062000b70d0b\n"
".quad 0x5b007fa800770517,0x5b007f880077050c,0x281fc400fc2007f1,0x5cc00a2001171614\n"
".quad 0x5b207f880077050f,0x5b280a8000770511,0x001fcc40fe2007f1,0x5c10800000e70b0b\n"
".quad 0x5b300a980177050d,0x5b007f8000a70515,0x001fc400fc2007f1,0x5cc007a000c7110e\n"
".quad 0x5c1008000147ff0c,0x5c10800000d70b0b,0x181fc4c0fe2607f1,0x5b007f8800a7050d\n"
".quad 0x5b207f8800a7050f,0x5b280a8000a70514,0x001fc400fc6007f2,0x5b007fa800a70516\n"
".quad 0x5c10880000e70c0a,0x5cc007a000d7140d,0x001fd800fe2007f5,0x5b300a9801670505\n"
".quad 0x5c10080000d7ff0c,0x5c10800000570a0a,0x001fc400fcc007f1,0x5c10080000c7ff05\n"
".quad 0x1c1ffffffff70aff,0x5b630b800ff70507,0x001fc000fec207f6,0x5b007fa800770407\n"
".quad 0x5b30031800770406,0x5c98078000a70004,0x001fd800fec007fd,0xf0f800000000000f\n"
".quad 0x5c108000006706ff,0x5c10880000b70bff,0x001fc000fea007f1,0x5c10880000470404\n"
".quad 0x1c00000000170909,0x5c10080000570505,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170404,0x5c1008000057ff05,0x001fd000fe2807f1,0x38f802c000a70404\n"
".quad 0x38f902c000a7ff06,0x010001000007f007,0x001fc400fea007e1,0x1c10000000170405\n"
".quad 0x1d0000003fe70904,0x5c1008000067ff06,0x001fc840fe8607f1,0x5b007f8000770409\n"
".quad 0x5b007fa800770407,0x38f803400017050a,0x001fd800fe6007e1,0x5b30049800770405\n"
".quad 0x38f903400017ff04,0x5c10800000a7ff0c,0x001fc400fec007f6,0x5c10080000470505\n"
".quad 0x5c4702000107050d,0x5c98078000c70004,0x001ffc00ffe007f0,0x5c98078000d70005\n"
".quad 0xe32000000007000f,0xe2400fffff87000f,0x001f8000fc0007e0,0x50b0000000070f00\n"
".quad 0x50b0000000070f00,0x50b0000000070f00,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001fb000fe2007f6,0x5b30011800370003\n"
".quad 0x4b68038800070307,0x4c47020000170102,0x001fc000ffa007f0,0x04000ffffff70200\n"
".quad 0xe30000000000000f,0x010709ad4e57f009,0x181fc4c0fe2007f6,0xe290000087000000\n"
".quad 0x5b007f8000970304,0x5b027f8800970305,0x001f9800fec607f4,0x5b2f7f8800970306\n"
".quad 0x5b29020000970304,0x5cc0032000570404,0x001fd000fe2207f1,0x3829000000d70405\n"
".quad 0x010ffffb7407f006,0x4b63038800170307,0x001f84c0fe2007f6,0x5bdf7f8010570404\n"
".quad 0x5b00018000670405,0x5b007fa800670406,0x001fd040fe2007f5,0x010151d07eb7f00a\n"
".quad 0x5b30029800670405,0x1c0ffffff4080404,0x181fd4c1fe20003d,0x5cb8000000472b08\n"
".quad 0x5b007f8000a70504,0x5b027f8800a70506,0x001fd840fec007e1,0x5b29020000a70507\n"
".quad 0x5b2f7f8800a70504,0x5cc0022000670704,0x001fd000fe2207f1,0x3829000000370406\n"
".quad 0x010ffffff9f7f007,0x3663038246070507,0x081fd8c0fe2007e6,0x5bdf7f8010670404\n"
".quad 0x5b00028000770405,0x5b007fa800770406,0x001fb400fea207f1,0x5b30029800670405\n"
".quad 0x1c0ffffff4080404,0x3663038006070507,0x001f84000a2007ff,0x1c0ffffff4080505\n"
".quad 0x5cb8000000472b06,0x3848000000470318,0x003c7c04e3c007ff,0x3828000001c70319\n"
".quad 0x4c80000800270606,0x5c80000000670606,0x0020fc0623c0027d,0x5cb8000000572b0a\n"
".quad 0x4c80000800270804,0x5b70030000470406,0x003fd8020640483e,0x4c80000800270a04\n"
".quad 0x5b70030000470416,0x4c10800005071804,0x0040f400f62007f2,0x4c10080005171905\n"
".quad 0xeed6200000070404,0x4b84038800471607,0x001fc800fe001ffd,0xe24000002600000f\n"
".quad 0x010415b00007f000,0xe290000011800000,0x001fc400ea210030,0x3880003ff8070402\n"
".quad 0x5080000000670000,0x010000000007f00a,0x009fc401ffa007f1,0x0103ff000007f00b\n"
".quad 0x010000000017f004,0x5c98078000070005,0x003c54402a601705,0x4c80000c00070202\n"
".quad 0x377005415b070408,0x4c80000c00270202,0x00847801e2a02153,0x5b7004000087080a\n"
".quad 0x4c80000c00270202,0x5b70020000a70404,0x0040c40207c0083e,0x5c80000000470208\n"
".quad 0x377001415b07080a,0x5b70040000a70404,0x001fd802fec007e7,0x4843038800670300\n"
".quad 0x328002c15b07ff08,0x4844038800770809,0x001fc400ffa007ed,0x5c403080009700ff\n"
".quad 0xf0f800000000000f,0x5c9807800ff70008,0x001fc400ffa007f6,0x010415b00007f009\n"
".quad 0xe26000005b800040,0x5c98078000a70004,0x001fc000ffa007f0,0x5c98078000b70005\n"
".quad 0xf0f800000007000f,0x010415b00007f000,0x001d4400060007f2,0xe290000011000000\n"
".quad 0x3880003ff8070602,0x5080000000670000,0x003ff400fe2007f1,0x010000000007f008\n"
".quad 0x0103ff000007f009,0x010000000017f006,0x08054c02e0a027f1,0x5c98078000070007\n"
".quad 0x4c80000c00070202,0x377004415b070608,0x003c5404e6600f15,0x4c80000c00270202\n"
".quad 0x5b70040000870808,0x4c80000c00270202,0x0040f80107c0111e,0x5b7003000087060c\n"
".quad 0x5c80000000270c08,0x377001415b070806,0x005fd800fce01031,0x5b70040000670c06\n"
".quad 0x4843038800670300,0x328003c15b07ff08,0x001ff400fda007f6,0x4844038800770809\n"
".quad 0x5c403080009700ff,0xf0f800000000000f,0x001ff400fec007f1,0x5c9807800ff70008\n"
".quad 0x010415b00007f009,0xe260000049000040,0x001ff400fe0007f1,0x5c98078000a70006\n"
".quad 0x5c98078000b70007,0xf0f800000007000f,0x001ff800060007fd,0xf0f800000007000f\n"
".quad 0x3880004008071608,0xe29000000f000000,0x0040f80007a017f0,0x1c0fcb000007090a\n"
".quad 0x508000000077090b,0x5c80000000a70a0e,0x001fd801fe201032,0x537107080087080c\n"
".quad 0x010000000007f00e,0x0103fe000007f00f,0x0040c40107c01032,0x3670073fd8070c10\n"
".quad 0x5c80000000c70a0c,0x5b70050000c71012,0x001fc402062007e7,0x4b62038800a70a07\n"
".quad 0x5c8000000127080e,0x1c0fff0000071303,0x001fdc02062007f6,0x5c98078001270010\n"
".quad 0x5b71040000e70e0c,0x5c98078000370011,0x001fd803ffa0103d,0x5b70070001070c10\n"
".quad 0xf0f800000000000f,0x5c98078000d7000b,0x001fc000fe2107fd,0xe26000006e800040\n"
".quad 0x5c98078000a70010,0x5c98078000b70011,0x001ff800060007fd,0xf0f800000007000f\n"
".quad 0x4c80000c00271008,0xe29000000d000000,0x001fc400fe2017f1,0x5b6503800ff70807\n"
".quad 0x0407fffffff70903,0x5c9807800087000a,0x001c6000fda007fa,0x5c9807800097000b\n"
".quad 0x4b65000800b70307,0x5c80000000a0ff0a,0x001f98020620083d,0x4c80000800c70a08\n"
".quad 0x5cb0000000871e03,0x0407fe0000070b0c,0x0000fc021fe007ff,0x4b62038801470c07\n"
".quad 0xef54000000070003,0x5cb8000000372b08,0x008548042bc0115e,0x4b71050800e7080e\n"
".quad 0x4b7107080107080e,0x4b71070801270808,0x0002f420ffa03ffd,0xf0f800000000000f\n"
".quad 0xe26000007c000040,0xef44000000070003,0x001fd820fe000ffd,0xf0f800000007000f\n"
".quad 0x1c00000000170312,0xe290000022000000,0x001fc040fe8007f6,0x0400000000171200\n"
".quad 0x3848000000670013,0x3664038000170007,0x00014400fe000031,0xef9500312a871314\n"
".quad 0x01020fd81647f002,0xef9500312b071310,0x000268000e2107f0,0x010bda8ff837f003\n"
".quad 0xef9500312b87130c,0xef9500312c07130e,0x0014f800fe2007e1,0x4ca000080157020a\n"
".quad 0x4ca000080167030b,0x5c80000000870802,0x0040d8442e40115e,0x5b700a0000a7020a\n"
".quad 0x5b70080000a7020a,0xef9500312c871310,0x020cf8040ac24292,0x5b70060000a7020c\n"
".quad 0xef9500312d07130a,0x5b70070000c7020c,0x001fd800fe201141,0x5b70080000c7020c\n"
".quad 0x5b6503800ff70007,0x040000000027120e,0x0105c8022e802152,0x5b70050000c7020c\n"
".quad 0x388000415b07160a,0x5080000000670b00,0x028a4800fee02281,0x5b70040000c70808\n"
".quad 0x5b6503800ff70e0f,0x5370060800880208,0x021cc408fea027f1,0x010000000017f00c\n"
".quad 0x5c9807800007000d,0x37707fbff0090808,0x00c558084c40027e,0x5371060800870a02\n"
".quad 0x5b7001000027020e,0x3871003ff0070802,0x0305780433c04392,0x5b70060000e70c0e\n"
".quad 0x4c80000c00070208,0x5c80000000e7080c,0x001fdc042a20215e,0x5b71040000c70a02\n"
".quad 0x5b70060000270e0c,0x4843038800670900,0x001fb400fcc027f6,0x5980068000b7ff02\n"
".quad 0x4844038800770202,0x5c403080002700ff,0x001fc400fe200ffd,0xf0f800000000000f\n"
".quad 0x5c98078000870002,0x5c98078000970003,0x001ff400fec007f1,0x5c98078000a70008\n"
".quad 0x5c98078000b70009,0xe260000007000040,0x001ff400fe0007f1,0x5c98078000a7000c\n"
".quad 0x5c98078000b7000d,0xf0f800000007000f,0x007ff40006440031,0x5c80000000c70404\n"
".quad 0x5c80000000c70606,0xf0f800000007000f,0x0003c400fe4007f6,0x4c10800005271802\n"
".quad 0x4c10080005371903,0xeede200000070204,0x001fc400fec007ff,0xe30000000007000f\n"
".quad 0x0404000000070900,0x4b62038801770007,0x001fd800ff6007f1,0x0105ff000007f016\n"
".quad 0x5c9807800ff7000a,0x4ca000080187160b,0x0040c400fe00003d,0x5c80000000a7080c\n"
".quad 0x0407f80000070300,0x5080000000670d13,0x0040c400fe2007f5,0x010000000017f012\n"
".quad 0x4b62038801970007,0x5371090800870c0e,0x0040d400fc2007fb,0x5c9807800ff70010\n"
".quad 0x4ca0000801871611,0x5b70070000e70e14,0x0080f8030bc00853,0x5c8000000107020e\n"
".quad 0x5b70090001471210,0x5c80000001070e12,0x0040f40207a0103e,0x5b71070001270c0c\n"
".quad 0x5b70090000c7100c,0x5b8b03800ff70c87,0x001fc400fe201ffd,0xe24000001f00000f\n"
".quad 0x4b68038801a70007,0x5c9807800ff7000e,0x00014800fec0003b,0x5c80000000c70a10\n"
".quad 0x4ca000080187160f,0x5c80000000e70c14,0x2840d8044e401826,0x5c80000001070e0c\n"
".quad 0x5c80000001470a0a,0x5b72010000c7080e,0x00bfd8022ba0403d,0x5b72010000a70810\n"
".quad 0x5b84138001070e87,0x5ca0000000d70b0b,0x001ff400fe0007ed,0x36bc038010070b8f\n"
".quad 0x5ca0000000c70a0a,0xe32000000001000f,0x001fec00fe2007f1,0x36b1038400070387\n"
".quad 0x010585000007f000,0x5c9807800ff7000c,0x001f9040fe2007f1,0x4ca000080097000d\n"
".quad 0x0420000000170a00,0x040fffffffe70a0a,0x003fc40006440031,0x5c80000000c70808\n"
".quad 0x5c80000000c70202,0x5c9807800007000c,0x0000f582062007f5,0x5c98078000b7000d\n"
".quad 0x5b72010000870a0e,0x5b72010000870c0c,0x081fd803fcc0103d,0x5b84138000c70e87\n"
".quad 0x5ca0000000a7000f,0x0400000000170f00,0x001fc400fd8007f1,0x3664038000170007\n"
".quad 0x1c10000000170f0c,0x50900380e0078007,0x001f9400fec007f1,0x5c10080000b7ff0d\n"
".quad 0x1c1ffffffff70f00,0x1c2ffffffff70b0a,0x001fc400fe2007f1,0x5ca0000000c70f0e\n"
".quad 0x5ca0000000f7000c,0x5ca0000000d70b00,0x001f9800fe4007f3,0x5ca0000000b70a0d\n"
".quad 0x5c98078000e7000a,0x5c9807800007000b,0x0040f40107a00022,0x5b72010000a7080a\n"
".quad 0x5b72010000c70808,0x5b84138000870a87,0x001ffc00fe0017f1,0x5ca0000000e70c0a\n"
".quad 0x5ca0000000070d0b,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff70c07\n"
".quad 0xe24000000680000f,0x5c9807800ff7000a,0x0040c80207a0003d,0x508000000067090b\n"
".quad 0x5b8403800ff70a8f,0x368d03fff0090887,0x001fc400fea017f1,0x5ca0000000a90800\n"
".quad 0x5ca0000000b9090d,0x5c9807800009000a,0x007ffc0007a007f6,0x5c98078000d9000b\n"
".quad 0x5c80000000a7020a,0xe32000000007000f,0x001fc403ffe0003d,0x5c8000000087020a\n"
".quad 0xe32000000007000f,0x4b62038801b70a07,0x001fc000ff6007f1,0x5c98078000c7000a\n"
".quad 0x5c9807800127000c,0x5c9807800037000d,0x005fd800070007fd,0xe24000000500000f\n"
".quad 0x5b74070000c70a0a,0x1c10000000170a0c,0x0040f40006c007f6,0x5c10080000b7ff0d\n"
".quad 0x5b79040000c70a08,0x5b8403800ff70807,0x001ffc00fe0017f1,0x5ca0000000a70c0a\n"
".quad 0x5ca0000000b70d0b,0xe32000000007000f,0x001fb403ffa0003d,0x5b8a03800ff70807\n"
".quad 0xe24000001080000f,0x5b6303800ff70907,0x001ff400fe0007f1,0x010000000000f00a\n"
".quad 0x010fff800000f00b,0xe32000000000000f,0x001c7400ffa007ed,0x4b69038801c70907\n"
".quad 0xe24000000c80000f,0x3880004690070808,0x0040f800ffa00831,0x508000000077090b\n"
".quad 0x5c9807800ff7000a,0x5c80000000a70a0e,0x001fd801fe201032,0x537107080087080c\n"
".quad 0x010000000007f00e,0x0103fe000007f00f,0x0040f80107c01032,0x3670073fd8070c10\n"
".quad 0x5c80000000c70a0c,0x5b70050000c7100a,0x0040c800fee01021,0x5c80000000a7080e\n"
".quad 0x1c0fff0000070b03,0x5b71040000e70e0c,0x0040f800fec00ff1,0x5c98078000a70008\n"
".quad 0x5c98078000370009,0x5b70070000c70808,0x001ffc00fe0017f1,0x1c0fcb000007090b\n"
".quad 0x5c9807800087000a,0xe32000000007000f,0x001fd803ffe0003d,0x5c7000000087080a\n"
".quad 0xe32000000007000f,0x38000000b1470b03,0x001fc000ffa007ed,0x366503807ff70307\n"
".quad 0xe24000009600000f,0x1c0fffffc0070303,0x081fc400fec007f6,0xe29000003c800000\n"
".quad 0x3828000000670308,0x1d00000001370809,0x001f8800fe8007f1,0x1d00000001070812\n"
".quad 0x1c00000000870103,0x382103800127090f,0x001fc400fe4007f4,0x4c47020000170303\n"
".quad 0x5b69038000f71207,0x04000ffffff70310,0x001f8400fe2007f1,0x5c98078000270011\n"
".quad 0x5c9807800ff70009,0x5c98078000a7000c,0x001fc440fe2007f1,0x5c98078000b7000d\n"
".quad 0x0408000000070b0e,0x5c98078001070008,0x001fc000fe6007f1,0x3828000001470b1e\n"
".quad 0x5c9807800ff70002,0x5c9807800ff70003,0x001fd800fe0007fd,0xf0f800000000000f\n"
".quad 0x38000000b1470d02,0xe29000002d800000,0x001fc400fec007f6,0x1c0fffffc0070202\n"
".quad 0x3828000000670202,0x5c1200000ff70202,0x001fc400fc8007f1,0x36f805c000b70a0d\n"
".quad 0x1c0ffffffff71212,0x384800000037020c,0x001fc400fe2007f1,0x36f8054000b7ff13\n"
".quad 0x5c9807800087000a,0x5c9807800097000b,0x001fc400fc2007f1,0x5c9807800ff70002\n"
".quad 0x5c9807800ff70003,0x0428000000070d15,0x001fc000fec007f1,0x5c98078001270014\n"
".quad 0x1c00000128870c20,0x1c00000000171414,0x181fc4c2fe20003f,0xef9500300007200c\n"
".quad 0x5b007f8001370c09,0x5b007fa801370c1b,0x181fc8c0fe2207f1,0x5b007f8001570c1a\n"
".quad 0x5b007f8801370c1f,0x5b207f8801370c22,0x181fc440fe2007e1,0x5b28048001370c24\n"
".quad 0x5b30049801b70c21,0x5b007f8801570c1c,0x001fc4c0fe2607f1,0x5b207f8801570c1b\n"
".quad 0x5b280d0001570c1d,0x5b007fa801570c23,0x001fc800fe2007e1,0x5b007f8001370d09\n"
".quad 0x5cc0112001f7241f,0x5c10800002170202,0x181fc400fe2007f1,0x5cc00da001c71d21\n"
".quad 0x5b300d1802370c0c,0x5b007f8801370d1b,0x001fc440fe2007e1,0x5b207f8801370d1c\n"
".quad 0x5b28048001370d1d,0x5c10880001f7031a,0x001fc400fe2007f4,0x5b007f8001570d03\n"
".quad 0x5cc00e2001b71d1c,0x5c1008000217ff1b,0x181fc4c0fe2007e1,0x5c10800000c71a0c\n"
".quad 0x5b007f8801570d1a,0x5b207f8801570d1d,0x001fc400fea207f1,0x5b28018001570d1f\n"
".quad 0x5b007fa801370d22,0x5cc00ea001a71f1f,0x081fd040fe2007e1,0x5c10880001c71b1a\n"
".quad 0x5b007fa801570d1d,0x5b30049802270d09,0x001fd800fe2007f1,0x5c10080001f7ff1b\n"
".quad 0x5b30019801d70d0d,0x5c10800000970c03,0x001f84001e2007f0,0x5c10880000d71a0c\n"
".quad 0xef55000000070802,0x5c1200000147121a,0x001fc400fe2007f4,0x5b63038000f71407\n"
".quad 0x5c10080001b7ff0d,0x1c10000000870a0a,0x001f8400fe8207f1,0x3848000000371a09\n"
".quad 0x3829000001d71a1b,0x5c10080000b7ff0b,0x003fc400fe2007f1,0x5c1080000107091a\n"
".quad 0x1c00000000872020,0x5c98078000c70002,0x001fc000fe2007f3,0x5c98078000d70003\n"
".quad 0x5c10080001b7ff09,0x5c98078001a70008,0x001fc400ffa007f6,0xe2400fffdc80000f\n"
".quad 0xf0f800000007000f,0x5c98078000a70008,0x001fc000ffa007f0,0x5c98078000b70009\n"
".quad 0xf0f800000007000f,0x0400000003f71e0f,0x0005c400fe0000f6,0xef55000000070802\n"
".quad 0x5b6503800ff70f0f,0xef4500000107100a,0x0006c400318007f0,0x5b6b03800ff70e07\n"
".quad 0xef4500000187100c,0xef45000000891008,0x021f8408fe2007f1,0xe29000001d000000\n"
".quad 0x5c98078000b7001c,0x5c98078000c70014,0x001fd000fe2007f1,0x5c98078000d70015\n"
".quad 0x1d00000004090f0b,0x5c98078000a7001a,0x003f8500fe2407f1,0x5bf80ac000f91412\n"
".quad 0x5cf90e4000b9ff0c,0x5bf80e4000f91a03,0x001fc400fe2507f4,0x5cf904c000b9ff02\n"
".quad 0x5c47020000c91215,0x5bf80a4000f9ff0d,0x001f8400fe6007f1,0x5cf80e4000b91a0a\n"
".quad 0x5c4702000039021c,0x3828000001d71502,0x001fcc00fe2007f1,0x5cf804c000b90809\n"
".quad 0x5c47020000a90d14,0x5bf80d4000f9ff0a,0x001f8400fe2007f1,0x0400000000170202\n"
".quad 0x3828000001e71c08,0x36f80a400027ff03,0x001fc400fe2007f3,0x5c47020000a9091a\n"
".quad 0x5b6503800ff7020f,0x36f80ac00027140c,0x001f8400fe2007f1,0x38f90e4003e7ff0d\n"
".quad 0x5c47020000870309,0x5bdf7f8020271508,0x001fc400fe2007f3,0x36f80e4000271a0b\n"
".quad 0x5c47020000d70c03,0x04000ffffff7110d,0x0003f400fe0007f2,0x5c1200000ff00808\n"
".quad 0x36f80d400027ff0a,0xef54000000070d08,0x001fc401ffa007f0,0x5c98078000970002\n"
".quad 0xf0f800000001000f,0x5c11800000a7ffff,0x001fc400fea007f1,0x5c47070000b7ff08\n"
".quad 0x5c4707000027ff02,0x5c1088000087ff0b,0x001fc400fc2007f5,0x5c4707000037ff03\n"
".quad 0x5c1088000027ff02,0x5c1200000ff70a0a,0x001fd800fe0007f4,0x0448000000070e0e\n"
".quad 0x5c1008000037ff03,0xf0f800000007000f,0x0000f400fe4007f0,0x5b44018000370208\n"
".quad 0xe290000008800000,0x5c30000000870009,0x001fb402fec00ff6,0x364a01800207ff08\n"
".quad 0x38c2048001f70808,0x5b6503800ff70807,0x101fc400fe2007fd,0xf0f800000000000f\n"
".quad 0x1d00000004070809,0x5bf801400087ff0c,0x001fd580fe2007f4,0x5bf801c00087020d\n"
".quad 0x5cf805c000970a02,0x5cf905c00097ff03,0x001ff400fe0007e1,0x5c47020000c70202\n"
".quad 0x5c47020000d70303,0xf0f800000007000f,0x001fd400fe2007f0,0x0102168c2357f00b\n"
".quad 0xe29000001f800000,0x010c90fdaa27f00c,0x181fc440fe2607f1,0x5b007f8000b70209\n"
".quad 0x5b007f8000c70211,0x5b007f8800b7020a,0x181fc4c0fe4007e1,0x5b207f8800b7020d\n"
".quad 0x5b007fa800c70210,0x5b28048000b7020f,0x001fc4c0fe2607f1,0x5b007f8800c70212\n"
".quad 0x5b207f8800c70213,0x5b28088000c70214,0x001fc400fe2007e1,0x5b007f8000b70315\n"
".quad 0x5b30089801070210,0x5cc006a000a70f0a,0x001fc4c0fe2607f1,0x5b007fa800b7031b\n"
".quad 0x5b007f8800b7030d,0x5cc009a001271414,0x001fc540fe2007e1,0x5b207f8800b70312\n"
".quad 0x5b280a8000b70313,0x5c10800001070a0a,0x001fc400fe6207f1,0x5b300a9801b7030f\n"
".quad 0x5b007f8000c70311,0x5cc0092000d71310,0x181fc400fe2007e1,0x5c1008000147ff0d\n"
".quad 0x5c10800000f70a12,0x5b007f8800c7030a,0x001fd4c0fe2607f1,0x5b207f8800c7030f\n"
".quad 0x5b28088000c70314,0x5b007fa800c7030c,0x001fd400fe2007e1,0x5cc007a000a7140f\n"
".quad 0x5c10880001070d0a,0x5b30089800c70303,0x001fc400fec007f1,0x5c10080000f7ff0c\n"
".quad 0x5c10800000370a0a,0x5c10080000c7ff03,0x081fd800fe2007e6,0x1c1ffffffff70aff\n"
".quad 0x5b630b800ff70307,0x5b007fa800b7020b,0x001ff400fe0007f6,0x5b30049800b70209\n"
".quad 0x5c98078000a70002,0xf0f800000000000f,0x001fd800fec007f1,0x5c9807800127000a\n"
".quad 0x5c108000009709ff,0x5c10880000a70aff,0x001fc000fea007f1,0x5c10880000270202\n"
".quad 0x1c00000000170808,0x5c10080000370303,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170202,0x5c1008000037ff03,0x001fd000fe2807f1,0x38f801c000a70202\n"
".quad 0x38f901c000a7ff0a,0x010001000007f009,0x001fc400fea007e1,0x1c10000000170203\n"
".quad 0x1d0000003fe70802,0x5c10080000a7ff08,0x001fc840fe8607f1,0x5b007f800097020b\n"
".quad 0x5b007fa800970209,0x38f804400017030a,0x001fd800fe6007e1,0x5b30059800970203\n"
".quad 0x38f904400017ff02,0x5c10800000a7ff0a,0x001fc400fec007f6,0x5c10080000270303\n"
".quad 0x5c47020000e7030b,0x5c98078000a70008,0x001ffc00ffe007f0,0x5c98078000b70009\n"
".quad 0xe32000000007000f,0xe2400fffff87000f,0x001c7c00e22007f6,0x4c98078000870001\n"
".quad 0xf0c8000002170000,0xf0c8000002570002,0x001fd840fec20ff1,0x4e00000000270200\n"
".quad 0x4f107f8000270203,0x5b30001800370200,0x001fd800ffa007ed,0x36680397fff70007\n"
".quad 0xe30000000000000f,0x010aaaaaaab7f005,0x181fd0c0fe2607f1,0x5b007f8000570002\n"
".quad 0x5b007f8800570003,0x5b207f8800570004,0x001fd400fc2007f6,0x5b28010000570002\n"
".quad 0x5cc0022000370202,0x010fffffa007f008,0x001fc400fe2007f1,0x3828000000a70207\n"
".quad 0x010fffffa007f003,0x38f9014002a7ff02,0x181fc400fc4007f3,0x010fffffa007f004\n"
".quad 0x5b007f8000870709,0x5b007f800037020b,0x081fc4c0fe2007f1,0x5b007fa80037020c\n"
".quad 0x5b007f8000470705,0x5b007fa800470706,0x081fc400fc2607f1,0x5b007f8800870703\n"
".quad 0x5b28048000870709,0x5b207f8800870708,0x001fc840fe2007f2,0x5b30059800c70204\n"
".quad 0x5b30029800670702,0x5c1200000ff70705,0x001fc400fc6007f3,0x5cc0042000370903\n"
".quad 0x5c10800000270008,0x5cc0020000370503,0x001fc440fe8007f1,0x010000090007f004\n"
".quad 0x36007f8900070702,0x5c1008000037ff09,0x081fc400fc2207f1,0x5b007f8800470703\n"
".quad 0x3628010900070705,0x5b207f8800470704,0x001fc500fe2007f2,0x3620011900070702\n"
".quad 0x38f804c000570806,0x010000000c07f00d,0x001fc800fc2007f1,0x38f904c00057ff07\n"
".quad 0x010000000c07f00c,0x5cc0022000370503,0x081fc400fe2207f1,0x36007f800c07060b\n"
".quad 0x4cc0840800070202,0x5b207f8800d7060a,0x081fc400fc2007f1,0x36f803400057ff04\n"
".quad 0x36f803c00057060d,0x5b007f8800c70608,0x001fc400fe2207f1,0x36007f800c070605\n"
".quad 0x36007f800c07070c,0x362805800c07060b,0x001fc400fc2007f1,0x5cc104800ff70303\n"
".quad 0x5c11800000470202,0x5c47070000d7ff04,0x001fcc00fe2007f1,0x362002900c070605\n"
".quad 0x362006100c070707,0x5cc0052000870b06,0x001fd800fc4007f1,0x5c10080000470304\n"
".quad 0x5c10800000570203,0x5cc003800067ff02,0x001fc840fec007f1,0x5c10080000270404\n"
".quad 0x4bd7818005070302,0x1a1f020005170303,0x001fc800fcc00771,0xeed5200000070202\n"
".quad 0x4bd7818005270004,0x1a1f7f8005370005,0x001ffc00ffe040f1,0xeedd200000070402\n"
".quad 0xe30000000007000f,0xe2400fffff87000f,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001f8440fe2007f6,0x5b30011800370007\n"
".quad 0x3848000000470700,0x3828000001c70703,0x081fc440fec007f4,0x5b6503800ff70707\n"
".quad 0x4c10800005070004,0x4c10080005170305,0x001fd800fe0007f6,0x4c10800005270002\n"
".quad 0x4c10080005370303,0xe24000007380000f,0x001fc000fd8007f1,0x4b68038800070707\n"
".quad 0x4c47020000170108,0x04000ffffff70800,0x001fd800fe0007fd,0xe30000000000000f\n"
".quad 0x010709ad4e57f00c,0xe29000003e000000,0x181fd0c0fe2607f1,0x5b007f8000c70706\n"
".quad 0x5b027f8800c70709,0x5b2f7f8800c7070a,0x081fd800fcc007f6,0x5b29030000c7070b\n"
".quad 0x5cc0052000970b06,0x3829000000d70609,0x001fd800fea007f1,0x5bdf7f8010970609\n"
".quad 0x0102aaaaaab7f006,0x384800000017090b,0x181fd000fc2607f1,0x5b007f8000670b0c\n"
".quad 0x5b027f8800670b0a,0x5b2f7f8800670b0d,0x081fd800fec007fd,0x5b29060000670b0c\n"
".quad 0x5cc006a000a70c0a,0x3829000000570a0c,0x001f9800fec007f6,0x5bdf7f8010c70a0a\n"
".quad 0x5c1200000ff70a0a,0x360005800c070a0c,0x0000f400fe8007f6,0x362006100c070a0a\n"
".quad 0x5cc2058000970a0a,0x5cb8000000a72b0e,0x001fc4c0fe200ff6,0x010ffffb7407f00a\n"
".quad 0x5b00038000a70907,0x5b007fa800a7090a,0x181fc400fec007e5,0x010151d07eb7f00c\n"
".quad 0x5b30039800a70907,0x5b007f8000c70709,0x001fd8c0fe2607f5,0x5b027f8800c7070a\n"
".quad 0x5b29048000c7070b,0x5b2f7f8800c70709,0x001ff440fec007e6,0x5cc004a000a70b09\n"
".quad 0x382900000037090a,0x5bdf7f8010a70909,0x181fc4c0fe2007f6,0x384800000017090b\n"
".quad 0x5b007f8000670b0c,0x5b027f8800670b0a,0x001fd800fcc607f4,0x5b2f7f8800670b0d\n"
".quad 0x5b29060000670b0c,0x5cc006a000a70c0a,0x001fd800fec207f6,0x3829000000570a0c\n"
".quad 0x5bdf7f8010c70a0a,0x5c1200000ff70a0a,0x001ffc00fcc207f6,0x360005800c070a0c\n"
".quad 0x362006100c070a0a,0x5cc2058000970a0a,0x181fc401fec0005d,0x5cb8000000a72b0c\n"
".quad 0x010ffffff9f7f00a,0x5b00038000a70907,0x001fd800fec207f6,0x5b007fa800a7090a\n"
".quad 0x5b30039800a70907,0x3848000000170709,0x181fc4c0fea007e1,0x5b007f800067090b\n"
".quad 0x5b027f880067090a,0x5b29058000670910,0x081fd800fec007f6,0x5b2f7f880067090b\n"
".quad 0x5cc005a000a71006,0x382900000057060b,0x281fd800fcc007e6,0x5bdf7f8010b70606\n"
".quad 0x5c1200000ff70606,0x360004800c07060b,0x00817800fe2007f6,0x362005900c070606\n"
".quad 0x5cc2048000770606,0x4c80000800270c0a,0x0145780073a0205f,0x5c80000000a70a0c\n"
".quad 0x5cb8000000672b10,0x4c80000800270e06,0x008578122bc0215f,0x5b7006000067060c\n"
".quad 0x4c80000800271006,0x5b70060000670618,0x001ff4020640283d,0x388000400807180a\n"
".quad 0x5080000000770b0d,0x1c0fcb0000070b0c,0x003f84020640103e,0x5c80000000c70c10\n"
".quad 0x5371080800470a06,0x010000000007f010,0x0020f802064007f6,0x0103fe000007f011\n"
".quad 0x3670083fd807060e,0x5c80000000670c06,0x001fd401f6201032,0x5b70060000670e14\n"
".quad 0xeed6200000070404,0x4b62038800170c07,0x001fd800fe201021,0x5c80000001470a10\n"
".quad 0x1c0fff0000071509,0x5c98078001470012,0x0040f400fee01031,0x5b7105000107100e\n"
".quad 0x5c98078000970013,0x5b70080001270e12,0x041ff400fec01ffd,0xf0f800000000000f\n"
".quad 0x5c98078000f7000d,0xe260000091800040,0x001ff400fe0007f1,0x5c98078000c70012\n"
".quad 0x5c98078000d70013,0xf0f800000007000f,0x005fc400ffc00030,0x4c80000c0027120a\n"
".quad 0xe29000000e000000,0x5b6503800ff70a07,0x001fe800fe2007f1,0x0407fffffff70b09\n"
".quad 0x5c98078000a7000c,0x5c98078000b7000d,0x0020f400e30007ed,0x4b65000800670907\n"
".quad 0x5c80000000c0ff0c,0x4c80000800870c0a,0x001ffc00fcc01031,0x5cb0000000a71e09\n"
".quad 0x0407fe0000070d0e,0x4b62038800770e07,0x0045780007e010ff,0xef54000000070009\n"
".quad 0x5cb8000000972b0a,0x4b71060800a70a10,0x00fff4042a40215e,0x4b71080800c70a10\n"
".quad 0x4b71080800e70a0a,0xf0f800000000000f,0x041ff400fec007f1,0x5c98078000c7000a\n"
".quad 0x5c98078000870013,0xe26000009d800040,0x041fc001ffa000bd,0xef44000000070009\n"
".quad 0xf0f800000007000f,0x1c00000000170914,0x081fd000fec007f6,0xe29000001e000000\n"
".quad 0x0400000000171400,0x3848000000670015,0x001fc000062007f0,0x3664038000170007\n"
".quad 0xef9500312a87150e,0x01020fd81647f008,0x0001ec20fe000051,0xef9500312b07150c\n"
".quad 0x010bda8ff837f009,0xef9500312b871510,0x0010f800fe2007e1,0x4ca0000801070812\n"
".quad 0x4ca0000801170913,0x5c80000000a70a08,0x0889c80206c21152,0x5b7007000127080e\n"
".quad 0xef9500312c071512,0x5b70060000e7080e,0x0101f40864402056,0xef9500312c87150c\n"
".quad 0x5b70080000e7080e,0xef9500312d071510,0x004550442e40115e,0x5b70090000e7080e\n"
".quad 0x5b70060000e7080e,0x388000415b07180c,0x010e48042a4007f0,0x5b6503800ff70007\n"
".quad 0x5080000000670d00,0x5b70080000e7080e,0x001fdc10702047f6,0x0400000000271410\n"
".quad 0x5b70050000e70a0a,0x5b6503800ff7100f,0x009fd408fe20c392,0x537007080048080a\n"
".quad 0x010000000017f00e,0x5c9807800007000f,0x010988004fc08731,0x37707fbff0090a0a\n"
".quad 0x5371070800470c08,0x5b70040000870810,0x0086780872403156,0x3871003ff0070a08\n"
".quad 0x5b70070001070e10,0x4c80000c0007080a,0x008544042bc0c15e,0x5c80000001070a0e\n"
".quad 0x5b71050000e70c08,0x5b7007000087100e,0x001f9804fec007f7,0x4843038801270b00\n"
".quad 0x5980078000d7ff08,0x4844038801370809,0x001ff401ffa007ed,0x5c403080009700ff\n"
".quad 0xf0f800000000000f,0xe26000002b000040,0x0000d080062007fd,0xf0f800000007000f\n"
".quad 0x5c80000000e70606,0x5c80000000e70404,0x001fc000ffe010f1,0xeede200000070204\n"
".quad 0xe30000000007000f,0x010415b00007f000,0x001fc400fe000771,0xeed6200000070404\n"
".quad 0x010000000007f00a,0xe290000013000000,0x001ff400062007f0,0x0103ff000007f00b\n"
".quad 0x5080000000670009,0x010000000017f008,0x0040c40207c0103e,0x377005415b07080a\n"
".quad 0x5b70050000a70a0e,0x5b70040000e70808,0x009d7804ebc0475e,0x3880003ff8070606\n"
".quad 0x4c80000c00070606,0x4c80000c00270606,0x0040c40207c0223e,0x4c80000c0027060a\n"
".quad 0x5c80000000870a06,0x377005415b07060c,0x001fc40306200747,0x3880003ff8070404\n"
".quad 0x5b70030000c70806,0x4843038801270b00,0x003fd802fec02856,0x4c80000c00070408\n"
".quad 0x328003c15b07ff0c,0x4844038801370c05,0x0040d004070007e1,0x5c403080005700ff\n"
".quad 0x4c80000c00270804,0x4c80000c00270408,0x001fd800fe201ffd,0xf0f800000000000f\n"
".quad 0x5c9807800ff7000c,0x010415b00007f00d,0x001fc000fe2007fd,0xe260000014000040\n"
".quad 0x5c98078000e70006,0x5c98078000f70007,0x001fc800fe0007fd,0xf0f800000007000f\n"
".quad 0x010415b00007f00c,0xe29000000f800000,0x001fc400062007f0,0x010000000007f00a\n"
".quad 0x5080000000670c05,0x0103ff000007f00b,0x005c780207c007fd,0x010000000017f004\n"
".quad 0x377005415b07040a,0x5b70050000a70a0a,0x0040f80207c0083e,0x5b70020000a7040e\n"
".quad 0x5c80000000e7080a,0x377004415b070a04,0x005f9801fec01032,0x5b70050000470e04\n"
".quad 0x484303880127090a,0x328002c15b07ff00,0x001ff400fda007f6,0x4844038801370000\n"
".quad 0x5c40308000070aff,0xf0f800000000000f,0x001fc400fe2007f1,0x5c9807800087000a\n"
".quad 0x5c9807800097000b,0x5c9807800ff7000c,0x001fc400ffa007f6,0x010415b00007f00d\n"
".quad 0xe260000003800040,0x5c98078000e70004,0x0003c400ffa007f0,0x5c98078000f70005\n"
".quad 0xf0f800000007000f,0xeede200000070204,0x001fc400fec007ff,0xe30000000007000f\n"
".quad 0x0404000000070d00,0x4b62038801470007,0x001fd800ff6007f1,0x0105ff000007f01a\n"
".quad 0x5c9807800ff7000e,0x4ca0000801571a0f,0x0040c400fe00003d,0x5c80000000e70c10\n"
".quad 0x0407f80000070b00,0x5080000000671117,0x0040c400fe2007f5,0x010000000017f016\n"
".quad 0x4b62038801670007,0x53710b0800471012,0x0040d400fc2007fb,0x5c9807800ff70014\n"
".quad 0x4ca0000801571a15,0x5b70090001271218,0x0080f8030bc00853,0x5c80000001470a12\n"
".quad 0x5b700b0001871614,0x5c80000001471216,0x0040f40207a0103e,0x5b71090001671010\n"
".quad 0x5b700b0001071410,0x5b8b03800ff71087,0x001fc400fe201ffd,0xe24000001f00000f\n"
".quad 0x4b68038801770007,0x5c9807800ff70012,0x00014800fec0003b,0x5c80000001070e14\n"
".quad 0x4ca0000801571a13,0x5c80000001271018,0x2840d8044e401826,0x5c80000001471210\n"
".quad 0x5c80000001870e0e,0x5b72050001070c12,0x00bfd8022ba0403d,0x5b72050000e70c14\n"
".quad 0x5b84138001471287,0x5ca0000001170f0f,0x001ff400fe0007ed,0x36bc038010070f8f\n"
".quad 0x5ca0000001070e0e,0xe32000000001000f,0x001fec00fe2007f1,0x36b1038400070b87\n"
".quad 0x010585000007f000,0x5c9807800ff70010,0x001f9040fe2007f1,0x4ca0000800570011\n"
".quad 0x0420000000170e00,0x040fffffffe70e0e,0x003fc40006440031,0x5c80000001070c0c\n"
".quad 0x5c80000001070a0a,0x5c98078000070010,0x0000f582062007f5,0x5c98078000f70011\n"
".quad 0x5b72050000c70e12,0x5b72050000c71010,0x081fd803fcc0103d,0x5b84138001071287\n"
".quad 0x5ca0000000e70013,0x0400000000171300,0x001fc400fd8007f1,0x3664038000170007\n"
".quad 0x1c10000000171310,0x50900380e0078007,0x001f9400fec007f1,0x5c10080000f7ff11\n"
".quad 0x1c1ffffffff71300,0x1c2ffffffff70f0e,0x001fc400fe2007f1,0x5ca0000001071312\n"
".quad 0x5ca0000001370010,0x5ca0000001170f00,0x001f9800fe4007f3,0x5ca0000000f70e11\n"
".quad 0x5c9807800127000e,0x5c9807800007000f,0x0040f40107a00022,0x5b72050000e70c0e\n"
".quad 0x5b72050001070c0c,0x5b84138000c70e87,0x001ffc00fe0017f1,0x5ca000000127100e\n"
".quad 0x5ca000000007110f,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff71007\n"
".quad 0xe24000000680000f,0x5c9807800ff7000e,0x0040c80207a0003d,0x5080000000670d0f\n"
".quad 0x5b8403800ff70e8f,0x368d03fff0090c87,0x001fc400fea017f1,0x5ca0000000e90c00\n"
".quad 0x5ca0000000f90d11,0x5c9807800009000e,0x007ffc0007a007f6,0x5c9807800119000f\n"
".quad 0x5c80000000e70a0e,0xe32000000007000f,0x001fc403ffe0003d,0x5c80000000c70a0e\n"
".quad 0xe32000000007000f,0x4b62038801870c07,0x001fc000ff6007f1,0x5c98078000e7000c\n"
".quad 0x5c9807800147000e,0x5c9807800097000f,0x005fd800070007fd,0xe24000000500000f\n"
".quad 0x5b74080000e70c0c,0x1c10000000170c0e,0x0040f40006c007f6,0x5c10080000d7ff0f\n"
".quad 0x5b79050000e70c0a,0x5b8403800ff70a07,0x001ffc00fe0017f1,0x5ca0000000c70e0c\n"
".quad 0x5ca0000000d70f0d,0xe32000000007000f,0x001fb403ffa0003d,0x5b8a03800ff70a07\n"
".quad 0xe24000001080000f,0x5b6303800ff70b07,0x001ff400fe0007f1,0x010000000000f00c\n"
".quad 0x010fff800000f00d,0xe32000000000000f,0x001c7400ffa007ed,0x4b69038801970b07\n"
".quad 0xe24000000c80000f,0x3880004690070a0a,0x0040f800ffa00831,0x5080000000770b0d\n"
".quad 0x5c9807800ff7000c,0x5c80000000c70c10,0x001fd801fe201032,0x5371080800470a0e\n"
".quad 0x010000000007f010,0x0103fe000007f011,0x0040f80107c01032,0x3670083fd8070e12\n"
".quad 0x5c80000000e70c0e,0x5b70060000e7120c,0x0040c800fee01021,0x5c80000000c70a10\n"
".quad 0x1c0fff0000070d09,0x5b7105000107100e,0x0040f800fec00ff1,0x5c98078000c7000a\n"
".quad 0x5c9807800097000b,0x5b70080000e70a0a,0x001ffc00fe0017f1,0x1c0fcb0000070b0d\n"
".quad 0x5c98078000a7000c,0xe32000000007000f,0x001fd803ffe0003d,0x5c70000000a70a0c\n"
".quad 0xe32000000007000f,0x38000000b1470d08,0x001ff400fe0007ed,0x366503807ff70807\n"
".quad 0x5c98078000d70014,0xe24000009580000f,0x001fd800fec007f0,0x1c0fffffc0070808\n"
".quad 0xe29000003b800000,0x3828000000670809,0x001fd000fe2207f1,0x1d0000000137090c\n"
".quad 0x1d0000000107090b,0x1c00000000870108,0x001fc800fe8007e2,0x3821038001270c11\n"
".quad 0x4c47020000170808,0x5b69038001170b07,0x081fc400fe2007f1,0x04000ffffff70812\n"
".quad 0x5c98078000d7000f,0x0408000000070d10,0x001fc400fe2007e1,0x3828000001470d1f\n"
".quad 0x5c9807800ff70009,0x5c98078000a7000e,0x001fc000fe8007f1,0x5c98078001270008\n"
".quad 0x5c9807800ff7000c,0x5c9807800ff7000d,0x001fd800fe0007fd,0xf0f800000000000f\n"
".quad 0x38000000b1470f0c,0xe29000002e000000,0x001fd400fe2007f6,0x1c0fffffc0070c0c\n"
".quad 0x3828000000670c0c,0x36f80a4000b70a0f,0x001fc400fca007f1,0x5c1200000ff70c0c\n"
".quad 0x1c0ffffffff70b14,0x3848000000370c0e,0x001fc400fe2007f1,0x36f8054000b7ff15\n"
".quad 0x5c9807800087000a,0x5c9807800097000b,0x001fc400fc2007f1,0x5c9807800ff7000c\n"
".quad 0x5c9807800ff7000d,0x0428000000070f17,0x001fc000fec007f1,0x5c98078001470016\n"
".quad 0x1c00000128870e20,0x1c00000000171616,0x181fc4c2fe20003f,0xef9500300007200e\n"
".quad 0x5b007f8001570e0b,0x5b007fa801570e1d,0x181fc8c0fe2207f1,0x5b007f8001770e1c\n"
".quad 0x5b007f8801570e1e,0x5b207f8801570e23,0x181fc440fe2007e1,0x5b28058001570e24\n"
".quad 0x5b30059801d70e21,0x5b007f8801770e1b,0x001fc4c0fe2607f1,0x5b207f8801770e1a\n"
".quad 0x5b007fa801770e25,0x5b280e0001770e1d,0x001fc800fe2007e1,0x5b007f8001570f0b\n"
".quad 0x5cc011a001e7241e,0x5c10800002170c0c,0x181fc400fe2007f1,0x5b300e1802570e0e\n"
".quad 0x5cc00d2001b71d21,0x5b007f8801570f1a,0x001fc440fe2007e1,0x5b207f8801570f1c\n"
".quad 0x5b28058001570f1d,0x5c10880001e70d1b,0x001fc400fe2007f4,0x5b007f8001770f0d\n"
".quad 0x5cc00e2001a71d1c,0x5c1008000217ff1a,0x181fc4c0fe2007e1,0x5c10800000e71b0e\n"
".quad 0x5b007f8801770f1b,0x5b207f8801770f1d,0x001fcc00fe4207f1,0x5b28068001770f1e\n"
".quad 0x5b007fa801570f21,0x5c10880001c71a1a,0x081fd440fe2007e1,0x5cc00ea001b71e1d\n"
".quad 0x5b007fa801770f1b,0x5b30059802170f0b,0x001fd800fe2007f1,0x5b30069801b70f0f\n"
".quad 0x5c10080001d7ff1b,0x5c10800000b70e0d,0x001f84001e2007f0,0x5c10880000f71a0e\n"
".quad 0xef55000000070a0c,0x5c1200000167141a,0x001fc400fe2007f4,0x5b63038001171607\n"
".quad 0x5c10080001b7ff0f,0x1c1000000087080b,0x001f8400fe8207f1,0x3848000000371a08\n"
".quad 0x3829000001d71a1b,0x5c1008000097ff09,0x001fc400fe2007f1,0x5c1080000127081a\n"
".quad 0x5c98078000b70008,0x1c00000000872020,0x001f8400fe400ff1,0x5c98078000e7000c\n"
".quad 0x5c98078000f7000d,0x5c10080001b7ff0b,0x001ff400fec007f0,0x5c98078001a7000a\n"
".quad 0xe2400fffdc00000f,0xf0f800000007000f,0x001fc800fe0007fd,0xf0f800000007000f\n"
".quad 0x5c98078000870015,0xe290000022000000,0x001fc0001ec007f0,0x0400000003f71f11\n"
".quad 0xef5500000007150c,0x5b6503800ff7110f,0x00063000fe000171,0xef4500000107120a\n"
".quad 0x5b6b03800ff71007,0xef4500000187120e,0x021f8408fe2001b1,0xef45000000891208\n"
".quad 0x5c98078000b7001c,0x5c98078000e70016,0x001fd000fe2007f1,0x5c98078000f70017\n"
".quad 0x1d0000000409110b,0x5c98078000a7001a,0x001f8400fe2407f1,0x5bf80bc001191614\n"
".quad 0x5cf90e4000b9ff0e,0x5bf80b400119ff0f,0x001fc400fe2e0ff4,0x5cf80e4000b91a0d\n"
".quad 0x5c47020000e91417,0x5bf80e4001191a0c,0x001f8400fe6107f1,0x5cf904c000b9ff0a\n"
".quad 0x5c47020000d90f16,0x3828000001d7170d,0x001fcc00fe2007f1,0x5cf804c000b9080b\n"
".quad 0x5c47020000c90a1c,0x5bf80d400119ff0c,0x001f8400fe2007f1,0x0400000000170d08\n"
".quad 0x36f80b400027ff09,0x3828000001e71c0a,0x001fc400fe2007f3,0x5c47020000c90b1a\n"
".quad 0x5b6503800ff7080f,0x36f80bc00027160e,0x001f8400fe2007f1,0x38f90e4003e7ff0f\n"
".quad 0x5c47020000a7090b,0x5bdf7f802087170a,0x001fc400fe2007f3,0x36f80e4000271a0d\n"
".quad 0x5c47020000f70e09,0x04000ffffff7130f,0x0003f400fe0007f2,0x5c1200000ff00a0a\n"
".quad 0x36f80d400027ff0c,0xef54000000070f0a,0x001fc401ffa007f0,0x5c98078000b70008\n"
".quad 0xf0f800000001000f,0x5c11800000c7ffff,0x001fc400fea007f1,0x5c47070000d7ff0a\n"
".quad 0x5c4707000087ff08,0x5c10880000a7ff0d,0x001fc400fc2007f5,0x5c4707000097ff09\n"
".quad 0x5c1088000087ff08,0x5c1200000ff70c0c,0x001fd800fe0007f4,0x0448000000071010\n"
".quad 0x5c1008000097ff09,0xf0f800000007000f,0x0000f400fe4007f0,0x5b4404800097080a\n"
".quad 0xe290000008800000,0x5c30000000a7000b,0x001fb402fec00ff6,0x364a04800207ff0a\n"
".quad 0x38c2058001f70a0a,0x5b6503800ff70a07,0x101fc400fe2007fd,0xf0f800000000000f\n"
".quad 0x1d00000004070a0b,0x5bf8044000a7ff0e,0x001fd580fe2007f4,0x5bf804c000a7080f\n"
".quad 0x5cf806c000b70c08,0x5cf906c000b7ff09,0x001ff400fe0007e1,0x5c47020000e70808\n"
".quad 0x5c47020000f70909,0xf0f800000007000f,0x001fd400fe2007f0,0x0102168c2357f00d\n"
".quad 0xe29000001f800000,0x010c90fdaa27f00e,0x181fc440fe2607f1,0x5b007f8000d7080b\n"
".quad 0x5b007f8000e70813,0x5b007f8800d7080c,0x181fc4c0fe4007e1,0x5b207f8800d7080f\n"
".quad 0x5b007fa800e70812,0x5b28058000d70811,0x001fc4c0fe2607f1,0x5b007f8800e70814\n"
".quad 0x5b207f8800e70815,0x5b28098000e70816,0x001fc400fe2007e1,0x5b007f8000d70917\n"
".quad 0x5b30099801270812,0x5cc007a000c7110c,0x001fc4c0fe2607f1,0x5b007fa800d7091a\n"
".quad 0x5b007f8800d7090f,0x5cc00aa001471616,0x001fc540fe2007e1,0x5b207f8800d70914\n"
".quad 0x5b280b8000d70915,0x5c10800001270c0c,0x001fc400fe6207f1,0x5b300b9801a70911\n"
".quad 0x5b007f8000e70913,0x5cc00a2000f71512,0x181fc400fe2007e1,0x5c1008000167ff0f\n"
".quad 0x5c10800001170c14,0x5b007f8800e7090c,0x001fd4c0fe2607f1,0x5b207f8800e70911\n"
".quad 0x5b28098000e70916,0x5b007fa800e7090e,0x001fd400fe2007e1,0x5cc008a000c71611\n"
".quad 0x5c10880001270f0c,0x5b30099800e70909,0x001fc400fec007f1,0x5c1008000117ff0e\n"
".quad 0x5c10800000970c0c,0x5c10080000e7ff09,0x081fd800fe2007e6,0x1c1ffffffff70cff\n"
".quad 0x5b630b800ff70907,0x5b007fa800d7080d,0x001ff400fe0007f6,0x5b30059800d7080b\n"
".quad 0x5c98078000c70008,0xf0f800000000000f,0x001fd800fec007f1,0x5c9807800147000c\n"
".quad 0x5c10800000b70bff,0x5c10880000c70cff,0x001fc000fea007f1,0x5c10880000870808\n"
".quad 0x1c00000000170a0a,0x5c10080000970909,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170808,0x5c1008000097ff09,0x001fd000fe2807f1,0x38f804c000a70808\n"
".quad 0x38f904c000a7ff0c,0x010001000007f00b,0x001fc400fea007e1,0x1c10000000170809\n"
".quad 0x1d0000003fe70a08,0x5c10080000c7ff0a,0x001fc840fe8607f1,0x5b007f8000b7080d\n"
".quad 0x5b007fa800b7080b,0x38f805400017090c,0x001fd800fe6007e1,0x5b30069800b70809\n"
".quad 0x38f905400017ff08,0x5c10800000c7ff0a,0x001fc000fec007f6,0x5c10080000870909\n"
".quad 0x5c47020001070914,0x5c9807800147000b,0x001f8000ffe007ff,0xe32000000007000f\n"
".quad 0xe2400fffff87000f,0x50b0000000070f00,0x001f8000fc0007e0,0x50b0000000070f00\n"
".quad 0x50b0000000070f00,0x50b0000000070f00,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001f8440fe2007f6,0x5b30011800370007\n"
".quad 0x3848000000470700,0x3828000001c70705,0x081fc440fec007f4,0x5b6503800ff70707\n"
".quad 0x4c10800005070002,0x4c10080005170503,0x001fd800fe0007f6,0x4c10800005270004\n"
".quad 0x4c10080005370505,0xe24000005b00000f,0x001fc000fd8007f1,0x4b68038800070707\n"
".quad 0x4c47020000170106,0x04000ffffff70600,0x001fd800fe0007fd,0xe30000000000000f\n"
".quad 0x010709ad4e57f00d,0xe290000025000000,0x181fd0c0fe2607f1,0x5b007f8000d70708\n"
".quad 0x5b027f8800d70709,0x5b2f7f8800d7070a,0x081fc400fcc007f6,0x5b29040000d70708\n"
".quad 0x5cc0052000970808,0x3829000000d70809,0x181fc400fec007f5,0x010ffffb7407f00a\n"
".quad 0x5bdf7f8010970808,0x5b00038000a70807,0x001ff400fca007f1,0x5b007fa800a70809\n"
".quad 0x010151d07eb7f00c,0x5b30039800970807,0x181fd0c0fe2607f1,0x5b007f8000c70709\n"
".quad 0x5b027f8800c7070a,0x5b2f7f8800c7070b,0x001f9800fec007f6,0x5b29048000c70709\n"
".quad 0x5cc005a000a70909,0x382900000037090a,0x081fd000fea007f1,0x5bdf7f8010a70909\n"
".quad 0x010ffffff9f7f00a,0x384800000037090b,0x001fc400062607f0,0x5b00038000a70907\n"
".quad 0xef95003061070b0c,0x5b007fa800a7090a,0x001d5800fe0007e5,0x3848000000370808\n"
".quad 0x5b30039800a70907,0xef95003001070808,0x00417800722007f4,0x3848000000370707\n"
".quad 0xef950030c107070e,0x5c80000000c70c0a,0x0040f41007c0209e,0x5b70050000870808\n"
".quad 0x5b70040000e70e14,0x3880004008071408,0x0040f800ffa01032,0x508000000077090b\n"
".quad 0x1c0fcb000007090a,0x5c80000000a70a0e,0x001f9801fe201032,0x537107080027080c\n"
".quad 0x010000000007f00e,0x0103fe000007f00f,0x0040c40107c01032,0x3670073fd8070c10\n"
".quad 0x5c80000000c70a0c,0x5b70050000c71012,0x011fc402062007f7,0x4b62038800170a07\n"
".quad 0x5c8000000127080e,0x1c0fff0000071307,0x001fdc02062007e6,0x5c98078001270010\n"
".quad 0x5b71040000e70e0c,0x5c98078000770011,0x001fd803ffa0103d,0x5b70070001070c10\n"
".quad 0xf0f800000000000f,0x5c98078000d7000b,0x001fc000fe2007fd,0xe260000094800040\n"
".quad 0x5c98078000a70010,0x5c98078000b70011,0x001ff800060007fd,0xf0f800000007000f\n"
".quad 0x4c80000c00271008,0xe29000000d000000,0x001fc400fe2017f1,0x5b6503800ff70807\n"
".quad 0x0407fffffff70907,0x5c9807800087000a,0x001c6000fda007fa,0x5c9807800097000b\n"
".quad 0x4b65000800470707,0x5c80000000a0ff0a,0x001f98020620083d,0x4c80000800670a08\n"
".quad 0x5cb0000000871e07,0x0407fe0000070b0c,0x0000fc021fe007ff,0x4b62038800570c07\n"
".quad 0xef54000000070007,0x5cb8000000772b08,0x008548042bc0115e,0x4b7105080087080e\n"
".quad 0x4b71070800a7080e,0x4b71070800c70808,0x0002f400ffa03ffd,0xf0f800000000000f\n"
".quad 0xe2600000a2000040,0xef44000000070007,0x001fd820fe000ffd,0xf0f800000007000f\n"
".quad 0x1c0000000017070e,0xe29000001f800000,0x001fc040fe8007f6,0x0400000000170e00\n"
".quad 0x384800000067000f,0x3664038000170007,0x00014400fe000031,0xef9500312a870f10\n"
".quad 0x01020fd81647f006,0xef9500312b070f18,0x001f84000f6107f0,0x010bda8ff837f007\n"
".quad 0xef9500312b870f0c,0x4ca0000800e7060a,0x0002f800860007f1,0x4ca0000800f7070b\n"
".quad 0x5c80000000870806,0xef9500312c870f12,0x0085c00013c01150,0x5b70080000a7060a\n"
".quad 0xef9500312d070f16,0x5b700c0000a7060a,0x0086f8082be0005e,0xef9500312c070f10\n"
".quad 0x5b70060000a7060a,0x5b70080000a7060c,0x001fc0004e830191,0x5b70090000c7060c\n"
".quad 0x388000415b07140a,0x5b6503800ff70007,0x001f9c1032204273,0x5080000000670b00\n"
".quad 0x5b700b0000c7060c,0x0400000000270e0e,0x02464800fee48191,0x5b70040000c70808\n"
".quad 0x5b6503800ff70e0f,0x5370060800280608,0x021c8408fea017f1,0x010000000017f00c\n"
".quad 0x5c9807800007000d,0x37707fbff0090808,0x0060d8090a40027e,0x5371060800270a06\n"
".quad 0x5b7003000067060e,0x3871003ff0070806,0x0180f8020fc02272,0x5b70060000e70c0e\n"
".quad 0x4c80000c00070608,0x5c80000000e7080c,0x001fdc020620103e,0x5b71040000c70a06\n"
".quad 0x5b70060000670e0c,0x4843038801070900,0x001fb400fec017e6,0x5980068000b7ff06\n"
".quad 0x4844038801170606,0x5c403080006700ff,0x001fd800fe2007fd,0xf0f800000000000f\n"
".quad 0x5c98078000a70006,0x5c98078000b70007,0x0001c800ffa007fd,0xe26000002d000040\n"
".quad 0xf0f800000007000f,0xeed6200000070208,0x0043c40006824031,0x5c80000000a70c0a\n"
".quad 0x5c80000000870c08,0xeede200000070408,0x0001c400fe0007ff,0xe30000000007000f\n"
".quad 0x010415b00007f000,0xeed6200000070208,0x001fc000fe2007f0,0x010000000007f00c\n"
".quad 0xe290000014800000,0x0103ff000007f00d,0x003fc4080a400731,0x5080000000670000\n"
".quad 0x3880003ff8070a06,0x010000000017f00a,0x08055c04e22017e5,0x5c9807800007000b\n"
".quad 0x4c80000c00070606,0x377006415b070a0c,0x003c4404e6e00f11,0x4c80000c00270606\n"
".quad 0x5b70060000c70c0c,0x4c80000c00270606,0x0040f80107c0111e,0x5b70050000c70a0c\n"
".quad 0x5c80000000c70602,0x377003415b07020a,0x005fc4010ac01022,0x5b70010000a70c0a\n"
".quad 0x3880003ff8070802,0x328005c15b07ff0c,0x003fd804068007f1,0x4843038801070700\n"
".quad 0x4c80000c00070208,0x4844038801170c02,0x005c5002070007e1,0x5c403080002700ff\n"
".quad 0x4c80000c00270802,0x4c80000c00270202,0x001fc400fe200ffd,0xf0f800000000000f\n"
".quad 0x5c98078000670008,0x5c98078000770009,0x001ff400fec007f1,0x5c9807800ff70006\n"
".quad 0x010415b00007f007,0xe260000014000040,0x001ff400fe0007f1,0x5c98078000c7000a\n"
".quad 0x5c98078000d7000b,0xf0f800000007000f,0x001fc000fe4007f0,0x010415b00007f00e\n"
".quad 0xe29000000f800000,0x010000000007f008,0x001ff400fe200031,0x5080000000670e07\n"
".quad 0x0103ff000007f009,0x010000000017f006,0x0020f802e3c0103e,0x377004415b070608\n"
".quad 0x5b70040000870808,0x5b7003000087060c,0x0040c80207c0103e,0x5c80000000c70208\n"
".quad 0x377001415b070806,0x5b70040000670c08,0x001fd802fcc00ff6,0x4843038801070306\n"
".quad 0x328004c15b07ff00,0x4844038801170000,0x001fc400ffa007ed,0x5c403080000706ff\n"
".quad 0xf0f800000000000f,0x5c98078000270008,0x001fd800fe2007f1,0x5c98078000370009\n"
".quad 0x5c9807800ff70006,0x010415b00007f007,0x001fc000fe2007fd,0xe260000003000040\n"
".quad 0x5c98078000c70008,0x5c98078000d70009,0x001ffc001e2007fd,0xf0f800000007000f\n"
".quad 0xeede200000070408,0xe30000000007000f,0x001fc400fe2007f6,0x0404000000070700\n"
".quad 0x4b62038801270007,0x0105ff000007f018,0x001f9800ff4007f1,0x5c9807800ff7000c\n"
".quad 0x0407f80000070900,0x4ca000080137180d,0x0040c400fe000034,0x5c80000000c7060e\n"
".quad 0x4b62038801470007,0x5080000000670f11,0x001fc80206c007f6,0x010000000017f010\n"
".quad 0x5371080800270e12,0x4ca0000801371814,0x001fd801fe401022,0x5b70090001271216\n"
".quad 0x5c9807800ff70012,0x5c98078001470013,0x0080f8030bc00052,0x5c80000001270814\n"
".quad 0x5b70080001671012,0x5c80000001271410,0x0040f40207a0103e,0x5b710a0001070e0e\n"
".quad 0x5b70080000e7120e,0x5b8b03800ff70e87,0x001fc400fe201ffd,0xe24000001f00000f\n"
".quad 0x4b68038801570007,0x5c9807800ff70010,0x00014800fec0003b,0x5c80000000e70c12\n"
".quad 0x4ca0000801371811,0x5c80000001070e16,0x2840d8044e401826,0x5c8000000127100e\n"
".quad 0x5c80000001670c0c,0x5b72040000e70610,0x00bfd8022ba0403d,0x5b72040000c70612\n"
".quad 0x5b84138001271087,0x5ca0000000f70d0d,0x001ff400fe0007ed,0x36bc038010070d8f\n"
".quad 0x5ca0000000e70c0c,0xe32000000001000f,0x001fc400fe2007f1,0x36b1038400070987\n"
".quad 0x010585000007f000,0x5c9807800ff7000e,0x001f9800ff2207f1,0x0420000000170c12\n"
".quad 0x040fffffffe70c0c,0x4ca000080037000f,0x003fc40006440031,0x5c80000000e70606\n"
".quad 0x5c80000000e70808,0x5c9807800127000e,0x0000f582062007f5,0x5c98078000d7000f\n"
".quad 0x5b72040000670c10,0x5b72040000670e0e,0x081fd803fcc0103d,0x5b84138000e71087\n"
".quad 0x5ca0000000c7120e,0x0400000000170e00,0x001fd840fec007f1,0x3664038000170007\n"
".quad 0x1c10000000170e00,0x5c10080000d7ff10,0x081fd800fcc007f1,0x50900380e0078007\n"
".quad 0x1c1ffffffff70e0c,0x1c2ffffffff70d0f,0x001fc400fe2007f1,0x5ca0000000070e00\n"
".quad 0x5ca0000001070d11,0x5ca0000000e70c0e,0x001fd800fc2007f3,0x5ca0000000d70f0f\n"
".quad 0x5c9807800007000c,0x5c9807800117000d,0x0040f40107aa0032,0x5b72040000c7060c\n"
".quad 0x5b72040000e70606,0x5b84138000670c87,0x001ffc00fe0017f1,0x5ca0000000070e0c\n"
".quad 0x5ca0000001170f0d,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff70e07\n"
".quad 0xe24000000680000f,0x5c9807800ff7000c,0x0040c80207a0003d,0x508000000067070d\n"
".quad 0x5b8403800ff70c8f,0x368d03fff0090687,0x001fc400fea017f1,0x5ca0000000c90600\n"
".quad 0x5ca0000000d90706,0x5c9807800009000c,0x007ffc0007a007f6,0x5c9807800069000d\n"
".quad 0x5c80000000c7080c,0xe32000000007000f,0x001fc403ffe0003d,0x5c8000000067080c\n"
".quad 0xe32000000007000f,0x4b62038801670a07,0x001fc000ff6007f1,0x5c98078000c7000a\n"
".quad 0x5c9807800127000c,0x5c9807800077000d,0x005fd800070007fd,0xe24000000500000f\n"
".quad 0x5b74070000c70a0a,0x1c10000000170a0c,0x0040f40006c007f6,0x5c10080000b7ff0d\n"
".quad 0x5b79040000c70a08,0x5b8403800ff70807,0x001ffc00fe0017f1,0x5ca0000000a70c0a\n"
".quad 0x5ca0000000b70d0b,0xe32000000007000f,0x001fb403ffa0003d,0x5b8a03800ff70807\n"
".quad 0xe24000001080000f,0x5b6303800ff70907,0x001ff400fe0007f1,0x010000000000f00a\n"
".quad 0x010fff800000f00b,0xe32000000000000f,0x001c7400ffa007ed,0x4b69038801770907\n"
".quad 0xe24000000c80000f,0x3880004690070808,0x0040f800ffa00831,0x508000000077090b\n"
".quad 0x5c9807800ff7000a,0x5c80000000a70a0e,0x001fd801fe201032,0x537107080027080c\n"
".quad 0x010000000007f00e,0x0103fe000007f00f,0x0040f80107c01032,0x3670073fd8070c10\n"
".quad 0x5c80000000c70a0c,0x5b70050000c7100a,0x0040c800fee01021,0x5c80000000a7080e\n"
".quad 0x1c0fff0000070b07,0x5b71040000e70e0c,0x0040f800fec00ff1,0x5c98078000a70008\n"
".quad 0x5c98078000770009,0x5b70070000c70808,0x001ffc00fe0017f1,0x1c0fcb000007090b\n"
".quad 0x5c9807800087000a,0xe32000000007000f,0x001fd803ffe0003d,0x5c7000000087080a\n"
".quad 0xe32000000007000f,0x38000000b1470b07,0x001fc000fd8007f1,0x366503807ff70707\n"
".quad 0x5c98078000a7000c,0x5c98078000b7000d,0x001fd800fe0007fd,0xe24000009280000f\n"
".quad 0x1c0fffffc0070707,0xe29000003b800000,0x001fc440fe2007f6,0x3828000000670708\n"
".quad 0x1d00000001370809,0x1d00000001070813,0x001fd000fc4007f4,0x1c00000000870107\n"
".quad 0x382103800127090e,0x4c47020000170707,0x001fc400fe2007f2,0x5b69038000e71307\n"
".quad 0x04000ffffff70710,0x5c9807800067000f,0x001fc400fc2007f1,0x5c9807800ff70009\n"
".quad 0x0408000000070b11,0x3828000001470b19,0x001fc000fea007f1,0x5c9807800ff70006\n"
".quad 0x5c98078001070008,0x5c9807800ff70007,0x001fd800fe0007fd,0xf0f800000000000f\n"
".quad 0x38000000b1470b06,0xe29000002d800000,0x001fd400fe2007f6,0x1c0fffffc0070606\n"
".quad 0x3828000000670606,0x36f806c000b70c16,0x001fc400fca007f1,0x5c1200000ff70606\n"
".quad 0x1c0ffffffff71312,0x384800000037060d,0x001fc400fe2007f1,0x36f8064000b7ff13\n"
".quad 0x5c9807800087000a,0x5c9807800097000b,0x001fc400fc2007f1,0x5c9807800ff70006\n"
".quad 0x5c9807800ff70007,0x0428000000071616,0x001fc000fec007f1,0x5c98078001270017\n"
".quad 0x1c00000128870d18,0x1c00000000171717,0x181fc4c2fe20003f,0xef9500300007180c\n"
".quad 0x5b007f8001370c09,0x5b007fa801370c1a,0x281fc4c0fe8607f1,0x5b007f8801370c1c\n"
".quad 0x5b207f8801370c1d,0x5b30049801a70c1b,0x001fc4c0fe8007e1,0x5b28048001370c1a\n"
".quad 0x5b007f8001670c09,0x5c10800001b70606,0x001fd0c0fe2007f1,0x5cc00ea001c71a1c\n"
".quad 0x5b007f8801670c1a,0x5b207f8801670c1b,0x001fc5c0fec007e1,0x5c10880001c70707\n"
".quad 0x5b28048001670c1c,0x5cc00da001a71c1b,0x001fc400fe2207f6,0x5b007fa801670c1a\n"
".quad 0x5b30049801a70c1a,0x5b007f8001370d09,0x001fc4c0fe6007e1,0x5c10080001b7ff0c\n"
".quad 0x5b207f8801370d1b,0x5c10800001a70707,0x001fc440fec607f1,0x5b007f8801370d1a\n"
".quad 0x5b28048001370d1c,0x5cc00da001a71c1a,0x081fc400fe2007e5,0x5b007f8001670d1b\n"
".quad 0x5c10880001a70c0c,0x5b007fa801370d1a,0x081fc4c0fe8607f1,0x5b207f8801670d1c\n"
".quad 0x5b280d8001670d1d,0x5b30049801a70d09,0x001ff400fe2007e6,0x5b007f8801670d1a\n"
".quad 0x5cc00e2001a71d1c,0x5b007fa801670d1a,0x001fd800fe2007f1,0x5c10080001c7ff1c\n"
".quad 0x5b300d9801a70d1a,0x5c1080000097070d,0x001fc400fca007f1,0x5c10880001a70c1a\n"
".quad 0x5c1200000177120c,0x5c10080001c7ff07,0x001fc440fe2007f1,0x1c10000000870a0a\n"
".quad 0x3848000000370c09,0x5b63038000e71707,0x001fc400fc4007f1,0x5c9807800087001b\n"
".quad 0x3829000001d70c0c,0x5c10080000b7ff0b,0x001fc400fea007f1,0x5c10800001070908\n"
".quad 0x1c00000000871818,0x5c10080000c7ff09,0x0003f400fe0007f2,0x5c9807800067000c\n"
".quad 0x5c98078001a70006,0xef55000000071b0c,0x001fc400ffa00ffd,0xe2400fffdc80000f\n"
".quad 0xf0f800000007000f,0x5c98078000a70008,0x001fc000ffa007f0,0x5c98078000b70009\n"
".quad 0xf0f800000007000f,0x0400000003f7190c,0x0005c400fe0000f6,0xef55000000070806\n"
".quad 0x5b6503800ff70c0f,0xef45000001871012,0x001fc000318007f0,0x5b6b03800ff71107\n"
".quad 0xef4500000107100a,0x1d00000004090c19,0x011fc400fe2001b1,0xef45000000891008\n"
".quad 0xe29000001b800000,0x5c9807800127000e,0x101fc590fe6007e3,0x5c9807800137000d\n"
".quad 0x5cf905c00199ff13,0x5bf806c000c90e16,0x001fc420fe840ff1,0x5bf805c000c90a07\n"
".quad 0x5cf904c00199ff06,0x5c4702000139160d,0x001fcc80fe2007e1,0x5bf8074000c9ff17\n"
".quad 0x5cf805c001990a12,0x5c4702000079060b,0x001fc400fe2007f1,0x3828000001d70d06\n"
".quad 0x5cf804c001990809,0x5c4702000129170e,0x001fc400fe2007e3,0x5bf8054000c9ff0c\n"
".quad 0x0400000000170606,0x3828000001e70b08,0x001fc800fe6007f1,0x36f807400027ff07\n"
".quad 0x5c47020000c9090a,0x5b6503800ff7060f,0x001fc400fe2007e1,0x5c47020000870709\n"
".quad 0x5bdf7f8020670d08,0x36f806c000270e0c,0x001fc800fe2807f1,0x38f905c003e7ff0e\n"
".quad 0x04000ffffff70f0d,0x36f805c000270a0b,0x0003c400fe0007e2,0x5c1200000ff00808\n"
".quad 0x36f805400027ff0a,0xef54000000070d08,0x003ff400fe0007fd,0x5c47020000e70c07\n"
".quad 0x5c98078000970006,0xf0f800000001000f,0x001fd400fe2007f1,0x5c11800000a7ffff\n"
".quad 0x5c47070000b7ff08,0x5c4707000067ff06,0x001f8400fea007f1,0x5c1088000087ff0b\n"
".quad 0x5c4707000077ff07,0x5c1088000067ff06,0x001fc000fe8007f1,0x5c1200000ff70a0a\n"
".quad 0x0448000000071111,0x5c1008000077ff07,0x001fc800fe0007f6,0xf0f800000007000f\n"
".quad 0x5b44038000770608,0xe290000009000000,0x005fd801fec0003d,0x5c30000000870009\n"
".quad 0x364a03800207ff08,0x38c2048001f70808,0x001fc400ffa007ed,0x5b6503800ff70807\n"
".quad 0xf0f800000000000f,0x1d00000004070809,0x301fc400fe8407f1,0x5bf803400087ff0c\n"
".quad 0x5bf803c00087060d,0x5cf805c000970a06,0x001fc000fc2007f5,0x5cf905c00097ff07\n"
".quad 0x5c47020000c70606,0x5c47020000d70707,0x001fc400fe0007fd,0xf0f800000007000f\n"
".quad 0x0102168c2357f00b,0xe29000001f000000,0x081fc4c0fe2007f5,0x010c90fdaa27f00c\n"
".quad 0x5b007f8000b70609,0x5b007f8000c70613,0x181fc800fc2607f1,0x5b007f8800b7060a\n"
".quad 0x5b207f8800b7060d,0x5b007fa800c70610,0x181fc4c0fe2607f1,0x5b28048000b7060f\n"
".quad 0x5b007f8800c7060e,0x5b207f8800c70617,0x001fc400fc2007f1,0x5b28098000c70618\n"
".quad 0x5b007f8000b70719,0x5b30099801070610,0x181fc4c0fe2007f1,0x5cc006a000a70f0a\n"
".quad 0x5b007fa800b7071b,0x5b007f8800b7070d,0x281fc400fc2007f1,0x5cc00ba000e71812\n"
".quad 0x5b207f8800b7070e,0x5b280c8000b70713,0x001fcc40fe2007f1,0x5c10800001070a0a\n"
".quad 0x5b300c9801b7070f,0x5b007f8000c70717,0x001fc400fc2007f1,0x5cc0072000d7130e\n"
".quad 0x5c1008000127ff0d,0x5c10800000f70a0a,0x181fc4c0fe2607f1,0x5b007f8800c7070f\n"
".quad 0x5b207f8800c70710,0x5b280b8000c70712,0x001fc400fc6007f2,0x5b007fa800c70718\n"
".quad 0x5c10880000e70d0c,0x5cc0082000f7120f,0x001fd800fe2007f5,0x5b300b9801870707\n"
".quad 0x5c10080000f7ff0d,0x5c10800000770c0c,0x001fc400fcc007f1,0x5c10080000d7ff07\n"
".quad 0x1c1ffffffff70cff,0x5b630b800ff70707,0x001fc000fec207f6,0x5b007fa800b7060b\n"
".quad 0x5b30049800b70609,0x5c98078000c70006,0x001fd800fec007fd,0xf0f800000000000f\n"
".quad 0x5c108000009709ff,0x5c10880000a70aff,0x001fc000fea007f1,0x5c10880000670606\n"
".quad 0x1c00000000170808,0x5c10080000770707,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170606,0x5c1008000077ff07,0x001fd000fe2807f1,0x38f803c000a70606\n"
".quad 0x38f903c000a7ff0a,0x010001000007f009,0x001fc400fea007e1,0x1c10000000170607\n"
".quad 0x1d0000003fe70806,0x5c10080000a7ff08,0x001fc840fe8607f1,0x5b007f800097060b\n"
".quad 0x5b007fa800970609,0x38f804400017070a,0x001fd800fe6007e1,0x5b30059800970607\n"
".quad 0x38f904400017ff06,0x5c10800000a7ff0c,0x001fc400fec007f6,0x5c10080000670706\n"
".quad 0x5c4702000117060d,0x5c98078000c70008,0x001ffc00ffe007f0,0x5c98078000d70009\n"
".quad 0xe32000000007000f,0xe2400fffff87000f,0x001f8000fc0007e0,0x50b0000000070f00\n"
".quad 0x50b0000000070f00,0x50b0000000070f00,0x001c7c00e22007f6,0x4c98078000870001\n"
".quad 0xf0c8000002570000,0xf0c8000002170002,0x001fd840fec20ff1,0x4f107f8000270003\n"
".quad 0x4e00010000270002,0x5b30011800370000,0x081fd800ffa007ed,0x36680397fff70007\n"
".quad 0xe30000000000000f,0x4bd7820005070004,0x001fd800ee2207f2,0x1a277f8005170005\n"
".quad 0xeed6200000070404,0x010aaaaaaab7f009,0x181fc400fca607f1,0x5b007f8000970002\n"
".quad 0x5b007f8800970003,0x5b28010000970008,0x001fd400fe2007f6,0x5b207f8800970002\n"
".quad 0x5cc0012000370803,0x010fffffa007f009,0x001fc400fc2007f1,0x3828000000a70302\n"
".quad 0x010fffffa007f00a,0x38f901c002a7ff03,0x181fc440fe4007f3,0x010fffffa007f008\n"
".quad 0x5b007f800097020c,0x5b007f8000a7030e,0x081fc400fc2007f1,0x5b007fa800a70310\n"
".quad 0x5b007f800087020b,0x5b007fa800870208,0x081fc4c0fe2607f1,0x5b2806000097020d\n"
".quad 0x5b007f880097020a,0x5b207f880097020c,0x001fc400fc6007f2,0x5b30071801070309\n"
".quad 0x5b30059800870203,0x5cc0062000a70d08,0x001fc400fe8207f2,0x5c1200000ff7020a\n"
".quad 0x5c1080000037000d,0x5cc0048000870a03,0x001fc400fc8007f1,0x010000090007f008\n"
".quad 0x36007f8900070200,0x5c1008000037ff0c,0x281fc440fe2607f1,0x5b007f8800870203\n"
".quad 0x5b207f8800870208,0x3628000900070209,0x001fc400fc2007f2,0x3620001900070200\n"
".quad 0x38f8064000570d0a,0x38f906400057ff0b,0x001fc800fe2007f1,0x010000000c07f00f\n"
".quad 0x010000000c07f010,0x5cc0042000370902,0x001fc400fc2007f1,0x36007f800c070a09\n"
".quad 0x4cc0868800070000,0x36f805400057ff03,0x081fc440fe2207f1,0x36f805c000570a11\n"
".quad 0x5b007f8800f70a0d,0x5b207f8801070a0e,0x081fc400fc2007f1,0x36007f800c070a08\n"
".quad 0x36007f800c070b10,0x362804800c070a0f,0x001fc400fe2007f1,0x5cc106000ff70202\n"
".quad 0x5c11800000370000,0x5c4707000117ff03,0x001fcc00fc2007f1,0x362004100c070a09\n"
".quad 0x362008100c070b0b,0x5cc0072000d70f0a,0x001fd800fe4007f1,0x5c10080000370202\n"
".quad 0x5c10800000970008,0x5cc0058000a7ff00,0x0100d400fc2007f1,0x5c10080000070209\n"
".quad 0x4bd7818005270800,0x5c80000000670602,0x003fc40206400ff3,0x1a1f048005370806\n"
".quad 0x5b70010000470402,0x5c98078000070004,0x001ffc021e2007f2,0x5c98078000670005\n"
".quad 0xeedd200000070402,0xe30000000007000f,0x001f8000fc0007ff,0xe2400fffff07000f\n"
".quad 0x50b0000000070f00,0x50b0000000070f00,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001fb000fe2007f6,0x5b30011800370003\n"
".quad 0x4b68038800070307,0x4c47020000170100,0x001fd800ffa007f0,0x04000ffffff70002\n"
".quad 0xe30000000000000f,0x5c9807800ff70008,0x001fd800fec007f0,0x5c9807800ff70004\n"
".quad 0xe290000088000000,0x5c118000004703ff,0x001fc000ffa007ed,0x5b650b800ff70807\n"
".quad 0xe24000005e80000f,0x010709ad4e57f009,0x181fc4c0fe2007f6,0xe290000024800000\n"
".quad 0x5b007f8000970304,0x5b027f8800970305,0x001f9800fec607f4,0x5b2f7f8800970306\n"
".quad 0x5b29020000970304,0x5cc0032000570404,0x001fd800fea207f1,0x3829000000d70405\n"
".quad 0x010ffffb7407f006,0x5bdf7f8010570404,0x001f9400fe2607f1,0x5b00018000670405\n"
".quad 0x5b007fa800670406,0x010151d07eb7f00b,0x181fc4c0fe2007fd,0x5b30029800670405\n"
".quad 0x5b007f8000b70506,0x5b027f8800b70507,0x001fd800fec607f4,0x5b2f7f8800b70509\n"
".quad 0x5b29030000b70506,0x5cc004a000770606,0x001fd400fe2007e6,0x3829000000370607\n"
".quad 0x5bdf7f8010770606,0x010ffffff9f7f007,0x0000c4c0fe0207f4,0x3848000000370609\n"
".quad 0x5b00028000770605,0xef9500306107090c,0x001fc000fca007f1,0x5b007fa800770607\n"
".quad 0x3848000000370404,0x5b30029800770606,0x000e7400fe800756,0xef95003001070404\n"
".quad 0x3848000000370606,0xef950030c107060a,0x0200f80413c0505e,0x5c80000000c70c06\n"
".quad 0x5b70030000470404,0x5b70020000a70a12,0x001ff4020640103d,0x3880004008071204\n"
".quad 0x5080000000770507,0x1c0fcb0000070506,0x003fc4020640103e,0x5c8000000067060a\n"
".quad 0x537105080027040c,0x010000000007f00a,0x0020f802044007f6,0x0103fe000007f00b\n"
".quad 0x3670053fd8070c10,0x5c80000000c7060a,0x0040c400fee01031,0x5b70030000a7100e\n"
".quad 0x4b62038800170607,0x5c80000000e7040a,0x00408400fec007f1,0x1c0fff0000070f07\n"
".quad 0x5c98078000e70010,0x5b71020000a70a0c,0x007ff40207a007f7,0x5c98078000770011\n"
".quad 0x5b70050001070c10,0xf0f800000000000f,0x001fc400ffa007f6,0x5c98078000770009\n"
".quad 0xe26000009e000040,0x5c98078000670010,0x0000c000ffa007f0,0x5c98078000770011\n"
".quad 0xf0f800000007000f,0x4c80000c00271004,0x001fc402fe2007fe,0xe29000000e000000\n"
".quad 0x5b6503800ff70407,0x0407fffffff70506,0x001fb000fe2007fb,0x5c98078000570007\n"
".quad 0x4b65000800470607,0x5c98078000470006,0x0040c40107a00718,0x5c8000000060ff06\n"
".quad 0x4c80000800670604,0x5cb0000000471e09,0x0043fc00ffe007e6,0x0407fe000007070c\n"
".quad 0x4b62038800570c07,0xef54000000070209,0x008578022bc0003f,0x5cb8000000972b04\n"
".quad 0x4b7103080087040a,0x4b71050800a7040a,0x001fc407ffa02152,0x4b71050800c70404\n"
".quad 0xf0f800000000000f,0x5c9807800067000a,0x0002f400ffa007f6,0x5c9807800077000b\n"
".quad 0xe2600000aa800040,0xef44000000070209,0x001fd820fe000ffd,0xf0f800000007000f\n"
".quad 0x1c0000000017090e,0xe29000001f800000,0x001fc040fe8007f6,0x0400000000170e09\n"
".quad 0x384800000067090f,0x3664038000170907,0x00014400fe000031,0xef9500312a870f10\n"
".quad 0x01020fd81647f006,0xef9500312b070f14,0x001f84000f6007f0,0x010bda8ff837f007\n"
".quad 0xef9500312b870f0c,0x4ca0000800e7060a,0x0002f800860007f1,0x4ca0000800f7070b\n"
".quad 0x5c80000000470406,0xef9500312d070f16,0x0889c80206c21152,0x5b70080000a7060a\n"
".quad 0xef9500312c070f10,0x5b700a0000a7060a,0x0045780867c02056,0xef9500312c870f14\n"
".quad 0x5b70060000a7060a,0x5b70080000a7060a,0x041fc0022a8021a2,0x5b700a0000a7060c\n"
".quad 0x388000415b07120a,0x5b6503800ff70907,0x001fdc0072202152,0x5080000000670b09\n"
".quad 0x5b700b0000c7060c,0x0400000000270e0e,0x030e4800fce08391,0x5b70020000c70404\n"
".quad 0x5b6503800ff70e0f,0x5370060800280604,0x021cc404fea047f1,0x010000000017f00c\n"
".quad 0x5c9807800097000d,0x37707fbff0090404,0x011d7802e4200277,0x5371060800270a06\n"
".quad 0x3871003ff0070404,0x5b70030000670606,0x014578044fc01171,0x4c80000c00070412\n"
".quad 0x5b70060000670c0c,0x5c80000000c71204,0x005fd8042a40215e,0x5b71090000470a06\n"
".quad 0x5b70020000670c0c,0x4843038801071304,0x001fb400fec027f6,0x5980068000b7ff05\n"
".quad 0x4844038801170505,0x5c403080005704ff,0x001fd800fe200ffd,0xf0f800000000000f\n"
".quad 0x5c98078000a70004,0x5c98078000b70005,0x001fc400ffa007fd,0xe260000034800040\n"
".quad 0xf0f800000007000f,0x36f801c00047ff09,0x001fc840fec007f5,0x36f804400047030e\n"
".quad 0x4c1080000507090a,0x4c10080005170e0b,0x001fc400fcc00071,0xeed6200000070a04\n"
".quad 0x4c10800005270909,0x4c10080005370e0e,0x003fc80006424031,0x5c80000000670c06\n"
".quad 0x5c80000000470c04,0x5c9807800097000c,0x003ff4021fe007f2,0x5c98078000e7000d\n"
".quad 0xeede200000070c04,0xf0f800000007000f,0x001dc400fe4007f1,0x4c98078005070004\n"
".quad 0x4c98078005170005,0xeed6200000070404,0x001f8400062007f2,0x010415b00007f009\n"
".quad 0x508000000067090b,0x010000000007f00c,0x0040f800ffa007f1,0x0103ff000007f00d\n"
".quad 0x010000000017f00a,0x377006415b070a0c,0x011d78010620171e,0x5b70060000c70c0c\n"
".quad 0x5b70050000c70a0c,0x3880003ff8070606,0x0088f804ebc0275e,0x4c80000c00070606\n"
".quad 0x4c80000c00270606,0x4c80000c00270612,0x001d5c030620103e,0x5c80000000c71206\n"
".quad 0x377009415b07060a,0x3880003ff8070404,0x005fc40508c01032,0x5b70030000a70c06\n"
".quad 0x4c80000c0007040a,0x328003c15b07ff09,0x001fc400fec00ff5,0x4843038801071304\n"
".quad 0x4844038801170905,0x5c403080005704ff,0x007ff40204802038,0x4c80000c00270a04\n"
".quad 0x4c80000c0027040a,0xe24000000380000f,0x001ff400fec007f1,0x5c9807800ff70004\n"
".quad 0x010415b00007f005,0xe260000017800040,0x001fc800fec007f1,0x5c98078000c70006\n"
".quad 0x5c98078000d70007,0x010415b00007f010,0x001fc400fe200031,0x5080000000671005\n"
".quad 0x010000000007f00e,0x0103ff000007f00f,0x0040f80207c007fd,0x010000000017f004\n"
".quad 0x377007415b07040c,0x5b70060000c70c0e,0x0040f80207c0103e,0x5b70020000e7040c\n"
".quad 0x5c80000000c70a04,0x377005415b07040e,0x005fd801fcc01032,0x5b70020000e70c04\n"
".quad 0x4843038801070b0c,0x328002c15b07ff09,0x001ff400fda007f6,0x4844038801170909\n"
".quad 0x5c40308000970cff,0xe24000000500000f,0x001fc400fe2007f1,0x5c98078000a70012\n"
".quad 0x5c98078000b70013,0x5c9807800ff70004,0x001fc400ffa007f6,0x010415b00007f005\n"
".quad 0xe260000008000040,0x5c98078000c70004,0x001fc800fe2007f6,0x5c98078000d70005\n"
".quad 0x4c9807800527000a,0x4c9807800537000b,0x001fd801ffa000ff,0xeede200000070a04\n"
".quad 0xf0f800000007000f,0x1c1000da40070303,0x001fb400fec007f1,0x5c1008000087ff08\n"
".quad 0x1c1ffc97000703ff,0x5b620b800ff70807,0x001fd800ffe007fd,0xe2400fff7300000f\n"
".quad 0xe30000000007000f,0x0404000000070509,0x001fec00fe2007f1,0x4b62038801270907\n"
".quad 0x0105ff000007f014,0x5c9807800ff7000e,0x0040c40007a007f6,0x4ca000080137140f\n"
".quad 0x5c80000000e7040c,0x5080000000670d1b,0x001fc400fea007e1,0x0407f80000071309\n"
".quad 0x010000000017f01a,0x4b62038801470907,0x005c5000fee01031,0x53710d0800270c10\n"
".quad 0x5c9807800ff70018,0x5b70080001071010,0x002178002a2007e6,0x4ca0000801371419\n"
".quad 0x5c80000001871216,0x5b700d0001071a10,0x008174040bc0205e,0x5c8000000107161a\n"
".quad 0x5b710b0001a70c0c,0x5b700d0000c7100c,0x001fc407ffa0205d,0x5b8b03800ff70c87\n"
".quad 0xe24000002080000f,0x4b68038801570907,0x001fd800076007f1,0x5c9807800ff70016\n"
".quad 0x5c80000000c70e10,0x4ca0000801371417,0x0089c80304c00052,0x5c80000001670c14\n"
".quad 0x5c8000000107160c,0x5c80000001470e0e,0x0045740807aa1036,0x5b72090000c70410\n"
".quad 0x5b72090000e70416,0x5b84138001671087,0x003fb000fe2027f6,0x5ca0000000d70f09\n"
".quad 0x36bc03801007098f,0x5ca0000000c70e0c,0x001fc400ffa007f0,0x5c9807800097000d\n"
".quad 0xe32000000001000f,0x36b1038400071387,0x081fc400fe2007f1,0x010585000007f00d\n"
".quad 0x5c9807800ff7000e,0x040fffffffe70c14,0x001fc400fc2007f9,0x0420000000170c10\n"
".quad 0x4ca0000800370d0f,0x5c9807800147000c,0x1000c800fe6407f1,0x5c9807800097000d\n"
".quad 0x5c98078000970011,0x5c80000000e70404,0x000099820620083e,0x5c80000000e7120e\n"
".quad 0x5b72070000470c0c,0x5b72070000471012,0x083fd802fec0103d,0x5b84138001270c87\n"
".quad 0x5ca0000001471016,0x040000000017160c,0x001fc400fd8007f1,0x3664038000170c07\n"
".quad 0x1c1000000017160d,0x50900380e0078007,0x081fd400fcc007f1,0x5c1008000097ff13\n"
".quad 0x1c1ffffffff7160c,0x1c2ffffffff70914,0x001fc400fe2007f1,0x5ca0000000d71612\n"
".quad 0x5ca0000001370913,0x5ca0000001670c10,0x001fd800fc2007f3,0x5ca0000000971411\n"
".quad 0x5c9807800127000c,0x5c9807800137000d,0x0040f40107aa0032,0x5b72070000c7040c\n"
".quad 0x5b7207000107040e,0x5b84138000e70c87,0x001ffc00fe0017f1,0x5ca000000127100c\n"
".quad 0x5ca000000137110d,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff70c07\n"
".quad 0xe24000000680000f,0x5c9807800ff7000c,0x0040c80207a0003d,0x508000000067050d\n"
".quad 0x5b8403800ff70c8f,0x368d03fff0090487,0x001fc400fea017f1,0x5ca0000000c90404\n"
".quad 0x5ca0000000d90509,0x5c9807800049000c,0x007ffc0007a007f6,0x5c9807800099000d\n"
".quad 0x5c80000000c7120c,0xe32000000007000f,0x001fc403ffe0003d,0x5c8000000047120c\n"
".quad 0xe32000000007000f,0x4b62038801670607,0x001fe800fe2007f1,0x5c98078000c70006\n"
".quad 0x5c98078000d70007,0x5c98078000e7000c,0x0000e000ffa007f0,0x5c9807800097000d\n"
".quad 0xe24000000580000f,0x5b74050000c70606,0x0000d800fec017f6,0x1c1000000017060a\n"
".quad 0x5c1008000077ff0b,0x5b79020000a70604,0x001fc002fe20103d,0x5b8403800ff70407\n"
".quad 0x5ca0000000670a06,0x5ca0000000770b07,0x007ff40007a007ff,0xe32000000007000f\n"
".quad 0x5b8a03800ff70407,0xe24000001100000f,0x001fc000fe2007ed,0x5b6303800ff70507\n"
".quad 0x010000000000f006,0x010fff800000f007,0x001ff400fda007fd,0xe32000000000000f\n"
".quad 0x4b69038801770507,0xe24000000d00000f,0x001ff4010620071d,0x3880004690070404\n"
".quad 0x5080000000770507,0x5c9807800ff70006,0x003fc4020640103e,0x5c8000000067060a\n"
".quad 0x537105080027040c,0x010000000007f00a,0x0020f802064007f6,0x0103fe000007f00b\n"
".quad 0x3670053fd8070c10,0x5c80000000c7060a,0x003fd8020440103e,0x5b70030000a71006\n"
".quad 0x5c8000000067040a,0x1c0fff0000070707,0x001fd801fe201032,0x5b71020000a70a0c\n"
".quad 0x5c98078000670004,0x5c98078000770005,0x001fc002fe20103e,0x5b70050000c70404\n"
".quad 0x1c0fcb0000070507,0x5c98078000470006,0x007ffc0007a007ff,0xe32000000007000f\n"
".quad 0x5c70000000470406,0xe32000000007000f,0x001fb000fe2007f6,0x38000000b1470b04\n"
".quad 0x366503807ff70407,0x5c98078000a7000c,0x001fc000ffa007f0,0x5c98078000b7000d\n"
".quad 0xe24000009200000f,0x1c0fffffc0070404,0x081fc400fec007f6,0xe29000003b000000\n"
".quad 0x3828000000670405,0x1d00000001370506,0x001f8800fe8007f1,0x1d00000001070514\n"
".quad 0x1c00000000870104,0x3821038001270609,0x001fc400fe4007f4,0x4c47020000170404\n"
".quad 0x5b69038000971407,0x04000ffffff7040e,0x001f8400fe2007f1,0x5c9807800ff70007\n"
".quad 0x5c9807800007000f,0x0408000000070b10,0x001fd400fe2007f1,0x3828000001470b17\n"
".quad 0x5c9807800ff70004,0x5c98078000e70006,0x001fc000ffa007f0,0x5c9807800ff70005\n"
".quad 0xf0f800000000000f,0x38000000b1470b04,0x001fc400fec007f6,0xe29000002d000000\n"
".quad 0x1c0fffffc0070404,0x3828000000670404,0x001f9400fe2007f5,0x36f806c000b70c16\n"
".quad 0x5c1200000ff70404,0x1c0ffffffff71411,0x001fc400fe2007f1,0x384800000037040d\n"
".quad 0x36f8064000b7ff15,0x5c9807800067000a,0x001f8400fe2007f1,0x5c9807800077000b\n"
".quad 0x5c9807800ff70004,0x5c9807800ff70005,0x001fd800fe2007f1,0x0428000000071616\n"
".quad 0x5c98078001170014,0x1c00000128870d19,0x185fc40007e007f0,0x1c00000000171414\n"
".quad 0xef9500300007190c,0x5b007f8001570c07,0x181fccc0fe2607f1,0x5b007fa801570c1a\n"
".quad 0x5b007f8801570c18,0x5b207f8801570c1b,0x181fd000fc2a07f1,0x5b28038001570c1d\n"
".quad 0x5b30039801a70c1a,0x5b007f8001670c07,0x181fc400fe2007f1,0x5cc00da001871d1b\n"
".quad 0x5c10800001a70404,0x5b007f8801670c18,0x381fd800fc2007f4,0x5b207f8801670c1a\n"
".quad 0x5c10880001b70505,0x5b28038001670c1b,0x001fc440fec007f1,0x5cc00d2001871b1b\n"
".quad 0x5b007fa801670c1a,0x5b30039801a70c18,0x181fcc00fc2007f1,0x5b007f8001570d0c\n"
".quad 0x5c10080001b7ff07,0x5b207f8801570d1a,0x181fd8c0fe2007f1,0x5c10800001870505\n"
".quad 0x5b007f8801570d18,0x5b28060001570d1b,0x081fc400fcc007f1,0x5cc00d2001871b1a\n"
".quad 0x5b007fa801570d1b,0x5b30061801b70d18,0x181fc400fe2607f1,0x5b007f8001670d0c\n"
".quad 0x5c10880001a70707,0x5b007f8801670d1a,0x001fc400fcc607f3,0x5b207f8801670d1b\n"
".quad 0x5b28060001670d1c,0x5cc00da001a71c1b,0x001fc400fe2007fd,0x5b007fa801670d1a\n"
".quad 0x5b30061801a70d0c,0x5c10080001b7ff1a,0x001f9400fe2007f6,0x5c1080000187050d\n"
".quad 0x5c10880000c70718,0x5c1200000147110c,0x081fc400fe2007f1,0x5c10080001a7ff05\n"
".quad 0x1c10000000870a0a,0x3848000000370c07,0x001f8400fe6007f1,0x5b63038000971407\n"
".quad 0x3829000001d70c0c,0x5c10080000b7ff0b,0x001fc800fe2007f6,0x5c10800000e7071a\n"
".quad 0x5c10080000c7ff07,0x5c9807800047000c,0x001ff4001e2007f0,0x1c00000000871919\n"
".quad 0xef5500000007060c,0x5c98078001870004,0x001ff400ffa00ff0,0x5c98078001a70006\n"
".quad 0xe2400fffdc80000f,0xf0f800000007000f,0x001ff400fe0007f1,0x5c98078000a70006\n"
".quad 0x5c98078000b70007,0xf0f800000007000f,0x001fc0001ec007f0,0x0400000003f7170c\n"
".quad 0xef55000000070604,0x5b6503800ff70c0f,0x00063000fe000171,0xef45000001870e16\n"
".quad 0x5b6b03800ff71007,0xef45000001070e0a,0x001fc400362007f0,0x1d00000004090c0d\n"
".quad 0xef45000000890e06,0xe29000001b000000,0x101fc410fc4047f4,0x5c98078001770009\n"
".quad 0x5cf905c000d9ff14,0x5bf804c000c91615,0x001fc480fe8e0ff1,0x5bf805c000c90a05\n"
".quad 0x5cf805c000d90a11,0x5c47020001491509,0x001fc400fca107f1,0x5cf903c000d9ff04\n"
".quad 0x5bf80b4000c9ff17,0x5c4702000059040b,0x001fc400fe2007f1,0x3828000001d70904\n"
".quad 0x5cf803c000d90607,0x5bf8054000c9ff0c,0x001fc400fc4007f3,0x5c47020001191716\n"
".quad 0x0400000000170404,0x5c47020000c9070a,0x001fc400fe4007f1,0x36f80b400027ff05\n"
".quad 0x3828000001e70b06,0x5b6503800ff7040f,0x201fc400fc2007f1,0x36f804c00027160d\n"
".quad 0x5bdf7f8020470909,0x38f905c003e7ff0e,0x001fc400fe2007f1,0x5c4702000067050c\n"
".quad 0x36f805c000270a07,0x36f805400027ff06,0x001fc000fc4007f1,0x04000ffffff70f0a\n"
".quad 0x5c1200000ff00909,0x5c47020000e70d05,0x003ff400fe0000fd,0xef54000000070a09\n"
".quad 0x5c98078000c70004,0xf0f800000001000f,0x001fd400fe2007f1,0x5c1180000067ffff\n"
".quad 0x5c4707000077ff07,0x5c4707000047ff04,0x001f8400fea007f1,0x5c1088000077ff07\n"
".quad 0x5c4707000057ff05,0x5c1088000047ff04,0x001fc000fe8007f1,0x5c1200000ff70606\n"
".quad 0x0448000000071010,0x5c1008000057ff05,0x001fc800fe0007f6,0xf0f800000007000f\n"
".quad 0x5b44028000570409,0xe290000009000000,0x005fd801fec0003d,0x5c3000000097000a\n"
".quad 0x364a02800207ff09,0x38c2050001f70909,0x001fc400ffa007ed,0x5b6503800ff70907\n"
".quad 0xf0f800000000000f,0x1d0000000407090b,0x301fc400fe8407f1,0x5bf802400097ff0a\n"
".quad 0x5bf802c00097040c,0x5cf803c000b70604,0x001fc000fc2007f5,0x5cf903c000b7ff05\n"
".quad 0x5c47020000a70404,0x5c47020000c70505,0x001fc400fe0007fd,0xf0f800000007000f\n"
".quad 0x0102168c2357f007,0xe29000001f000000,0x081fc4c0fe2007f5,0x010c90fdaa27f00a\n"
".quad 0x5b007f8000770406,0x5b007f8000a7040f,0x181fc800fc2607f1,0x5b007f880077040b\n"
".quad 0x5b207f880077040c,0x5b007fa800a7040e,0x181fc4c0fe2607f1,0x5b2803000077040d\n"
".quad 0x5b007f8800a70411,0x5b207f8800a70414,0x001fc400fc2007f1,0x5b28078000a70416\n"
".quad 0x5b007f8000770515,0x5b30079800e7040e,0x181fc4c0fe2007f1,0x5cc0062000b70d0b\n"
".quad 0x5b007fa800770517,0x5b007f880077050c,0x281fc400fc2007f1,0x5cc00a2001171614\n"
".quad 0x5b207f880077050f,0x5b280a8000770511,0x001fcc40fe2007f1,0x5c10800000e70b0b\n"
".quad 0x5b300a980177050d,0x5b007f8000a70515,0x001fc400fc2007f1,0x5cc007a000c7110e\n"
".quad 0x5c1008000147ff0c,0x5c10800000d70b0b,0x181fc4c0fe2607f1,0x5b007f8800a7050d\n"
".quad 0x5b207f8800a7050f,0x5b280a8000a70514,0x001fc400fc6007f2,0x5b007fa800a70516\n"
".quad 0x5c10880000e70c0a,0x5cc007a000d7140d,0x001fd800fe2007f5,0x5b300a9801670505\n"
".quad 0x5c10080000d7ff0c,0x5c10800000570a0a,0x001fc400fcc007f1,0x5c10080000c7ff05\n"
".quad 0x1c1ffffffff70aff,0x5b630b800ff70507,0x001fc000fec207f6,0x5b007fa800770407\n"
".quad 0x5b30031800770406,0x5c98078000a70004,0x001fd800fec007fd,0xf0f800000000000f\n"
".quad 0x5c108000006706ff,0x5c10880000b70bff,0x001fc000fea007f1,0x5c10880000470404\n"
".quad 0x1c00000000170909,0x5c10080000570505,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170404,0x5c1008000057ff05,0x001fd000fe2807f1,0x38f802c000a70404\n"
".quad 0x38f902c000a7ff06,0x010001000007f007,0x001fc400fea007e1,0x1c10000000170405\n"
".quad 0x1d0000003fe70904,0x5c1008000067ff06,0x001fc840fe8607f1,0x5b007f8000770409\n"
".quad 0x5b007fa800770407,0x38f803400017050a,0x001fd800fe6007e1,0x5b30049800770405\n"
".quad 0x38f903400017ff04,0x5c10800000a7ff0c,0x001fc400fec007f6,0x5c10080000470505\n"
".quad 0x5c4702000107050d,0x5c98078000c70004,0x001ffc00ffe007f0,0x5c98078000d70005\n"
".quad 0xe32000000007000f,0xe2400fffff87000f,0x001f8000fc0007e0,0x50b0000000070f00\n"
".quad 0x50b0000000070f00,0x50b0000000070f00,0x001c4400fe0007f6,0x4c98078000870001\n"
".quad 0x1c0ffffffd070101,0xf0c8000002570000,0x081fd841fe20071f,0xf0c8000002170002\n"
".quad 0x4f107f8000270003,0x4e00010000270002,0x001f8440fe2007f6,0x5b30011800370006\n"
".quad 0x3848000000470600,0x3828000001c70603,0x081fc440fec007f4,0x5b6503800ff70607\n"
".quad 0x4c10800005070004,0x4c10080005170305,0x001fd800fe0007f6,0x4c10800005270002\n"
".quad 0x4c10080005370303,0xe24000005d80000f,0x001fc000fd8007f1,0x4b68038800070607\n"
".quad 0x4c47020000170108,0x04000ffffff70800,0x001fd800fe0007fd,0xe30000000000000f\n"
".quad 0x010709ad4e57f00c,0xe290000028000000,0x181fd0c0fe2607f1,0x5b007f8000c70607\n"
".quad 0x5b027f8800c70609,0x5b2f7f8800c7060a,0x081fc400fcc007f6,0x5b29038000c70607\n"
".quad 0x5cc0052000970707,0x3829000000d70709,0x001fd800fe8007f1,0x010ffffb7407f00c\n"
".quad 0x4b63038800170607,0x5bdf7f8010970707,0x001fd400fc2607f1,0x5b00030000c70706\n"
".quad 0x5b007fa800c70709,0x010151d07eb7f00c,0x0000f400fe8207f1,0x5b30031800970706\n"
".quad 0x1c0ffffff4080707,0x5cb8000000772b0e,0x001f84c0fea60ff1,0x5b007f8000c70607\n"
".quad 0x5b027f8800c70609,0x5b29038000c7060a,0x081fc400fec207f6,0x5b2f7f8800c70607\n"
".quad 0x5cc003a000970a07,0x3829000000370709,0x001f9800fe2007f5,0x3663038246070607\n"
".quad 0x5bdf7f8010970707,0x010ffffff9f7f009,0x081fc440fec607f1,0x5b00030000970706\n"
".quad 0x5b007fa800970709,0x5b30031800970706,0x009c78000be007ff,0x1c0ffffff4080707\n"
".quad 0x5cb8000000772b0a,0x4c80000800270a0a,0x0145780073a0085f,0x5c80000000a70a0c\n"
".quad 0x5cb8000000672b10,0x4c80000800270e06,0x008478110bc0215f,0x5b7006000067060c\n"
".quad 0x4c8000080027100a,0x5b70060000a70a18,0x001ff4020640183d,0x388000400807180a\n"
".quad 0x5080000000770b0d,0x1c0fcb0000070b0c,0x003f84020640103e,0x5c80000000c70c10\n"
".quad 0x5371080800470a06,0x010000000007f010,0x0020f802064007f6,0x0103fe000007f011\n"
".quad 0x3670083fd807060e,0x5c80000000670c06,0x001fd401f6201032,0x5b70060000670e14\n"
".quad 0xeed6200000070404,0x4b62038800670c07,0x001fd800fe201021,0x5c80000001470a10\n"
".quad 0x1c0fff0000071509,0x5c98078001470012,0x0040f400fee01031,0x5b7105000107100e\n"
".quad 0x5c98078000970013,0x5b70080001270e12,0x041ff400fec01ffd,0xf0f800000000000f\n"
".quad 0x5c98078000f7000d,0xe260000091800040,0x001ff400fe0007f1,0x5c98078000c70012\n"
".quad 0x5c98078000d70013,0xf0f800000007000f,0x005fc400ffc00030,0x4c80000c0027120a\n"
".quad 0xe29000000e000000,0x5b6503800ff70a07,0x001fe800fe2007f1,0x0407fffffff70b09\n"
".quad 0x5c98078000a7000c,0x5c98078000b7000d,0x0020f400e30007ed,0x4b65000800770907\n"
".quad 0x5c80000000c0ff0c,0x4c80000800870c0a,0x001ffc00fcc01031,0x5cb0000000a71e09\n"
".quad 0x0407fe0000070d0e,0x4b62038801070e07,0x0045780007e010ff,0xef54000000070009\n"
".quad 0x5cb8000000972b0a,0x4b71060800a70a10,0x00fff4042a40215e,0x4b71080800c70a10\n"
".quad 0x4b71080800e70a0a,0xf0f800000000000f,0x041ff400fec007f1,0x5c98078000c7000a\n"
".quad 0x5c98078000870013,0xe26000009d800040,0x041fc001ffa000bd,0xef44000000070009\n"
".quad 0xf0f800000007000f,0x1c00000000170914,0x081fd000fec007f6,0xe29000001e000000\n"
".quad 0x0400000000171400,0x3848000000670015,0x001fc000062007f0,0x3664038000170007\n"
".quad 0xef9500312a87150e,0x01020fd81647f008,0x0001ec20fe000051,0xef9500312b07150c\n"
".quad 0x010bda8ff837f009,0xef9500312b871510,0x0010f800fe2007e1,0x4ca0000801170812\n"
".quad 0x4ca0000801270913,0x5c80000000a70a08,0x0889c80206c21152,0x5b7007000127080e\n"
".quad 0xef9500312c071512,0x5b70060000e7080e,0x0101f40864402056,0xef9500312c87150c\n"
".quad 0x5b70080000e7080e,0xef9500312d071510,0x004550442e40115e,0x5b70090000e7080e\n"
".quad 0x5b70060000e7080e,0x388000415b07180c,0x010e48042a4007f0,0x5b6503800ff70007\n"
".quad 0x5080000000670d00,0x5b70080000e7080e,0x001fdc10702047f6,0x0400000000271410\n"
".quad 0x5b70050000e70a0a,0x5b6503800ff7100f,0x009fd408fe20c392,0x537007080048080a\n"
".quad 0x010000000017f00e,0x5c9807800007000f,0x010988004fc08731,0x37707fbff0090a0a\n"
".quad 0x5371070800470c08,0x5b70040000870810,0x0086780872403156,0x3871003ff0070a08\n"
".quad 0x5b70070001070e10,0x4c80000c0007080a,0x008544042bc0c15e,0x5c80000001070a0e\n"
".quad 0x5b71050000e70c08,0x5b7007000087100e,0x001f9804fec007f7,0x4843038801370b00\n"
".quad 0x5980078000d7ff08,0x4844038801470809,0x001ff401ffa007ed,0x5c403080009700ff\n"
".quad 0xf0f800000000000f,0xe26000002b000040,0x0000d080062007fd,0xf0f800000007000f\n"
".quad 0x5c80000000e70606,0x5c80000000e70404,0x001fc000ffe010f1,0xeede200000070204\n"
".quad 0xe30000000007000f,0x010415b00007f000,0x001fc400fe000771,0xeed6200000070404\n"
".quad 0x010000000007f00a,0xe290000013000000,0x001ff400062007f0,0x0103ff000007f00b\n"
".quad 0x5080000000670009,0x010000000017f008,0x0040c40207c0103e,0x377005415b07080a\n"
".quad 0x5b70050000a70a0e,0x5b70040000e70808,0x009d7804ebc0475e,0x3880003ff8070606\n"
".quad 0x4c80000c00070606,0x4c80000c00270606,0x0040c40207c0223e,0x4c80000c0027060a\n"
".quad 0x5c80000000870a06,0x377005415b07060c,0x001fc40306200747,0x3880003ff8070404\n"
".quad 0x5b70030000c70806,0x4843038801370b00,0x003fd802fec02856,0x4c80000c00070408\n"
".quad 0x328003c15b07ff0c,0x4844038801470c05,0x0040d004070007e1,0x5c403080005700ff\n"
".quad 0x4c80000c00270804,0x4c80000c00270408,0x001fd800fe201ffd,0xf0f800000000000f\n"
".quad 0x5c9807800ff7000c,0x010415b00007f00d,0x001fc000fe2007fd,0xe260000014000040\n"
".quad 0x5c98078000e70006,0x5c98078000f70007,0x001fc800fe0007fd,0xf0f800000007000f\n"
".quad 0x010415b00007f00c,0xe29000000f800000,0x001fc400062007f0,0x010000000007f00a\n"
".quad 0x5080000000670c05,0x0103ff000007f00b,0x005c780207c007fd,0x010000000017f004\n"
".quad 0x377005415b07040a,0x5b70050000a70a0a,0x0040f80207c0083e,0x5b70020000a7040e\n"
".quad 0x5c80000000e7080a,0x377004415b070a04,0x005f9801fec01032,0x5b70050000470e04\n"
".quad 0x484303880137090a,0x328002c15b07ff00,0x001ff400fda007f6,0x4844038801470000\n"
".quad 0x5c40308000070aff,0xf0f800000000000f,0x001fc400fe2007f1,0x5c9807800087000a\n"
".quad 0x5c9807800097000b,0x5c9807800ff7000c,0x001fc400ffa007f6,0x010415b00007f00d\n"
".quad 0xe260000003800040,0x5c98078000e70004,0x0003c400ffa007f0,0x5c98078000f70005\n"
".quad 0xf0f800000007000f,0xeede200000070204,0x001fc400fec007ff,0xe30000000007000f\n"
".quad 0x0404000000070d00,0x4b62038801570007,0x001fd800ff6007f1,0x0105ff000007f01a\n"
".quad 0x5c9807800ff7000e,0x4ca0000801671a0f,0x0040c400fe00003d,0x5c80000000e70c10\n"
".quad 0x0407f80000070b00,0x5080000000671117,0x0040c400fe2007f5,0x010000000017f016\n"
".quad 0x4b62038801770007,0x53710b0800471012,0x0040d400fc2007fb,0x5c9807800ff70014\n"
".quad 0x4ca0000801671a15,0x5b70090001271218,0x0080f8030bc00853,0x5c80000001470a12\n"
".quad 0x5b700b0001871614,0x5c80000001471216,0x0040f40207a0103e,0x5b71090001671010\n"
".quad 0x5b700b0001071410,0x5b8b03800ff71087,0x001fc400fe201ffd,0xe24000001f00000f\n"
".quad 0x4b68038801870007,0x5c9807800ff70012,0x00014800fec0003b,0x5c80000001070e14\n"
".quad 0x4ca0000801671a13,0x5c80000001271018,0x2840d8044e401826,0x5c80000001471210\n"
".quad 0x5c80000001870e0e,0x5b72050001070c12,0x00bfd8022ba0403d,0x5b72050000e70c14\n"
".quad 0x5b84138001471287,0x5ca0000001170f0f,0x001ff400fe0007ed,0x36bc038010070f8f\n"
".quad 0x5ca0000001070e0e,0xe32000000001000f,0x001fec00fe2007f1,0x36b1038400070b87\n"
".quad 0x010585000007f000,0x5c9807800ff70010,0x001f9040fe2007f1,0x4ca0000800570011\n"
".quad 0x0420000000170e00,0x040fffffffe70e0e,0x003fc40006440031,0x5c80000001070c0c\n"
".quad 0x5c80000001070a0a,0x5c98078000070010,0x0000f582062007f5,0x5c98078000f70011\n"
".quad 0x5b72050000c70e12,0x5b72050000c71010,0x081fd803fcc0103d,0x5b84138001071287\n"
".quad 0x5ca0000000e70013,0x0400000000171300,0x001fc400fd8007f1,0x3664038000170007\n"
".quad 0x1c10000000171310,0x50900380e0078007,0x001f9400fec007f1,0x5c10080000f7ff11\n"
".quad 0x1c1ffffffff71300,0x1c2ffffffff70f0e,0x001fc400fe2007f1,0x5ca0000001071312\n"
".quad 0x5ca0000001370010,0x5ca0000001170f00,0x001f9800fe4007f3,0x5ca0000000f70e11\n"
".quad 0x5c9807800127000e,0x5c9807800007000f,0x0040f40107a00022,0x5b72050000e70c0e\n"
".quad 0x5b72050001070c0c,0x5b84138000c70e87,0x001ffc00fe0017f1,0x5ca000000127100e\n"
".quad 0x5ca000000007110f,0xe32000000007000f,0x001fc003ffa0003d,0x5b8203800ff71007\n"
".quad 0xe24000000680000f,0x5c9807800ff7000e,0x0040c80207a0003d,0x5080000000670d0f\n"
".quad 0x5b8403800ff70e8f,0x368d03fff0090c87,0x001fc400fea017f1,0x5ca0000000e90c00\n"
".quad 0x5ca0000000f90d11,0x5c9807800009000e,0x007ffc0007a007f6,0x5c9807800119000f\n"
".quad 0x5c80000000e70a0e,0xe32000000007000f,0x001fc403ffe0003d,0x5c80000000c70a0e\n"
".quad 0xe32000000007000f,0x4b62038801970c07,0x001fc000ff6007f1,0x5c98078000e7000c\n"
".quad 0x5c9807800147000e,0x5c9807800097000f,0x005fd800070007fd,0xe24000000500000f\n"
".quad 0x5b74080000e70c0c,0x1c10000000170c0e,0x0040f40006c007f6,0x5c10080000d7ff0f\n"
".quad 0x5b79050000e70c0a,0x5b8403800ff70a07,0x001ffc00fe0017f1,0x5ca0000000c70e0c\n"
".quad 0x5ca0000000d70f0d,0xe32000000007000f,0x001fb403ffa0003d,0x5b8a03800ff70a07\n"
".quad 0xe24000001080000f,0x5b6303800ff70b07,0x001ff400fe0007f1,0x010000000000f00c\n"
".quad 0x010fff800000f00d,0xe32000000000000f,0x001c7400ffa007ed,0x4b69038801a70b07\n"
".quad 0xe24000000c80000f,0x3880004690070a0a,0x0040f800ffa00831,0x5080000000770b0d\n"
".quad 0x5c9807800ff7000c,0x5c80000000c70c10,0x001fd801fe201032,0x5371080800470a0e\n"
".quad 0x010000000007f010,0x0103fe000007f011,0x0040f80107c01032,0x3670083fd8070e12\n"
".quad 0x5c80000000e70c0e,0x5b70060000e7120c,0x0040c800fee01021,0x5c80000000c70a10\n"
".quad 0x1c0fff0000070d09,0x5b7105000107100e,0x0040f800fec00ff1,0x5c98078000c7000a\n"
".quad 0x5c9807800097000b,0x5b70080000e70a0a,0x001ffc00fe0017f1,0x1c0fcb0000070b0d\n"
".quad 0x5c98078000a7000c,0xe32000000007000f,0x001fd803ffe0003d,0x5c70000000a70a0c\n"
".quad 0xe32000000007000f,0x38000000b1470d08,0x001ff400fe0007ed,0x366503807ff70807\n"
".quad 0x5c98078000d70014,0xe24000009580000f,0x001fd800fec007f0,0x1c0fffffc0070808\n"
".quad 0xe29000003b800000,0x3828000000670809,0x001fd000fe2207f1,0x1d0000000137090c\n"
".quad 0x1d0000000107090b,0x1c00000000870108,0x001fc800fe8007e2,0x3821038001270c11\n"
".quad 0x4c47020000170808,0x5b69038001170b07,0x081fc400fe2007f1,0x04000ffffff70812\n"
".quad 0x5c98078000d7000f,0x0408000000070d10,0x001fc400fe2007e1,0x3828000001470d1f\n"
".quad 0x5c9807800ff70009,0x5c98078000a7000e,0x001fc000fe8007f1,0x5c98078001270008\n"
".quad 0x5c9807800ff7000c,0x5c9807800ff7000d,0x001fd800fe0007fd,0xf0f800000000000f\n"
".quad 0x38000000b1470f0c,0xe29000002e000000,0x001fd400fe2007f6,0x1c0fffffc0070c0c\n"
".quad 0x3828000000670c0c,0x36f80a4000b70a0f,0x001fc400fca007f1,0x5c1200000ff70c0c\n"
".quad 0x1c0ffffffff70b14,0x3848000000370c0e,0x001fc400fe2007f1,0x36f8054000b7ff15\n"
".quad 0x5c9807800087000a,0x5c9807800097000b,0x001fc400fc2007f1,0x5c9807800ff7000c\n"
".quad 0x5c9807800ff7000d,0x0428000000070f17,0x001fc000fec007f1,0x5c98078001470016\n"
".quad 0x1c00000128870e20,0x1c00000000171616,0x181fc4c2fe20003f,0xef9500300007200e\n"
".quad 0x5b007f8001570e0b,0x5b007fa801570e1d,0x181fc8c0fe2207f1,0x5b007f8001770e1c\n"
".quad 0x5b007f8801570e1e,0x5b207f8801570e23,0x181fc440fe2007e1,0x5b28058001570e24\n"
".quad 0x5b30059801d70e21,0x5b007f8801770e1b,0x001fc4c0fe2607f1,0x5b207f8801770e1a\n"
".quad 0x5b007fa801770e25,0x5b280e0001770e1d,0x001fc800fe2007e1,0x5b007f8001570f0b\n"
".quad 0x5cc011a001e7241e,0x5c10800002170c0c,0x181fc400fe2007f1,0x5b300e1802570e0e\n"
".quad 0x5cc00d2001b71d21,0x5b007f8801570f1a,0x001fc440fe2007e1,0x5b207f8801570f1c\n"
".quad 0x5b28058001570f1d,0x5c10880001e70d1b,0x001fc400fe2007f4,0x5b007f8001770f0d\n"
".quad 0x5cc00e2001a71d1c,0x5c1008000217ff1a,0x181fc4c0fe2007e1,0x5c10800000e71b0e\n"
".quad 0x5b007f8801770f1b,0x5b207f8801770f1d,0x001fcc00fe4207f1,0x5b28068001770f1e\n"
".quad 0x5b007fa801570f21,0x5c10880001c71a1a,0x081fd440fe2007e1,0x5cc00ea001b71e1d\n"
".quad 0x5b007fa801770f1b,0x5b30059802170f0b,0x001fd800fe2007f1,0x5b30069801b70f0f\n"
".quad 0x5c10080001d7ff1b,0x5c10800000b70e0d,0x001f84001e2007f0,0x5c10880000f71a0e\n"
".quad 0xef55000000070a0c,0x5c1200000167141a,0x001fc400fe2007f4,0x5b63038001171607\n"
".quad 0x5c10080001b7ff0f,0x1c1000000087080b,0x001f8400fe8207f1,0x3848000000371a08\n"
".quad 0x3829000001d71a1b,0x5c1008000097ff09,0x001fc400fe2007f1,0x5c1080000127081a\n"
".quad 0x5c98078000b70008,0x1c00000000872020,0x001f8400fe400ff1,0x5c98078000e7000c\n"
".quad 0x5c98078000f7000d,0x5c10080001b7ff0b,0x001ff400fec007f0,0x5c98078001a7000a\n"
".quad 0xe2400fffdc00000f,0xf0f800000007000f,0x001fc800fe0007fd,0xf0f800000007000f\n"
".quad 0x5c98078000870015,0xe290000022000000,0x001fc0001ec007f0,0x0400000003f71f11\n"
".quad 0xef5500000007150c,0x5b6503800ff7110f,0x00063000fe000171,0xef4500000107120a\n"
".quad 0x5b6b03800ff71007,0xef4500000187120e,0x021f8408fe2001b1,0xef45000000891208\n"
".quad 0x5c98078000b7001c,0x5c98078000e70016,0x001fd000fe2007f1,0x5c98078000f70017\n"
".quad 0x1d0000000409110b,0x5c98078000a7001a,0x001f8400fe2407f1,0x5bf80bc001191614\n"
".quad 0x5cf90e4000b9ff0e,0x5bf80b400119ff0f,0x001fc400fe2e0ff4,0x5cf80e4000b91a0d\n"
".quad 0x5c47020000e91417,0x5bf80e4001191a0c,0x001f8400fe6107f1,0x5cf904c000b9ff0a\n"
".quad 0x5c47020000d90f16,0x3828000001d7170d,0x001fcc00fe2007f1,0x5cf804c000b9080b\n"
".quad 0x5c47020000c90a1c,0x5bf80d400119ff0c,0x001f8400fe2007f1,0x0400000000170d08\n"
".quad 0x36f80b400027ff09,0x3828000001e71c0a,0x001fc400fe2007f3,0x5c47020000c90b1a\n"
".quad 0x5b6503800ff7080f,0x36f80bc00027160e,0x001f8400fe2007f1,0x38f90e4003e7ff0f\n"
".quad 0x5c47020000a7090b,0x5bdf7f802087170a,0x001fc400fe2007f3,0x36f80e4000271a0d\n"
".quad 0x5c47020000f70e09,0x04000ffffff7130f,0x0003f400fe0007f2,0x5c1200000ff00a0a\n"
".quad 0x36f80d400027ff0c,0xef54000000070f0a,0x001fc401ffa007f0,0x5c98078000b70008\n"
".quad 0xf0f800000001000f,0x5c11800000c7ffff,0x001fc400fea007f1,0x5c47070000d7ff0a\n"
".quad 0x5c4707000087ff08,0x5c10880000a7ff0d,0x001fc400fc2007f5,0x5c4707000097ff09\n"
".quad 0x5c1088000087ff08,0x5c1200000ff70c0c,0x001fd800fe0007f4,0x0448000000071010\n"
".quad 0x5c1008000097ff09,0xf0f800000007000f,0x0000f400fe4007f0,0x5b4404800097080a\n"
".quad 0xe290000008800000,0x5c30000000a7000b,0x001fb402fec00ff6,0x364a04800207ff0a\n"
".quad 0x38c2058001f70a0a,0x5b6503800ff70a07,0x101fc400fe2007fd,0xf0f800000000000f\n"
".quad 0x1d00000004070a0b,0x5bf8044000a7ff0e,0x001fd580fe2007f4,0x5bf804c000a7080f\n"
".quad 0x5cf806c000b70c08,0x5cf906c000b7ff09,0x001ff400fe0007e1,0x5c47020000e70808\n"
".quad 0x5c47020000f70909,0xf0f800000007000f,0x001fd400fe2007f0,0x0102168c2357f00d\n"
".quad 0xe29000001f800000,0x010c90fdaa27f00e,0x181fc440fe2607f1,0x5b007f8000d7080b\n"
".quad 0x5b007f8000e70813,0x5b007f8800d7080c,0x181fc4c0fe4007e1,0x5b207f8800d7080f\n"
".quad 0x5b007fa800e70812,0x5b28058000d70811,0x001fc4c0fe2607f1,0x5b007f8800e70814\n"
".quad 0x5b207f8800e70815,0x5b28098000e70816,0x001fc400fe2007e1,0x5b007f8000d70917\n"
".quad 0x5b30099801270812,0x5cc007a000c7110c,0x001fc4c0fe2607f1,0x5b007fa800d7091a\n"
".quad 0x5b007f8800d7090f,0x5cc00aa001471616,0x001fc540fe2007e1,0x5b207f8800d70914\n"
".quad 0x5b280b8000d70915,0x5c10800001270c0c,0x001fc400fe6207f1,0x5b300b9801a70911\n"
".quad 0x5b007f8000e70913,0x5cc00a2000f71512,0x181fc400fe2007e1,0x5c1008000167ff0f\n"
".quad 0x5c10800001170c14,0x5b007f8800e7090c,0x001fd4c0fe2607f1,0x5b207f8800e70911\n"
".quad 0x5b28098000e70916,0x5b007fa800e7090e,0x001fd400fe2007e1,0x5cc008a000c71611\n"
".quad 0x5c10880001270f0c,0x5b30099800e70909,0x001fc400fec007f1,0x5c1008000117ff0e\n"
".quad 0x5c10800000970c0c,0x5c10080000e7ff09,0x081fd800fe2007e6,0x1c1ffffffff70cff\n"
".quad 0x5b630b800ff70907,0x5b007fa800d7080d,0x001ff400fe0007f6,0x5b30059800d7080b\n"
".quad 0x5c98078000c70008,0xf0f800000000000f,0x001fd800fec007f1,0x5c9807800147000c\n"
".quad 0x5c10800000b70bff,0x5c10880000c70cff,0x001fc000fea007f1,0x5c10880000870808\n"
".quad 0x1c00000000170a0a,0x5c10080000970909,0x001fd800fec007f6,0xf0f800000007000f\n"
".quad 0x1c10000000170808,0x5c1008000097ff09,0x001fd000fe2807f1,0x38f804c000a70808\n"
".quad 0x38f904c000a7ff0c,0x010001000007f00b,0x001fc400fea007e1,0x1c10000000170809\n"
".quad 0x1d0000003fe70a08,0x5c10080000c7ff0a,0x001fc840fe8607f1,0x5b007f8000b7080d\n"
".quad 0x5b007fa800b7080b,0x38f805400017090c,0x001fd800fe6007e1,0x5b30069800b70809\n"
".quad 0x38f905400017ff08,0x5c10800000c7ff0a,0x001fc000fec007f6,0x5c10080000870909\n"
".quad 0x5c47020001070914,0x5c9807800147000b,0x001f8000ffe007ff,0xe32000000007000f\n"
".quad 0xe2400fffff87000f,0x50b0000000070f00,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000300000001,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000040,0x0000000000000ca4,0x0000000000000000\n"
".quad 0x0000000000000001,0x0000000000000000,0x000000030000000b,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000ce4,0x0000000000001664,0x0000000000000000\n"
".quad 0x0000000000000001,0x0000000000000000,0x0000000200000013,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002348,0x0000000000000588,0x0000003200000002\n"
".quad 0x0000000000000008,0x0000000000000018,0x7000000000000029,0x0000000000000000\n"
".quad 0x0000000000000000,0x00000000000028d0,0x00000000000003a8,0x0000000000000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x700000000000007d,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002c78,0x0000000000000050,0x0000001e00000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000207,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002cc8,0x0000000000000050,0x0000001f00000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000384,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002d18,0x0000000000000048,0x0000002000000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000516,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002d60,0x0000000000000054,0x0000002100000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000691,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002db4,0x0000000000000054,0x0000002200000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000829,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002e08,0x0000000000000048,0x0000002300000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x70000000000009dc,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002e50,0x0000000000000050,0x0000002400000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x7000000000000b66,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000002ea0,0x0000000000000054,0x0000002500000003\n"
".quad 0x0000000000000004,0x0000000000000000,0x000000010000011b,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000002ef4,0x0000000000000060,0x0000001e00000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x000000010000016e,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000002f54,0x0000000000000150,0x0000001e00000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x000000010000029b,0x0000000000000002\n"
".quad 0x0000000000000000,0x00000000000030a4,0x0000000000000074,0x0000001f00000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x00000001000002e9,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003118,0x0000000000000150,0x0000001f00000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000426,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003268,0x0000000000000004,0x0000002000000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x000000010000047b,0x0000000000000002\n"
".quad 0x0000000000000000,0x000000000000326c,0x0000000000000150,0x0000002000000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x00000001000005aa,0x0000000000000002\n"
".quad 0x0000000000000000,0x00000000000033bc,0x0000000000000068,0x0000002100000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x00000001000005f8,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003424,0x0000000000000150,0x0000002100000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x000000010000072f,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003574,0x0000000000000060,0x0000002200000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000782,0x0000000000000002\n"
".quad 0x0000000000000000,0x00000000000035d4,0x0000000000000150,0x0000002200000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x00000001000008d9,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003724,0x0000000000000004,0x0000002300000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000935,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003728,0x0000000000000150,0x0000002300000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000a7a,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003878,0x0000000000000060,0x0000002400000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000acd,0x0000000000000002\n"
".quad 0x0000000000000000,0x00000000000038d8,0x0000000000000150,0x0000002400000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000bfa,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003a28,0x000000000000006c,0x0000002500000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000c48,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003a94,0x0000000000000150,0x0000002500000000\n"
".quad 0x0000000000000004,0x0000000000000000,0x0000000100000c96,0x0000000000000002\n"
".quad 0x0000000000000000,0x0000000000003be8,0x0000000000001320,0x0000000000000000\n"
".quad 0x0000000000000008,0x0000000000000000,0x0000000100000032,0x0000000000000006\n"
".quad 0x0000000000000000,0x0000000000004f20,0x0000000000001840,0x1e00003300000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x00000001000001c1,0x0000000000000006\n"
".quad 0x0000000000000000,0x0000000000006760,0x0000000000001800,0x2500003400000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x0000000100000337,0x0000000000000006\n"
".quad 0x0000000000000000,0x0000000000007f60,0x0000000000000300,0x0e00003500000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x00000001000004d0,0x0000000000000006\n"
".quad 0x0000000000000000,0x0000000000008260,0x0000000000001940,0x2600003600000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x0000000100000646,0x0000000000000006\n"
".quad 0x0000000000000000,0x0000000000009ba0,0x00000000000017c0,0x1e00003700000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x00000001000007d5,0x0000000000000006\n"
".quad 0x0000000000000000,0x000000000000b360,0x0000000000000340,0x1200003800000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x0000000100000991,0x0000000000000006\n"
".quad 0x0000000000000000,0x000000000000b6a0,0x0000000000001840,0x1e00003900000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x0000000100000b20,0x0000000000000006\n"
".quad 0x0000000000000000,0x000000000000cee0,0x00000000000017c0,0x2600003a00000003\n"
".quad 0x0000000000000020,0x0000000000000000,0x0000000500000006,0x000000000000f020\n"
".quad 0x0000000000000000,0x0000000000000000,0x00000000000000a8,0x00000000000000a8\n"
".quad 0x0000000000000008,0x0000000500000001,0x0000000000002ef4,0x0000000000000000\n"
".quad 0x0000000000000000,0x000000000000b790,0x000000000000b790,0x0000000000000008\n"
".quad 0x0000000600000001,0x0000000000000000,0x0000000000000000,0x0000000000000000\n"
".quad 0x0000000000000000,0x0000000000000000,0x0000000000000008\n"
".text\n");

extern "C" {

extern const unsigned long long fatbinData[7715];

}


extern "C" {

static const __fatBinC_Wrapper_t __fatDeviceText __attribute__ ((aligned (8))) __attribute__ ((section (".nvFatBinSegment")))=
 { 0x466243b1, 1, fatbinData, 0 };

}
# 7 "./test_class_keep/Coulomb.cudafe1.stub.c" 2 3
static void __device_stub__Z29__kernel_enlarge_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvP7double2Pd(cuDoubleComplex *, double *);
static void __device_stub__Z26kernel_coulomb_sph_cutoff0ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z26kernel_coulomb_sph_cutoff1ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z26kernel_coulomb_sph_cutoff2ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst0ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst1ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst2ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *, cuDoubleComplex *);
static void __device_stub__Z28__kernel_lessen_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvPdS0_(double *, double *);
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll_15_Coulomb_cpp1_ii_9a02c5bc(void) __attribute__((__constructor__));
static void __device_stub__Z29__kernel_enlarge_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvP7double2Pd(cuDoubleComplex *__par0, double *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, double *))__kernel_enlarge_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, double *))__kernel_enlarge_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> ))); };}
template<> void __wrapper__device_stub___kernel_enlarge_1Dindexing__<64U,48U,32U,64U,72U,80U>( ::cuDoubleComplex *&__cuda_0,double *&__cuda_1){__device_stub__Z29__kernel_enlarge_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvP7double2Pd( (::cuDoubleComplex *&)__cuda_0,(double *&)__cuda_1);}
static void __device_stub__Z26kernel_coulomb_sph_cutoff0ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff0<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff0<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff0<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z26kernel_coulomb_sph_cutoff0ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z26kernel_coulomb_sph_cutoff1ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff1<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff1<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff1<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z26kernel_coulomb_sph_cutoff1ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z26kernel_coulomb_sph_cutoff2ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff2<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff2<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff2<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z26kernel_coulomb_sph_cutoff2ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst0ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst0<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst0<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst0<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z31kernel_coulomb_sph_cutoff_cnst0ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst1ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst1<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst1<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst1<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z31kernel_coulomb_sph_cutoff_cnst1ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z31kernel_coulomb_sph_cutoff_cnst2ILi192ELi192ELi192EEvP7double2S1_(cuDoubleComplex *__par0, cuDoubleComplex *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst2<(int)192, (int)192, (int)192> )); (void)cudaLaunch(((char *)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst2<(int)192, (int)192, (int)192> ))); };}
template<> void __wrapper__device_stub_kernel_coulomb_sph_cutoff_cnst2<192,192,192>( ::cuDoubleComplex *&__cuda_0,::cuDoubleComplex *&__cuda_1){__device_stub__Z31kernel_coulomb_sph_cutoff_cnst2ILi192ELi192ELi192EEvP7double2S1_( (::cuDoubleComplex *&)__cuda_0,(::cuDoubleComplex *&)__cuda_1);}
static void __device_stub__Z28__kernel_lessen_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvPdS0_(double *__par0, double *__par1){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0UL) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)8UL) != cudaSuccess) return;{ volatile static char *__f __attribute__((unused)); __f = ((char *)((void ( *)(double *, double *))__kernel_lessen_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> )); (void)cudaLaunch(((char *)((void ( *)(double *, double *))__kernel_lessen_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> ))); };}
template<> void __wrapper__device_stub___kernel_lessen_1Dindexing__<64U,48U,32U,64U,72U,80U>( double *&__cuda_0,double *&__cuda_1){__device_stub__Z28__kernel_lessen_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvPdS0_( (double *&)__cuda_0,(double *&)__cuda_1);}
static void __nv_cudaEntityRegisterCallback(void **__T236){{ volatile static void **__ref __attribute__((unused)); __ref = (volatile void **)__T236; };__nv_save_fatbinhandle_for_managed_rt(__T236);__cudaRegisterFunction(__T236, (const char*)((void ( *)(double *, double *))__kernel_lessen_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> ), (char*)"_Z28__kernel_lessen_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvPdS0_", "_Z28__kernel_lessen_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvPdS0_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst2<(int)192, (int)192, (int)192> ), (char*)"_Z31kernel_coulomb_sph_cutoff_cnst2ILi192ELi192ELi192EEvP7double2S1_", "_Z31kernel_coulomb_sph_cutoff_cnst2ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst1<(int)192, (int)192, (int)192> ), (char*)"_Z31kernel_coulomb_sph_cutoff_cnst1ILi192ELi192ELi192EEvP7double2S1_", "_Z31kernel_coulomb_sph_cutoff_cnst1ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff_cnst0<(int)192, (int)192, (int)192> ), (char*)"_Z31kernel_coulomb_sph_cutoff_cnst0ILi192ELi192ELi192EEvP7double2S1_", "_Z31kernel_coulomb_sph_cutoff_cnst0ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff2<(int)192, (int)192, (int)192> ), (char*)"_Z26kernel_coulomb_sph_cutoff2ILi192ELi192ELi192EEvP7double2S1_", "_Z26kernel_coulomb_sph_cutoff2ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff1<(int)192, (int)192, (int)192> ), (char*)"_Z26kernel_coulomb_sph_cutoff1ILi192ELi192ELi192EEvP7double2S1_", "_Z26kernel_coulomb_sph_cutoff1ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, cuDoubleComplex *))kernel_coulomb_sph_cutoff0<(int)192, (int)192, (int)192> ), (char*)"_Z26kernel_coulomb_sph_cutoff0ILi192ELi192ELi192EEvP7double2S1_", "_Z26kernel_coulomb_sph_cutoff0ILi192ELi192ELi192EEvP7double2S1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__T236, (const char*)((void ( *)(cuDoubleComplex *, double *))__kernel_enlarge_1Dindexing__<(unsigned int)64u, (unsigned int)48u, (unsigned int)32u, (unsigned int)64u, (unsigned int)72u, (unsigned int)80u> ), (char*)"_Z29__kernel_enlarge_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvP7double2Pd", "_Z29__kernel_enlarge_1Dindexing__ILj64ELj48ELj32ELj64ELj72ELj80EEvP7double2Pd", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterVar(__T236, (char*)&::d_charge, (char*)"d_charge", "d_charge", 0, 8, 1, 0);__cudaRegisterVar(__T236, (char*)&::d_lcutoff, (char*)"d_lcutoff", "d_lcutoff", 0, 8, 1, 0);__cudaRegisterVar(__T236, (char*)&::d_kkx, (char*)"d_kkx", "d_kkx", 0, 1536, 1, 0);__cudaRegisterVar(__T236, (char*)&::d_kky, (char*)"d_kky", "d_kky", 0, 1536, 1, 0);__cudaRegisterVar(__T236, (char*)&::d_kkz, (char*)"d_kkz", "d_kkz", 0, 1536, 1, 0);}
static void __sti____cudaRegisterAll_15_Coulomb_cpp1_ii_9a02c5bc(void){__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); { void (*callback_fp)(void **) = (void (*)(void **))(__nv_cudaEntityRegisterCallback); (*callback_fp)(__cudaFatCubinHandle); } atexit(__cudaUnregisterBinaryUtil);}

#pragma GCC diagnostic pop
# 2 "Coulomb.cudafe1.stub.c" 2
# 1 "Coulomb.cudafe1.stub.c"
