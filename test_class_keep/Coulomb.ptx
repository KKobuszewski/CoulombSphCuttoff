//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_52
.address_size 64

	// .globl	_Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 d_charge[8];
.const .align 8 .b8 d_lcutoff[8];
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .entry _Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd(
	.param .u64 _Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd_param_0,
	.param .u64 _Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [_Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd_param_0];
	ld.param.u64 	%rd2, [_Z29__kernel_enlarge_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvP7double2Pd_param_1];
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r1, %r2, %r3, %r4;
	setp.gt.u32	%p1, %r1, 262143;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvt.u64.u32	%rd4, %r1;
	shr.u32 	%r5, %r1, 11;
	shl.b32 	%r6, %r5, 11;
	cvt.u64.u32	%rd5, %r6;
	sub.s64 	%rd6, %rd4, %rd5;
	shr.u64 	%rd7, %rd6, 5;
	shl.b64 	%rd8, %rd7, 5;
	mul.wide.u32 	%rd9, %r1, 16;
	add.s64 	%rd10, %rd3, %rd9;
	ld.global.v2.f64 	{%fd1, %fd2}, [%rd10];
	mul.f64 	%fd5, %fd2, %fd2;
	fma.rn.f64 	%fd6, %fd1, %fd1, %fd5;
	mul.lo.s64 	%rd11, %rd7, 384;
	mul.wide.u32 	%rd12, %r5, 147456;
	add.s64 	%rd13, %rd12, %rd6;
	add.s64 	%rd14, %rd13, 18935984;
	sub.s64 	%rd15, %rd14, %rd8;
	add.s64 	%rd16, %rd15, %rd11;
	cvta.to.global.u64 	%rd17, %rd2;
	shl.b64 	%rd18, %rd16, 3;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.f64 	[%rd19], %fd6;

BB0_2:
	ret;
}

	// .globl	_Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1_
.visible .entry _Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1_(
	.param .u64 _Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1__param_0,
	.param .u64 _Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1__param_1
)
{
	.local .align 4 .b8 	__local_depot1[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<13>;
	.reg .b32 	%r<36>;
	.reg .f64 	%fd<81>;
	.reg .b64 	%rd<17>;


	mov.u64 	%rd16, __local_depot1;
	cvta.local.u64 	%SP, %rd16;
	ld.param.u64 	%rd3, [_Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1__param_0];
	ld.param.u64 	%rd4, [_Z26kernel_coulomb_sph_cutoff0ILi384ELi384ELi384EEvP7double2S1__param_1];
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	cvt.u64.u32	%rd2, %r1;
	setp.gt.u32	%p1, %r1, 28459007;
	@%p1 bra 	BB1_13;

	cvt.u32.u64	%r9, %rd2;
	mul.hi.s32 	%r10, %r1, -496999669;
	add.s32 	%r11, %r10, %r1;
	shr.u32 	%r12, %r11, 31;
	shr.s32 	%r13, %r11, 16;
	add.s32 	%r14, %r13, %r12;
	mad.lo.s32 	%r15, %r14, -74112, %r9;
	mul.hi.s32 	%r16, %r15, 356059465;
	shr.u32 	%r17, %r16, 31;
	shr.s32 	%r18, %r16, 4;
	add.s32 	%r19, %r18, %r17;
	mad.lo.s32 	%r20, %r19, -193, %r15;
	add.s32 	%r21, %r14, -384;
	setp.lt.s32	%p2, %r1, 14229504;
	selp.b32	%r22, %r14, %r21, %p2;
	cvt.rn.f64.s32	%fd23, %r22;
	mul.f64 	%fd24, %fd23, 0d3F90C152382D7365;
	setp.lt.s32	%p3, %r15, 37056;
	add.s32 	%r23, %r19, -384;
	selp.b32	%r24, %r19, %r23, %p3;
	cvt.rn.f64.s32	%fd25, %r24;
	mul.f64 	%fd26, %fd25, 0d3F90C152382D7365;
	setp.lt.s32	%p4, %r20, 192;
	add.s32 	%r25, %r20, -384;
	selp.b32	%r26, %r20, %r25, %p4;
	cvt.rn.f64.s32	%fd27, %r26;
	mul.f64 	%fd28, %fd27, 0d3F90C152382D7365;
	mul.f64 	%fd29, %fd26, %fd26;
	fma.rn.f64 	%fd30, %fd24, %fd24, %fd29;
	fma.rn.f64 	%fd1, %fd28, %fd28, %fd30;
	cvta.to.global.u64 	%rd6, %rd3;
	shl.b64 	%rd7, %rd2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.v2.f64 	{%fd31, %fd32}, [%rd8];
	setp.gt.f64	%p5, %fd1, 0d3CD203AF9EE75616;
	@%p5 bra 	BB1_3;
	bra.uni 	BB1_2;

BB1_3:
	mul.f64 	%fd43, %fd1, 0d4008000000000000;
	sqrt.rn.f64 	%fd44, %fd43;
	ld.const.f64 	%fd45, [d_lcutoff];
	mul.f64 	%fd76, %fd45, %fd44;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r27, %temp}, %fd76;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd76;
	}
	and.b32  	%r29, %r28, 2147483647;
	setp.eq.s32	%p6, %r29, 2146435072;
	setp.eq.s32	%p7, %r27, 0;
	and.pred  	%p8, %p6, %p7;
	@!%p8 bra 	BB1_5;
	bra.uni 	BB1_4;

BB1_4:
	mov.f64 	%fd46, 0d0000000000000000;
	mul.rn.f64 	%fd76, %fd76, %fd46;

BB1_5:
	mul.f64 	%fd47, %fd76, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r35, %fd47;
	st.local.u32 	[%rd1], %r35;
	cvt.rn.f64.s32	%fd48, %r35;
	neg.f64 	%fd49, %fd48;
	mov.f64 	%fd50, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd51, %fd49, %fd50, %fd76;
	mov.f64 	%fd52, 0d3C91A62633145C00;
	fma.rn.f64 	%fd53, %fd49, %fd52, %fd51;
	mov.f64 	%fd54, 0d397B839A252049C0;
	fma.rn.f64 	%fd77, %fd49, %fd54, %fd53;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r30}, %fd76;
	}
	and.b32  	%r31, %r30, 2145386496;
	setp.lt.u32	%p9, %r31, 1105199104;
	@%p9 bra 	BB1_7;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd76;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd77, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r35, [%rd1];

BB1_7:
	add.s32 	%r5, %r35, 1;
	and.b32  	%r32, %r5, 1;
	shl.b32 	%r33, %r32, 3;
	setp.eq.b32	%p10, %r32, 1;
	selp.f64	%fd55, 0dBDA8FF8320FD8164, 0d3DE5DB65F9785EBA, %p10;
	mul.wide.u32 	%rd10, %r33, 8;
	mov.u64 	%rd11, __cudart_sin_cos_coeffs;
	add.s64 	%rd12, %rd10, %rd11;
	ld.const.f64 	%fd56, [%rd12+8];
	mul.rn.f64 	%fd12, %fd77, %fd77;
	fma.rn.f64 	%fd57, %fd55, %fd12, %fd56;
	ld.const.f64 	%fd58, [%rd12+16];
	fma.rn.f64 	%fd59, %fd57, %fd12, %fd58;
	ld.const.f64 	%fd60, [%rd12+24];
	fma.rn.f64 	%fd61, %fd59, %fd12, %fd60;
	ld.const.f64 	%fd62, [%rd12+32];
	fma.rn.f64 	%fd63, %fd61, %fd12, %fd62;
	ld.const.f64 	%fd64, [%rd12+40];
	fma.rn.f64 	%fd65, %fd63, %fd12, %fd64;
	ld.const.f64 	%fd66, [%rd12+48];
	fma.rn.f64 	%fd13, %fd65, %fd12, %fd66;
	fma.rn.f64 	%fd78, %fd13, %fd77, %fd77;
	setp.eq.s32	%p11, %r32, 0;
	@%p11 bra 	BB1_9;

	mov.f64 	%fd67, 0d3FF0000000000000;
	fma.rn.f64 	%fd78, %fd13, %fd12, %fd67;

BB1_9:
	and.b32  	%r34, %r5, 2;
	setp.eq.s32	%p12, %r34, 0;
	@%p12 bra 	BB1_11;

	mov.f64 	%fd68, 0d0000000000000000;
	mov.f64 	%fd69, 0dBFF0000000000000;
	fma.rn.f64 	%fd78, %fd78, %fd69, %fd68;

BB1_11:
	ld.const.f64 	%fd70, [d_charge];
	mov.f64 	%fd71, 0d3FF0000000000000;
	sub.f64 	%fd72, %fd71, %fd78;
	mul.f64 	%fd73, %fd70, %fd72;
	mul.f64 	%fd74, %fd1, 0d418B000000000000;
	div.rn.f64 	%fd75, %fd73, %fd74;
	mul.f64 	%fd79, %fd31, %fd75;
	mul.f64 	%fd80, %fd32, %fd75;
	bra.uni 	BB1_12;

BB1_2:
	mul.f64 	%fd33, %fd31, 0d3FF8000000000000;
	ld.const.f64 	%fd34, [d_charge];
	mul.f64 	%fd35, %fd33, %fd34;
	ld.const.f64 	%fd36, [d_lcutoff];
	mul.f64 	%fd37, %fd35, %fd36;
	mul.f64 	%fd38, %fd36, %fd37;
	div.rn.f64 	%fd79, %fd38, 0d418B000000000000;
	mul.f64 	%fd39, %fd32, 0d3FF8000000000000;
	mul.f64 	%fd40, %fd39, %fd34;
	mul.f64 	%fd41, %fd40, %fd36;
	mul.f64 	%fd42, %fd36, %fd41;
	div.rn.f64 	%fd80, %fd42, 0d418B000000000000;

BB1_12:
	cvta.to.global.u64 	%rd13, %rd4;
	add.s64 	%rd15, %rd13, %rd7;
	st.global.v2.f64 	[%rd15], {%fd79, %fd80};

BB1_13:
	ret;
}

	// .globl	_Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1_
.visible .entry _Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1_(
	.param .u64 _Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1__param_0,
	.param .u64 _Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1__param_1
)
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<44>;
	.reg .f64 	%fd<45>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [_Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1__param_0];
	ld.param.u64 	%rd4, [_Z32kernel_coulomb_sph_cutoff_3Didx0ILi384ELi384ELi384EEvP7double2S1__param_1];
	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r5, %r6, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.z;
	mov.u32 	%r12, %ctaid.z;
	mov.u32 	%r13, %tid.z;
	mad.lo.s32 	%r3, %r11, %r12, %r13;
	mad.lo.s32 	%r4, %r2, 384, %r3;
	mul.lo.s32 	%r14, %r1, -147456;
	setp.eq.s32	%p1, %r4, %r14;
	mad.lo.s32 	%r15, %r1, 147456, %r4;
	mul.wide.s32 	%rd6, %r15, 16;
	add.s64 	%rd2, %rd5, %rd6;
	@%p1 bra 	BB2_3;
	bra.uni 	BB2_1;

BB2_3:
	ld.const.f64 	%fd33, [d_charge];
	mul.f64 	%fd34, %fd33, 0d3FF8000000000000;
	ld.const.f64 	%fd35, [d_lcutoff];
	mul.f64 	%fd36, %fd34, %fd35;
	mul.f64 	%fd37, %fd35, %fd36;
	div.rn.f64 	%fd38, %fd37, 0d418B000000000000;
	ld.global.v2.f64 	{%fd39, %fd40}, [%rd1];
	mul.f64 	%fd43, %fd38, %fd40;
	mul.f64 	%fd44, %fd38, %fd39;
	st.global.v2.f64 	[%rd2], {%fd44, %fd43};
	bra.uni 	BB2_4;

BB2_1:
	setp.lt.s32	%p2, %r3, 384;
	setp.lt.s32	%p3, %r2, 384;
	and.pred  	%p4, %p2, %p3;
	setp.lt.s32	%p5, %r1, 384;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB2_4;
	bra.uni 	BB2_2;

BB2_2:
	add.s64 	%rd8, %rd1, %rd6;
	shl.b32 	%r17, %r1, 1;
	mul.hi.s32 	%r18, %r17, 715827883;
	shr.u32 	%r19, %r18, 31;
	shr.s32 	%r20, %r18, 6;
	add.s32 	%r21, %r20, %r19;
	mul.lo.s32 	%r22, %r21, 384;
	sub.s32 	%r23, %r17, %r22;
	sub.s32 	%r24, %r1, %r17;
	add.s32 	%r25, %r24, %r23;
	cvt.rn.f64.s32	%fd1, %r25;
	mul.f64 	%fd2, %fd1, 0d4043BD3CC9BE45DE;
	mul.f64 	%fd3, %fd1, %fd2;
	div.rn.f64 	%fd4, %fd3, 0d4102000000000000;
	shl.b32 	%r26, %r2, 1;
	mul.hi.s32 	%r27, %r26, 715827883;
	shr.u32 	%r28, %r27, 31;
	shr.s32 	%r29, %r27, 6;
	add.s32 	%r30, %r29, %r28;
	mul.lo.s32 	%r31, %r30, 384;
	sub.s32 	%r32, %r26, %r31;
	sub.s32 	%r33, %r2, %r26;
	add.s32 	%r34, %r33, %r32;
	cvt.rn.f64.s32	%fd5, %r34;
	mul.f64 	%fd6, %fd5, 0d4043BD3CC9BE45DE;
	mul.f64 	%fd7, %fd5, %fd6;
	div.rn.f64 	%fd8, %fd7, 0d4102000000000000;
	add.f64 	%fd9, %fd4, %fd8;
	shl.b32 	%r35, %r3, 1;
	mul.hi.s32 	%r36, %r35, 715827883;
	shr.u32 	%r37, %r36, 31;
	shr.s32 	%r38, %r36, 6;
	add.s32 	%r39, %r38, %r37;
	mul.lo.s32 	%r40, %r39, 384;
	sub.s32 	%r41, %r35, %r40;
	sub.s32 	%r42, %r3, %r35;
	add.s32 	%r43, %r42, %r41;
	cvt.rn.f64.s32	%fd10, %r43;
	mul.f64 	%fd11, %fd10, 0d4043BD3CC9BE45DE;
	mul.f64 	%fd12, %fd10, %fd11;
	div.rn.f64 	%fd13, %fd12, 0d4102000000000000;
	add.f64 	%fd14, %fd9, %fd13;
	ld.const.f64 	%fd15, [d_charge];
	ld.global.v2.f64 	{%fd16, %fd17}, [%rd8];
	mul.f64 	%fd20, %fd16, %fd15;
	mul.f64 	%fd21, %fd14, 0d4008000000000000;
	sqrt.rn.f64 	%fd22, %fd21;
	ld.const.f64 	%fd23, [d_lcutoff];
	mul.f64 	%fd24, %fd23, %fd22;
	mov.f64 	%fd25, 0d3FF0000000000000;
	sub.f64 	%fd26, %fd25, %fd24;
	mul.f64 	%fd27, %fd20, %fd26;
	mul.f64 	%fd28, %fd14, 0d4110000000000000;
	mul.f64 	%fd29, %fd17, %fd15;
	mul.f64 	%fd30, %fd29, %fd26;
	div.rn.f64 	%fd31, %fd30, %fd28;
	div.rn.f64 	%fd32, %fd27, %fd28;
	st.global.v2.f64 	[%rd2], {%fd32, %fd31};

BB2_4:
	ret;
}

	// .globl	_Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0_
.visible .entry _Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0_(
	.param .u64 _Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0__param_0,
	.param .u64 _Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0__param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [_Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0__param_0];
	ld.param.u64 	%rd2, [_Z28__kernel_lessen_1Dindexing__ILj128ELj64ELj32ELj128ELj160ELj176EEvPdS0__param_1];
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r2;
	setp.gt.u32	%p1, %r1, 262143;
	@%p1 bra 	BB3_2;

	cvt.u64.u32	%rd3, %r1;
	shr.u32 	%r5, %r1, 11;
	shl.b32 	%r6, %r5, 11;
	cvt.u64.u32	%rd4, %r6;
	sub.s64 	%rd5, %rd3, %rd4;
	shr.u64 	%rd6, %rd5, 5;
	shl.b64 	%rd7, %rd6, 5;
	mul.lo.s64 	%rd8, %rd6, 384;
	mul.wide.u32 	%rd9, %r5, 147456;
	add.s64 	%rd10, %rd9, %rd5;
	add.s64 	%rd11, %rd10, 18935984;
	sub.s64 	%rd12, %rd11, %rd7;
	add.s64 	%rd13, %rd12, %rd8;
	cvta.to.global.u64 	%rd14, %rd1;
	shl.b64 	%rd15, %rd13, 3;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.f64 	%fd1, [%rd16];
	cvta.to.global.u64 	%rd17, %rd2;
	mul.wide.u32 	%rd18, %r1, 8;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.f64 	[%rd19], %fd1;

BB3_2:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%rd100, __local_depot4;
	cvta.local.u64 	%SP, %rd100;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd38;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB4_13;

	add.s32 	%r16, %r4, -1024;
	shr.u32 	%r17, %r16, 6;
	mov.u32 	%r18, 16;
	sub.s32 	%r5, %r18, %r17;
	mov.u32 	%r19, 19;
	sub.s32 	%r20, %r19, %r17;
	mov.u32 	%r21, 18;
	min.s32 	%r6, %r21, %r20;
	setp.gt.s32	%p2, %r5, %r6;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB4_4;

	mov.b64 	 %rd41, %fd4;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd3, %rd42, -9223372036854775808;
	add.s32 	%r7, %r5, -1;
	mov.u64 	%rd92, %rd1;
	bfe.u32 	%r22, %r1, 20, 11;
	add.s32 	%r23, %r22, -1024;
	shr.u32 	%r24, %r23, 6;
	neg.s32 	%r25, %r24;
	mul.wide.s32 	%rd43, %r25, 8;
	mov.u64 	%rd44, __cudart_i2opi_d;
	add.s64 	%rd45, %rd43, %rd44;
	add.s64 	%rd90, %rd45, 120;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r7;

BB4_3:
	.pragma "nounroll";
	mov.u32 	%r8, %r39;
	mov.u64 	%rd7, %rd91;
	ld.const.u64 	%rd48, [%rd90];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd48;    
	mov.b64         {blo,bhi}, %rd3;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd46, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd92], %rd46;
	add.s32 	%r9, %r8, 1;
	sub.s32 	%r26, %r9, %r7;
	mul.wide.s32 	%rd51, %r26, 8;
	add.s64 	%rd92, %rd1, %rd51;
	add.s64 	%rd13, %rd7, 8;
	mov.u64 	%rd93, %rd13;
	add.s64 	%rd90, %rd90, 8;
	setp.lt.s32	%p3, %r9, %r6;
	mov.u64 	%rd91, %rd13;
	mov.u32 	%r39, %r9;
	@%p3 bra 	BB4_3;

BB4_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r10, %r3, 63;
	setp.eq.s32	%p4, %r10, 0;
	@%p4 bra 	BB4_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r10;
	shl.b64 	%rd52, %rd96, %r10;
	shr.u64 	%rd53, %rd95, %r28;
	or.b64  	%rd96, %rd52, %rd53;
	shl.b64 	%rd54, %rd95, %r10;
	ld.local.u64 	%rd55, [%rd1+8];
	shr.u64 	%rd56, %rd55, %r28;
	or.b64  	%rd95, %rd56, %rd54;

BB4_6:
	cvta.to.local.u64 	%rd57, %rd37;
	shr.u64 	%rd58, %rd96, 62;
	cvt.u32.u64	%r29, %rd58;
	shr.u64 	%rd59, %rd95, 62;
	shl.b64 	%rd60, %rd96, 2;
	or.b64  	%rd98, %rd60, %rd59;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd61, %rd96, 61;
	cvt.u32.u64	%r30, %rd61;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.ne.s32	%p5, %r40, 0;
	selp.b32	%r34, %r33, %r32, %p5;
	st.local.u32 	[%rd57], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB4_8;

	mov.u64 	%rd65, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd65;
	mov.b64         {a2,a3}, %rd65;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB4_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB4_10;

	shl.b64 	%rd68, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd69, %rd97, %r36;
	or.b64  	%rd98, %rd69, %rd68;

BB4_10:
	mov.u64 	%rd73, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd73;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd70, {r0,r1};     
	mov.b64         %rd99, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd99, 1;
	@%p8 bra 	BB4_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd70;
	mov.b64         {a2,a3}, %rd99;
	mov.b64         {b0,b1}, %rd70;
	mov.b64         {b2,b3}, %rd99;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd74, {r0,r1};
	mov.b64         %rd99, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB4_12:
	cvt.u64.u32	%rd80, %r40;
	shl.b64 	%rd81, %rd80, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd82, %r38;
	shl.b64 	%rd83, %rd82, 52;
	add.s64 	%rd84, %rd99, 1;
	shr.u64 	%rd85, %rd84, 10;
	add.s64 	%rd86, %rd85, 1;
	shr.u64 	%rd87, %rd86, 1;
	add.s64 	%rd88, %rd87, %rd83;
	or.b64  	%rd89, %rd88, %rd81;
	mov.b64 	 %fd4, %rd89;

BB4_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


